
var index = lunr(function () {
    this.use(lunr.fr);
    this.field('body');
    this.ref('url');
});

var documentTitles = {};



documentTitles["contact.html#votre-avis-compte"] = "Votre avis compte";
index.add({
    url: "contact.html#votre-avis-compte",
    title: "Votre avis compte",    
    body: "# Votre avis compte    &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;Contact\&quot;}]); });&lt;/script&gt;  Vous avez une remarque, une suggestion à apporter&amp;nbsp;?  Vérifiez que ceci n’a pas déjà été remonté par quelqu’un d’autre en consultant [la liste des «&amp;nbsp;&lt;i lang=\&quot;en\&quot;&gt;issues&lt;/i&gt;&amp;nbsp;»](https://github.com/Orange-OpenSource/a11y-guidelines/issues) sur notre compte github.   Si vous ne trouvez rien concernant votre remarque, [adressez-nous votre commentaire](https://github.com/Orange-OpenSource/a11y-guidelines/issues/new) via github.  &amp;nbsp; &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["about.html#a-propos"] = "À propos";
index.add({
    url: "about.html#a-propos",
    title: "À propos",    
    body: "# À propos     &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;À propos\&quot;}]); });&lt;/script&gt;  Documentation sous [licence CC BY SA 3.0](https://github.com/Orange-OpenSource/a11y-guidelines/blob/master/LICENSE). Le code source de ce site ainsi que celui des exemples est disponible [sur notre compte github](https://github.com/Orange-OpenSource/a11y-guidelines).    Le logo Orange ainsi que certaines images et captures sont la propriété d'Orange&amp;nbsp;:    &lt;span lang=\&quot;en\&quot;&gt;Copyright (C) 2016 Orange SA All rights reserved&lt;/span&gt;   [Liste des fichiers concernés](/NOTICE.txt)  "
});

documentTitles["about.html#gestion-des-cookies"] = "Gestion des cookies";
index.add({
    url: "about.html#gestion-des-cookies",
    title: "Gestion des cookies",    
    body: "## Gestion des cookies  Vous pouvez modifier à tous moments vos préférences directement depuis le &lt;a role=\&quot;button\&quot; href=\&quot;javascript:tarteaucitron.userInterface.openPanel();\&quot;&gt;panneau de gestion des cookies&lt;/a&gt;.  &amp;nbsp; &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["criteria-android-dev.html#les-criteres-incontournables-sous-android-pour-le-developpement"] = "Les critères incontournables sous Android pour le développement";
index.add({
    url: "criteria-android-dev.html#les-criteres-incontournables-sous-android-pour-le-developpement",
    title: "Les critères incontournables sous Android pour le développement",    
    body: "# Les critères incontournables sous Android pour le développement  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;Android\&quot;, \&quot;url\&quot;: \&quot;./criteria-android.html\&quot;},         {\&quot;label\&quot;:\&quot;Guide pour les développeurs\&quot;} 	]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Critères de conception\&quot;,\&quot;url\&quot;:\&quot;criteria-android-conception.html\&quot;},          {\&quot;label\&quot;:\&quot;Guide pour les développeurs\&quot;,\&quot;url\&quot;:\&quot;criteria-android-dev.html\&quot;, \&quot;expanded\&quot;: true},         {\&quot;label\&quot;:\&quot;TalkBack\&quot;,\&quot;url\&quot;:\&quot;screen-reader-talkback.html\&quot;}     ]);         });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-android\&quot;&gt;&lt;/span&gt;  Ce guide a pour objectif de présenter les différentes options d’accessibilité du &lt;abbr&gt;SDK&lt;/abbr&gt; Android. À travers différentes catégories, ce guide explique comment utiliser les attributs et méthodes d’accessibilité et propose des liens vers la documentation officielle de Google. Des exemples de codes sont aussi présents pour illustrer les propos.  "
});

documentTitles["criteria-android-dev.html#alternatives-textuelles"] = "Alternatives textuelles";
index.add({
    url: "criteria-android-dev.html#alternatives-textuelles",
    title: "Alternatives textuelles",    
    body: "## Alternatives textuelles "
});

documentTitles["criteria-android-dev.html#descriptionnbsp"] = "Description&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#descriptionnbsp",
    title: "Description&amp;nbsp;:",    
    body: "### Description&amp;nbsp;:  Sous Android, la vocalisation d’un élément s’effectue à travers un attribut, à savoir le `contentDescription`. Cet attribut qui accepte une simple chaîne de caractère en paramètre (et donc internationalisable) redéfinit le texte qui sera lu par le service d’accessibilité et notamment &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;. Cela permet d’avoir un texte de composant plus explicite que celui affiché à l’écran. Par exemple, dans le cas d’un bouton dont le titre est «&amp;nbsp;OK&amp;nbsp;», on pourra indiquer que le bouton sert à valider un choix.   Le `contentDescription` doit aussi être utilisé sur les éléments &lt;i lang=\&quot;en\&quot;&gt;custom&lt;/i&gt; pour indiquer leur nature. Par exemple, un `LinearLayout` que l’on rendrait cliquable doit avoir un `contentDescription` de la forme «&amp;nbsp;nom_du_bouton, bouton&amp;nbsp;» (il faut également permettre le focus du bouton pour l’accessibilité, voir la section correspondante).    À noter que le `contentDescription` est disponible pour tout élément qui hérite de `View`. Il est donc possible de positionner un `contentDescription` sur une `TextView` par exemple, comme montré dans la section «&amp;nbsp;Pour la conception – Alternative textuelle ».  Talkback va vocaliser pour une checkbox activée,  «&amp;nbsp;coché, `text`, case à cocher&amp;nbsp;» suivi de «&amp;nbsp;appuyer deux fois pour cocher ou décocher&amp;nbsp;». Si la checkbox est désactivée `android:enabled=\&quot;false\&quot;`, la vocalisation est «&amp;nbsp;coché, `text`, case à cocher, désactivé&amp;nbsp;». Le `contentDescription` va s’il est présent remplacer la partie `text` dans la vocalisation. L’ordre de lecture des éléments peut varier en fonction de la version du &lt;abbr&gt;SDK&lt;/abbr&gt;, mais les informations les plus importantes sont de préférence vocalisées en premier.   "
});

documentTitles["criteria-android-dev.html#exemplesnbsp"] = "Exemples&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#exemplesnbsp",
    title: "Exemples&amp;nbsp;:",    
    body: "### Exemples&amp;nbsp;:  Exemple simple (internationalisé)&amp;nbsp;: &lt;pre&gt;&lt;code class=\&quot;xml\&quot;&gt;&amp;lt;TextView … android:id=\&quot;@+id/myTextviewId\&quot; android:contentDescription=\&quot;@string/criteria_alt_ex1_cd_txt2\&quot; &amp;#47;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt; &lt;code class=\&quot;java\&quot;&gt;myTextView = (TextView) findViewById(R.id.myTextviewId); myTextView.setContentDescription(getString(R.string.criteria_alt_ex1_cd_txt2));&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;kotlin\&quot;&gt;myTextViewId.contentDescription = getString(R.string.criteria_alt_ex1_cd_txt2)&lt;/code&gt;&lt;/pre&gt;  Exemple des onglets tabulés : L’exemple présente des onglets tabulés au-dessus et en-dessous d’un `ViewPager` dans un cas en `TabLayout` et dans l’autre en `BottomNavigationView`. Les onglets ne se pratiquent plus sous forme de `TabHost`. Il faut indiquer l’état et la nature des onglets (non internationalisé)&amp;nbsp;:    &lt;pre&gt;&lt;code class=\&quot;xml\&quot;&gt;//Dans le layout de l’activité &amp;lt;android.support.constraint.ConstraintLayout    …&amp;gt;     &amp;lt;android.support.v4.view.ViewPager     android:id=\&quot;@+id/viewpager\&quot;         …         &amp;gt;     &amp;lt;android.support.design.widget.TabLayout             android:id=\&quot;@+id/tabtoolbar_pager\&quot;             …     &amp;lt;/android.support.v4.view.ViewPager&amp;gt;     &amp;lt;android.support.design.widget.BottomNavigationView         android:id=\&quot;@+id/navigation\&quot;         […]         app:menu=\&quot;@menu/navigation\&quot; /&amp;gt; &amp;lt;/android.support.constraint.ConstraintLayout&amp;gt; &amp;nbsp; &amp;nbsp; //Dans le fichier strings.xml &amp;lt;string name=\&quot;cd_tab_title_param\&quot;&amp;gt;%1$s, onglet %2$s sur %3$s&amp;lt;/string&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt; &lt;code class=\&quot;java\&quot;&gt;     @Override     protected void onCreate(Bundle savedInstanceState) {         super.onCreate(savedInstanceState);         setContentView(R.layout.activity_main);         mTabLayout = (TabLayout) findViewById(R.id.tabtoolbar_pager);         mViewPager = (ViewPager) findViewById(R.id.viewpager);         mTabLayout.addOnLayoutChangeListener(mTabLayoutListener);         mTabLayout.setupWithViewPager(mViewPager);         mAdapter = new ScreenSlidePagerAdapter(getSupportFragmentManager());         mViewPager.setAdapter(mAdapter); //initialise le contentDescription à la création         updateTabContentDescription(0);         mViewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {             […]             public void onPageSelected(int position) {                 updateTabContentDescription(position);             }         }); //Le BottomNavigationView n’est pas forcément au bas de la vue, il est à positionner dans le layout.          BottomNavigationView navigation = (BottomNavigationView) findViewById(R.id.navigation);         navigation.setOnNavigationItemSelectedListener(mOnNavigationItemSelectedListener);         […]         }     private void updateTabContentDescription(int position) {         for (int i = 0; i &amp;lt; mAdapter.getCount(); i++) {             TabLayout.Tab tab = mTabLayout.getTabAt(i);             String cd_param_string = getString(R.string.cd_tab_title_param,                     mAdapter.getPageTitle(i), // titre en paramètre 1 voir le xml                     i + 1,                    // le numéro de l’onglet actuel, paramètre 2                     mAdapter.getCount());     // le nombre d’onglets automatique, paramètre 3             if (tab != null) {                 tab.setContentDescription(cd_param_string);             }          //Pour Tablayout and BottomNavigationView l’information “sélectionné” est déjà vocalisée.  //Soit, par exemple : «&amp;nbsp;sélectionné, `titre onglet 1`, onglet 1 sur 5&amp;nbsp;» //ou encore «&amp;nbsp;`titre onglet 3`, onglet 3 sur 5.&amp;nbsp;» Puis  «&amp;nbsp;appuyer deux fois pour activer&amp;nbsp;». // Paramètrer la borne supérieure automatiquement permet de ne pas se retrouver avec une vocalisation du type : //«&amp;nbsp;sélectionné, `titre onglet 4`, onglet 4 sur 3.&amp;nbsp;», où la borne supérieure est incohérente. // Pour le `TabHost` il faudrait en plus préciser l’information «&amp;nbsp;sélectionné&amp;nbsp;».         }     } &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt; &lt;code class=\&quot;kotlin\&quot;&gt;     private fun updateTabContentDescription(position: Int) {         for (i in 0 until mAdapter!!.count) {             val tab = mTabLayout!!.getTabAt(i)             val cd_param_string = getString(R.string.cd_tab_title_param,                     mAdapter!!.getPageTitle(i), // titre en paramètre 1 voir le xml                     i + 1,                      // le numéro de l’onglet actuel, paramètre 2                     mAdapter!!.count)           // le nombre d’onglets automatique, paramètre 3             if (tab != null) {                 tab.contentDescription = cd_param_string //Pour Tablayout and BottomNavigationView l’information “sélectionné” est déjà vocalisée.  //Soit, par exemple : «&amp;nbsp;sélectionné, `titre onglet 1`, onglet 1 sur 5&amp;nbsp;» //ou encore «&amp;nbsp;`titre onglet 3`, onglet 3 sur 5.&amp;nbsp;» Puis  «&amp;nbsp;appuyer deux fois pour activer&amp;nbsp;». // Paramètrer la borne supérieure automatiquement permet de ne pas se retrouver avec une vocalisation du type : // «&amp;nbsp;sélectionné, `titre onglet 5`, onglet 4 sur 3.&amp;nbsp;», où la borne supérieure est incohérente. // Pour le `TabHost` il faudrait en plus préciser l’information «&amp;nbsp;sélectionné&amp;nbsp;».             }         }     } &lt;/code&gt;&lt;/pre&gt;    "
});

documentTitles["criteria-android-dev.html#liennbsp"] = "Lien&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#liennbsp",
    title: "Lien&amp;nbsp;:",    
    body: "### Lien&amp;nbsp;:  - [`contentDescription`](http://developer.android.com/reference/android/view/View.html#attr_android:contentDescription)     "
});

documentTitles["criteria-android-dev.html#masquer-des-elements-a-laccessibilite"] = "Masquer des éléments à l’accessibilité";
index.add({
    url: "criteria-android-dev.html#masquer-des-elements-a-laccessibilite",
    title: "Masquer des éléments à l’accessibilité",    
    body: "## Masquer des éléments à l’accessibilité    "
});

documentTitles["criteria-android-dev.html#descriptionnbsp"] = "Description&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#descriptionnbsp",
    title: "Description&amp;nbsp;:",    
    body: "### Description&amp;nbsp;:  Il est possible via un attribut d’accessibilité de masquer des éléments aux outils d’accessibilité (&lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; par exemple). Par extension, il est possible de forcer certains éléments à être visibles aux outils d’accessibilité.   `ImportantForAccessibility`&amp;nbsp;: suivant la valeur de l’attribut, cela permet d’indiquer qu’un élément est visible ou non de l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité.   -	`auto` (0)&amp;nbsp;: valeur par défaut, c’est le système qui décide. Par exemple, un `Button` aura sa valeur par défaut à 1 (&lt;i lang=\&quot;en\&quot;&gt;yes&lt;/i&gt;) et un `LinearLayout` à 2 (&lt;i lang=\&quot;en\&quot;&gt;no&lt;/i&gt;). -	`yes` (1)&amp;nbsp;: la vue est importante pour l’accessibilité. Elle peut par exemple recevoir le focus de &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;. -	`no` (2)&amp;nbsp;: la vue n’est pas importante pour l’accessibilité. Elle ne déclenche plus d’événement d’accessibilité et est par conséquent ignorée par des services tel que &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;. -	`noHideDescendants`  (4)&amp;nbsp;: la vue n’est pas importante pour l’accessibilité, mais également toutes ses vues filles. Cela permet de cacher tous les éléments d’une vue à l’accessibilité en une seule fois. Très utile sur les éléments custom.      À noter&amp;nbsp;: l’attribut «&amp;nbsp;`importantForAccessibility`&amp;nbsp;» est disponible pour tout élément qui hérite de `View`.  "
});

documentTitles["criteria-android-dev.html#exemplesnbsp"] = "Exemples&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#exemplesnbsp",
    title: "Exemples&amp;nbsp;:",    
    body: "### Exemples&amp;nbsp;:  &lt;pre&gt;&lt;code class=\&quot;xml\&quot;&gt;&amp;lt;TextView […] android:id=\&quot;@+id/myTextviewId1\&quot; android:importantForAccessibility=\&quot;4\&quot; &amp;#47;&amp;gt; &amp;lt;TextView […] android:id=\&quot;@+id/myTextviewId2\&quot; android:importantForAccessibility=\&quot;noHideDescendants\&quot; &amp;#47;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt; &lt;code class=\&quot;java\&quot;&gt;myTextView1 = (TextView) findViewById(R.id.myTextviewId1); myTextView2 = (TextView) findViewById(R.id.myTextviewId2); myTextView1.setImportantForAccessibility(4); // JELLY_BEAN myTextView2.setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS); // KITKAT&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;kotlin\&quot;&gt;myTextView1.importantForAccessibility = \&quot;4\&quot; // JELLY_BEAN myTextView2.importantForAccessibility = View.IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS  // KITKAT &lt;/code&gt;&lt;/pre&gt;  "
});

documentTitles["criteria-android-dev.html#liennbsp"] = "Lien&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#liennbsp",
    title: "Lien&amp;nbsp;:",    
    body: "### Lien&amp;nbsp;:  - [`importantForAccessibility`](https://developer.android.com/reference/android/view/View.html#setImportantForAccessibility%28int%29)   "
});

documentTitles["criteria-android-dev.html#declencher-une-vocalisation"] = "Déclencher une vocalisation";
index.add({
    url: "criteria-android-dev.html#declencher-une-vocalisation",
    title: "Déclencher une vocalisation",    
    body: "## Déclencher une vocalisation "
});

documentTitles["criteria-android-dev.html#descriptionnbsp"] = "Description&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#descriptionnbsp",
    title: "Description&amp;nbsp;:",    
    body: "### Description&amp;nbsp;:  Il est très facile de déclencher des vocalisations avec &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;. Déclencher une vocalisation est très utile dans le cas de contenu dynamique, au même titre que les `LiveRegion` (voir la section correspondante). Pour déclencher une vocalisation, il suffit de faire appel à la méthode `announceForAccessibility` en lui passant en paramètre l’`id` de la chaîne de caractères à vocaliser.    À noter&amp;nbsp;: la méthode `announceForAccessibility` est disponible sur tout élément qui hérite de `View` et se fait dans la langue du système.  Attention&amp;nbsp;: nous parlons ici de vocalisation &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; et non pas de &lt;abbr&gt;TTS&lt;/abbr&gt; (Text To Speech) qui peut fonctionner indépendamment du statut de &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;.  "
});

documentTitles["criteria-android-dev.html#exemplenbsp"] = "Exemple&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#exemplenbsp",
    title: "Exemple&amp;nbsp;:",    
    body: "### Exemple&amp;nbsp;:  Il est fréquent de tester la version d’Android avant de déclencher une vocalisation &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;. En effet, `announceForAccessibility` ne fonctionne que depuis l’arrivée d’Android &lt;i lang=\&quot;en\&quot;&gt;Jelly Bean&lt;/i&gt;. &lt;pre&gt; &lt;code class=\&quot;java\&quot;&gt;if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN) {     myView.announceForAccessibility(getString(R.string.criteria_contentchange_ex1_announce));     } &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt; &lt;code class=\&quot;kotlin\&quot;&gt;if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN) {     myView.announceForAccessibility(getString(R.string.criteria_contentchange_ex1_announce))     } &lt;/code&gt;&lt;/pre&gt;  "
});

documentTitles["criteria-android-dev.html#liennbsp"] = "Lien&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#liennbsp",
    title: "Lien&amp;nbsp;:",    
    body: "### Lien&amp;nbsp;:  - [`announceForAccessibility`](https://developer.android.com/reference/android/view/View.html#announceForAccessibility%28java.lang.CharSequence%29)   "
});

documentTitles["criteria-android-dev.html#detecter-si-span-langentalkbackspan-est-active"] = "Détecter si &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; est activé";
index.add({
    url: "criteria-android-dev.html#detecter-si-span-langentalkbackspan-est-active",
    title: "Détecter si &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; est activé",    
    body: "## Détecter si &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; est activé "
});

documentTitles["criteria-android-dev.html#descriptionnbsp"] = "Description&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#descriptionnbsp",
    title: "Description&amp;nbsp;:",    
    body: "### Description&amp;nbsp;:  Sous Android, il est possible de savoir si l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité est activée, et par extension de savoir si &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; est activé.  "
});

documentTitles["criteria-android-dev.html#exemplenbsp"] = "Exemple&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#exemplenbsp",
    title: "Exemple&amp;nbsp;:",    
    body: "### Exemple&amp;nbsp;:  &lt;pre&gt;&lt;code&gt;AccessibilityManager am = (AccessibilityManager) context.getSystemService(ACCESSIBILITY_SERVICE);   boolean isAccessibilityEnabled = am.isEnabled(); &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt; &lt;code class=\&quot;kotlin\&quot;&gt;val am = context.getSystemService(Context.ACCESSIBILITY_SERVICE) as AccessibilityManager val isAccessibilityEnabled = am.isEnabled &lt;/code&gt;&lt;/pre&gt;  "
});

documentTitles["criteria-android-dev.html#liennbsp"] = "Lien&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#liennbsp",
    title: "Lien&amp;nbsp;:",    
    body: "### Lien&amp;nbsp;:  - [`AccessibilityManager`](https://developer.android.com/reference/android/view/accessibility/AccessibilityManager)   "
});

documentTitles["criteria-android-dev.html#regions-i-langenlivei-contenu-dynamique"] = "Régions &lt;i lang=\&quot;en\&quot;&gt;live&lt;/i&gt; (contenu dynamique)";
index.add({
    url: "criteria-android-dev.html#regions-i-langenlivei-contenu-dynamique",
    title: "Régions &lt;i lang=\&quot;en\&quot;&gt;live&lt;/i&gt; (contenu dynamique)",    
    body: "## Régions &lt;i lang=\&quot;en\&quot;&gt;live&lt;/i&gt; (contenu dynamique) "
});

documentTitles["criteria-android-dev.html#descriptionnbsp"] = "Description&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#descriptionnbsp",
    title: "Description&amp;nbsp;:",    
    body: "### Description&amp;nbsp;:  Il est possible de spécifier à une vue qu’elle est une région «&amp;nbsp;&lt;i lang=\&quot;en\&quot;&gt;live&lt;/i&gt;&amp;nbsp;», c’est-à-dire que son contenu est susceptible d’être modifié dynamiquement et qu’elle doit dans ce cas prévenir l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité. Cela aura pour conséquence de générer des vocalisations avec &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;. Un exemple type d’utilisation&amp;nbsp;: sur un formulaire, si l’utilisateur fait une erreur et qu’un message d’erreur apparaît, la vue contenant le message doit être définie comme une région «&amp;nbsp;&lt;i lang=\&quot;en\&quot;&gt;live&lt;/i&gt;&amp;nbsp;».  Il faut passer par la méthode `setAccessibilityLiveRegion` qui prend en paramètre un mode pour la région &lt;i lang=\&quot;en\&quot;&gt;live&lt;/i&gt;. Il existe 3 modes&amp;nbsp;:   -	`ACCESSIBILITY_LIVE_REGION_NONE`&amp;nbsp;: cette vue n’est pas une région «&amp;nbsp;&lt;i lang=\&quot;en\&quot;&gt;live&lt;/i&gt;&amp;nbsp;». C’est la valeur par défaut de la plupart des vues. -	`ACCESSIBILITY_LIVE_REGION_POLITE`&amp;nbsp;: en cas de changement dans la vue, des vocalisations sont effectuées sur les changements. Ces vocalisations sont «&amp;nbsp;polies&amp;nbsp;»&amp;nbsp;: elles sont moins prioritaires que les vocalisations système par exemple. -	`ACCESSIBILITY_LIVE_REGION_ASSERTIVE`&amp;nbsp;: en cas de changement dans la vue, des vocalisations seront effectuées sur les changements. Ces vocalisations sont «&amp;nbsp;&lt;i lang=\&quot;en\&quot;&gt;rude&lt;/i&gt;&amp;nbsp;»&amp;nbsp;: elles sont prioritaires et immédiatement vocalisées.    À noter&amp;nbsp;: la méthode `setAccessibilityLiveRegion` est disponible sur tout élément qui hérite de `View`.  "
});

documentTitles["criteria-android-dev.html#exemplesnbsp"] = "Exemples&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#exemplesnbsp",
    title: "Exemples&amp;nbsp;:",    
    body: "### Exemples&amp;nbsp;:  &lt;pre&gt;&lt;code class=\&quot;xml\&quot;&gt;&amp;lt;TextView    […]    android:accessibilityLiveRegion=\&quot;polite\&quot; /&amp;gt; &lt;/code&gt;&lt;/pre&gt;  "
});

documentTitles["criteria-android-dev.html#liennbsp"] = "Lien&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#liennbsp",
    title: "Lien&amp;nbsp;:",    
    body: "### Lien&amp;nbsp;:  - [`setAccessibilityLiveRegion`](https://developer.android.com/reference/android/view/View.html#setAccessibilityLiveRegion%28int%29)   "
});

documentTitles["criteria-android-dev.html#gerer-lordre-de-lecture-span-langentalkbackspan"] = "Gérer l’ordre de lecture (&lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;)";
index.add({
    url: "criteria-android-dev.html#gerer-lordre-de-lecture-span-langentalkbackspan",
    title: "Gérer l’ordre de lecture (&lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;)",    
    body: "## Gérer l’ordre de lecture (&lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;)  "
});

documentTitles["criteria-android-dev.html#description"] = "Description";
index.add({
    url: "criteria-android-dev.html#description",
    title: "Description",    
    body: "### Description  L’ordre du focus du lecteur d’écran par défaut prend en compte plusieurs paramètres&amp;nbsp;: la lecture «&amp;nbsp;logique&amp;nbsp;», en français, de gauche à droite et de haut en bas, et la lecture du &lt;abbr&gt;xml&lt;/abbr&gt; (ordre de déclaration des éléments). Il est tout à fait possible de redéfinir cet ordre de lecture avec deux outils&amp;nbsp;:   -	`accessibilityTraversalAfter`&amp;nbsp;: prend un id en paramètre et permet de spécifier à la vue qu’elle doit être décrite par l’accessibilité après la vue passée en paramètre. - `accessibilityTraversalBefore`&amp;nbsp;: prend un id en paramètre et permet de spécifier à la vue qu’elle doit être décrite par l’accessibilité avant la vue passée en paramètre.  À noter&amp;nbsp;: ces attributs peuvent être utilisés directement dans le &lt;abbr&gt;xml&lt;/abbr&gt; mais également dans le code via les méthodes `setAccessibilityTraversalAfter` et `setAccessibilityTraversalBefore`. Ces méthodes sont disponibles pour tout élément qui hérite de `View`.  "
});

documentTitles["criteria-android-dev.html#exemplenbsp"] = "Exemple&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#exemplenbsp",
    title: "Exemple&amp;nbsp;:",    
    body: "### Exemple&amp;nbsp;:  &lt;pre&gt;&lt;code class=\&quot;java\&quot;&gt;volupButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.remote0).getId()); voldownButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.volup).getId()); chaineplusButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.voldown).getId()); chainemoinsButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.chaineplus).getId());&lt;/code&gt;&lt;/pre&gt;  "
});

documentTitles["criteria-android-dev.html#liensnbsp"] = "Liens&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#liensnbsp",
    title: "Liens&amp;nbsp;:",    
    body: "### Liens&amp;nbsp;:  - [`setAccessibilityTraversalAfter`](https://developer.android.com/reference/android/view/View.html#setAccessibilityTraversalAfter%28int%29) - [`setAccessibilityTraversalBefore`](https://developer.android.com/reference/android/view/View.html#setAccessibilityTraversalBefore%28int%29)  "
});

documentTitles["criteria-android-dev.html#gerer-la-lecture-des-en-tetes-span-langentalkbackspan"] = "Gérer la lecture des en-têtes (&lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;)";
index.add({
    url: "criteria-android-dev.html#gerer-la-lecture-des-en-tetes-span-langentalkbackspan",
    title: "Gérer la lecture des en-têtes (&lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;)",    
    body: "## Gérer la lecture des en-têtes (&lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;) Android &lt;i&gt;Pie&lt;/i&gt; introduit un niveau de lecture supplémentaire des entêtes `accessibilityHeading` qui permet de parcourir la page sur ces titres et non plus tous les éléments de la page. "
});

documentTitles["criteria-android-dev.html#descriptionnbsp"] = "Description&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#descriptionnbsp",
    title: "Description&amp;nbsp;:",    
    body: "### Description&amp;nbsp;: Le lecteur d’écran peut lire uniquement les entêtes définies dans une page (voir le Guide d’utilisation de &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;, le geste «&amp;nbsp;Slide vers le haut en utilisant un doigt&amp;nbsp;»). Ces entêtes permettent au lecteur de parcourir les grandes sections de la page pour voir si l’information cherchée s’y trouve, sans avoir à tout écouter. "
});

documentTitles["criteria-android-dev.html#exemplenbsp"] = "Exemple&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#exemplenbsp",
    title: "Exemple&amp;nbsp;:",    
    body: "#### Exemple&amp;nbsp;: &lt;pre&gt;&lt;code class=\&quot;xml\&quot;&gt;&amp;lt;TextView […] android:id=\&quot;@+id/myTextLevel1viewId\&quot; android:accessibilityHeading=\&quot;true\&quot; &amp;#47;&amp;gt;&lt;/code&gt;&lt;/pre&gt; "
});

documentTitles["criteria-android-dev.html#liensnbsp"] = "Liens&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#liensnbsp",
    title: "Liens&amp;nbsp;:",    
    body: "#### Liens&amp;nbsp;: - [`accessibilityHeading`](https://developer.android.com/reference/android/R.attr#accessibilityHeading)   "
});

documentTitles["criteria-android-dev.html#formulaires"] = "Formulaires";
index.add({
    url: "criteria-android-dev.html#formulaires",
    title: "Formulaires",    
    body: "## Formulaires "
});

documentTitles["criteria-android-dev.html#descriptionnbsp"] = "Description&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#descriptionnbsp",
    title: "Description&amp;nbsp;:",    
    body: "#### Description&amp;nbsp;: Il est important que les champs de formulaire soient liés à un label. Il existe 2 grandes techniques pour réaliser cette liaison&amp;nbsp;: -	`labelFor`&amp;nbsp;: permet de spécifier à une vue qu’elle est le label d’une autre vue. Cette méthode prend en paramètre l’`id` de la vue que l’on labellise. On peut utiliser cette méthode avec quasiment tout type de champ de formulaire. Utilisable depuis le &lt;abbr&gt;xml&lt;/abbr&gt; `android:labelFor` ou le code `setLabelFor`. `LabelFor` est utilisable depuis tout élément qui hérite de `View`. - `hint`&amp;nbsp;: pour les `EditText` ou `TextView`. Permet d’ajouter un texte d’exemple quand le champ de texte est vide. Cette méthode ne marche que pour les `TextView`. Prend en paramètre l’`id` d’une chaîne de caractère. Utilisable depuis le &lt;abbr&gt;xml&lt;/abbr&gt; `android:hint` ou le code `setHint`. "
});

documentTitles["criteria-android-dev.html#exemplesnbsp"] = "Exemples&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#exemplesnbsp",
    title: "Exemples&amp;nbsp;:",    
    body: "#### Exemples&amp;nbsp;: `LabelFor` dans le &lt;abbr&gt;xml&lt;/abbr&gt;&amp;nbsp;:  &lt;pre&gt;&lt;code&gt;&amp;lt;TextView 	[…]   android:labelFor=\&quot;@+id/imageView11\&quot;   android:importantForAccessibility=\&quot;no\&quot; /&amp;gt;&lt;/code&gt;&lt;/pre&gt;  Remarque&amp;nbsp;: il est très fréquent, une fois le label lié à son champ, de masquer le label à l’accessibilité. En effet, celui ci n’a plus besoin d’être reconnu par l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité car son champ de formulaire l’utilise déjà (et sera donc restitué vocalement par &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; par exemple).  `Hint` dans le &lt;abbr&gt;xml&lt;/abbr&gt;&amp;nbsp;: &lt;pre&gt;&lt;code&gt;&amp;lt;EditText   […]    android:hint=\&quot;@string/criteria_form_ex1_placeholder\&quot; /&amp;gt;&lt;/code&gt;&lt;/pre&gt; "
});

documentTitles["criteria-android-dev.html#liensnbsp"] = "Liens&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#liensnbsp",
    title: "Liens&amp;nbsp;:",    
    body: "#### Liens&amp;nbsp;: - [`setLabelFor`](https://developer.android.com/reference/android/view/View.html#setLabelFor%28int%29) - [`setHint`](https://developer.android.com/reference/android/widget/TextView.html#setHint%28java.lang.CharSequence%29)  "
});

documentTitles["criteria-android-dev.html#taille-des-textes"] = "Taille des textes";
index.add({
    url: "criteria-android-dev.html#taille-des-textes",
    title: "Taille des textes",    
    body: "## Taille des textes "
});

documentTitles["criteria-android-dev.html#descriptionnbsp"] = "Description&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#descriptionnbsp",
    title: "Description&amp;nbsp;:",    
    body: "#### Description&amp;nbsp;: Afin de permettre à l’option «&amp;nbsp;grands caractères&amp;nbsp;» d’interagir correctement avec l’application, plusieurs points sont à respecter durant les développements. - Utiliser une taille de police dynamique&amp;nbsp;: le «&amp;nbsp;sp&amp;nbsp;». Cette unité, spécifique à Android, permet d’obtenir une taille de police en fonction de la densité de pixel de l’écran. Il est plus que recommandé de l’utiliser, ne serait-ce que pour obtenir un design uniforme sur tous les types de &lt;i lang=\&quot;en\&quot;&gt;devices&lt;/i&gt; Android. - Gérer les débordements de contenu&amp;nbsp;: une erreur courante est d’utiliser une taille de texte dynamique («&amp;nbsp;sp&amp;nbsp;» donc) mais de ne pas faire attention au conteneur. Si le texte grossit, le conteneur doit en faire autant pour ne pas qu’il y ait de débordement. On peut parfaitement jouer avec le `min-height` et le `height` des conteneurs pour obtenir un résultat correct (un `height` en `wrap_content` permet de laisser au système le soin de s’adapter). "
});

documentTitles["criteria-android-dev.html#liennbsp"] = "Lien&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#liennbsp",
    title: "Lien&amp;nbsp;:",    
    body: "#### Lien&amp;nbsp;: - [typographie sous Android](https://www.google.com/design/spec/style/typography.html#typography-styles)  "
});

documentTitles["criteria-android-dev.html#evenements-daccessibilite-i-langencustom-viewsi"] = "Événements d’accessibilité &amp; &lt;i lang=\&quot;en\&quot;&gt;custom views&lt;/i&gt;";
index.add({
    url: "criteria-android-dev.html#evenements-daccessibilite-i-langencustom-viewsi",
    title: "Événements d’accessibilité &amp; &lt;i lang=\&quot;en\&quot;&gt;custom views&lt;/i&gt;",    
    body: "## Événements d’accessibilité &amp; &lt;i lang=\&quot;en\&quot;&gt;custom views&lt;/i&gt; "
});

documentTitles["criteria-android-dev.html#descriptionnbsp"] = "Description&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#descriptionnbsp",
    title: "Description&amp;nbsp;:",    
    body: "#### Description&amp;nbsp;: Il existe sous Android un bon nombre d’événements liés à l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité. Vous pouvez manipuler ces événements au même titre que d’autres événements. Ils permettent d’enrichir des composants &lt;i lang=\&quot;en\&quot;&gt;custom&lt;/i&gt; insuffisamment accessibles. L’utilisation des événements d’accessibilité est assez rare dans les applications non dédiées à l’accessibilité, les autres options étant généralement suffisantes. Cependant, il faut savoir qu’ils existent et permettent de surcharger la vocalisation d’un composant.  Pour plus d’informations, nous vous invitons à regarder les liens ci-dessous.  "
});

documentTitles["criteria-android-dev.html#liensnbsp"] = "Liens&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#liensnbsp",
    title: "Liens&amp;nbsp;:",    
    body: "#### Liens&amp;nbsp;:  - [`AccessibilityEvents`](http://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html) - [Construire une vue custom accessible](http://developer.android.com/guide/topics/ui/accessibility/apps.html#custom-views) - [Exemple de squelette d’implémentation des événements](https://github.com/Pascale22/A11yEventApp) en &lt;abbr&gt;Kotlin&lt;/abbr&gt;     "
});

documentTitles["criteria-android-dev.html#i-langenwebviewi"] = "&lt;i lang=\&quot;en\&quot;&gt;WebView&lt;/i&gt;";
index.add({
    url: "criteria-android-dev.html#i-langenwebviewi",
    title: "&lt;i lang=\&quot;en\&quot;&gt;WebView&lt;/i&gt;",    
    body: "## &lt;i lang=\&quot;en\&quot;&gt;WebView&lt;/i&gt; "
});

documentTitles["criteria-android-dev.html#descriptionnbsp"] = "Description&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#descriptionnbsp",
    title: "Description&amp;nbsp;:",    
    body: "#### Description&amp;nbsp;: Les `WebView` ont un traitement un peu particulier sous Android. Pour commencer, si on veut qu’une page soit accessible, il faut que le contenu HTML le soit, à savoir qu’il respecte les normes internationales sur le sujet&amp;nbsp;: les WCAG2. Pour connaître ces règles et apprendre les techniques de développement pour un web accessible, nous vous invitons à visiter la section de notre site consacrée au sujet&amp;nbsp;: [recommandations accessibilité pour le web](../web/index.html).  Côté Android, il faut s’assurer que la &lt;i lang=\&quot;en\&quot;&gt;WebView&lt;/i&gt; autorise le JavaScript&amp;nbsp;: `mWebView.getSettings().setJavaScriptEnabled(true);`   Dans ces conditions, la page affichée à travers la `WebView`  réagit convenablement à l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité.  "
});

documentTitles["criteria-android-dev.html#vocalisation-des-listes"] = "Vocalisation des listes";
index.add({
    url: "criteria-android-dev.html#vocalisation-des-listes",
    title: "Vocalisation des listes",    
    body: "## Vocalisation des listes "
});

documentTitles["criteria-android-dev.html#descriptionnbsp"] = "Description&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#descriptionnbsp",
    title: "Description&amp;nbsp;:",    
    body: "#### Description&amp;nbsp;: Il arrive parfois que les listes soient mal vocalisées&amp;nbsp;: la synthèse vocale tente de vocaliser toute la liste en une seule fois (au moins ce qui est affiché à l’écran dans le cas de listes longues). C’est notamment le cas lorsque l’on utilise des `RecyclerView`. Pour pallier ce problème, une solution simple existe. Il suffit de positionner l’attribut `focusable` à `true` pour chaque item de la liste. Cela a pour effet de forcer la synthèse vocale (&lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;) à lire les items un par un.   "
});

documentTitles["criteria-android-dev.html#navigation-au-focus-clavier"] = "Navigation au focus (clavier)";
index.add({
    url: "criteria-android-dev.html#navigation-au-focus-clavier",
    title: "Navigation au focus (clavier)",    
    body: "## Navigation au focus (clavier) "
});

documentTitles["criteria-android-dev.html#descriptionnbsp"] = "Description&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#descriptionnbsp",
    title: "Description&amp;nbsp;:",    
    body: "#### Description&amp;nbsp;: Pour gérer la navigation au focus, il faut s’assurer de 3 choses&amp;nbsp;: - Permettre le focus sur les éléments interactifs&amp;nbsp;: la navigation au focus ne concerne que les éléments interactifs. Si, par exemple, votre application possède des vues &lt;i lang=\&quot;en\&quot;&gt;custom&lt;/i&gt; cliquables, il faut s’assurer que ces vues soient focusables en positionnant l’attribut `focusable` à `true`. - Gérer l’affichage du focus&amp;nbsp;: tout élément interactif peut recevoir le focus, il faut donc que le `state_focused` soit défini et permette de distinguer d’un seul coup d’œil quel élément a le focus. - Gérer l’ordre du focus&amp;nbsp;: à travers les options `nextFocusDown`, `nextFocusUp`, `nextFocusRight` et `nextFocusLeft`, vous pouvez spécifier quelle vue doit prendre le focus selon l’utilisation des flèches bas, haut, droit et gauche.    La plupart du temps, seuls les point 1 et 2 sont à prendre la compte. En effet, le système Android est capable de déterminer assez précisément les positions des éléments les uns par rapport aux autres et donc de fournir un ordre de lecture au clavier logique et cohérent.  À noter&amp;nbsp;: `nextFocusDown`, `nextFocusUp`, `nextFocusRight`, `nextFocusLeft`, `focusable` ainsi que d’autres options de gestion du focus sont accessibles directement dans le &lt;abbr&gt;xml&lt;/abbr&gt; ou dans le code à travers les méthodes correspondantes.  À noter&amp;nbsp;: Android &lt;i&gt;Pie&lt;/i&gt; (9, &lt;abbr&gt;API&lt;/abbr&gt; 28), introduit un focus spécifique au lecteur d’écran permet d’éviter les effets de bords entre le focus du lecteur d’écran (`screenReaderFocusable`) et le focus clavier (`focusable`). La navigation clavier n’est pas sensible au `screenReaderFocusable`.  "
});

documentTitles["criteria-android-dev.html#exemplenbsp"] = "Exemple&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#exemplenbsp",
    title: "Exemple&amp;nbsp;:",    
    body: "#### Exemple&amp;nbsp;: Exemple de sélecteur qui prend en compte l’état `state_focused` : &lt;pre&gt;&lt;code&gt;&amp;lt;selector xmlns:android=\&quot;http://schemas.android.com/apk/res/android\&quot;&amp;gt; 	&amp;lt;!-- Non focused states --&amp;gt; 	&amp;lt;item android:state_focused=\&quot;false\&quot; android:state_selected=\&quot;false\&quot; android:state_pressed=\&quot;false\&quot; android:drawable=\&quot;@drawable/draw_unselected_selector\&quot; /&amp;gt; 	&amp;lt;item android:state_focused=\&quot;false\&quot; android:state_selected=\&quot;true\&quot;  android:state_pressed=\&quot;false\&quot; android:drawable=\&quot;@drawable/draw_selected_selector\&quot; /&amp;gt; &amp;nbsp; 	&amp;lt;!-- Focused states --&amp;gt; 	&amp;lt;item android:state_focused=\&quot;true\&quot; android:state_selected=\&quot;false\&quot; android:state_pressed=\&quot;false\&quot; android:drawable=\&quot;@drawable/draw_unselected_focused_selector\&quot; /&amp;gt; 	&amp;lt;item android:state_focused=\&quot;true\&quot; android:state_selected=\&quot;true\&quot;  android:state_pressed=\&quot;false\&quot; android:drawable=\&quot;@drawable/draw_selected_focused_selector\&quot; /&amp;gt; &amp;nbsp; 	&amp;lt;!-- Pressed --&amp;gt; 	&amp;lt;!-- Non focused states --&amp;gt; 	&amp;lt;item android:state_focused=\&quot;false\&quot; android:state_selected=\&quot;false\&quot; android:state_pressed=\&quot;true\&quot; android:drawable=\&quot;@drawable/draw_unselected_pressed_selector\&quot; /&amp;gt; 	&amp;lt;item android:state_focused=\&quot;false\&quot; android:state_selected=\&quot;true\&quot;  android:state_pressed=\&quot;true\&quot; android:drawable=\&quot;@drawable/draw_selected_pressed_selector\&quot; /&amp;gt; &amp;nbsp; 	&amp;lt;!-- Focused states --&amp;gt; 	&amp;lt;item android:state_focused=\&quot;true\&quot; android:state_selected=\&quot;false\&quot; android:state_pressed=\&quot;true\&quot; android:drawable=\&quot;@drawable/draw_unselected_pressed_selector\&quot; /&amp;gt; 	&amp;lt;item android:state_focused=\&quot;true\&quot; android:state_selected=\&quot;true\&quot;  android:state_pressed=\&quot;true\&quot; android:drawable=\&quot;@drawable/draw_selected_pressed_selector\&quot; /&amp;gt; &amp;lt;/selector&amp;gt;&lt;/code&gt;&lt;/pre&gt;  "
});

documentTitles["criteria-android-dev.html#liennbsp"] = "Lien&amp;nbsp;:";
index.add({
    url: "criteria-android-dev.html#liennbsp",
    title: "Lien&amp;nbsp;:",    
    body: "#### Lien&amp;nbsp;:  - [Gestion du focus sous Android](http://developer.android.com/guide/topics/ui/accessibility/apps.html#focus-nav)  &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["criteria-ios-dev.html#guide-pour-les-developpeurs-ios"] = "Guide pour les développeurs iOS";
index.add({
    url: "criteria-ios-dev.html#guide-pour-les-developpeurs-ios",
    title: "Guide pour les développeurs iOS",    
    body: "# Guide pour les développeurs iOS  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;iOS\&quot;, \&quot;url\&quot;: \&quot;./criteria-ios.html\&quot;},         {\&quot;label\&quot;:\&quot;Guide pour les développeurs\&quot;} 	]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Critères de conception\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-conception.html\&quot;},          {\&quot;label\&quot;:\&quot;Guide pour les développeurs\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-dev.html\&quot;, \&quot;expanded\&quot;: true},         {\&quot;label\&quot;:\&quot;VoiceOver\&quot;,\&quot;url\&quot;:\&quot;lecteur-ecran-voiceover.html\&quot;},         {\&quot;label\&quot;:\&quot;WWDC\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-wwdc.html\&quot;},         {\&quot;label\&quot;:\&quot;Tests\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-test.html\&quot;}     ]);	 });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-ios\&quot;&gt;&lt;/span&gt;  Ce guide a pour objectif de présenter les différentes notions d’accessibilité en associant&amp;nbsp;: - Des explications détaillées concernant les attributs et méthodes d'accessibilité. - Des exemples de code en **Swift 5.1** et en **Objective C** *(Xcode 11, iOS 13)*. - Des liens vers la [`documentation officielle Apple`](https://developer.apple.com/documentation/uikit/accessibility).  &lt;a name=\&quot;AccessibilityTraits\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-dev.html#nature-des-elements"] = "Nature des éléments";
index.add({
    url: "criteria-ios-dev.html#nature-des-elements",
    title: "Nature des éléments",    
    body: "## Nature des éléments &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#TraitElt-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#TraitElt-Details\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Fonctionnement&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#TraitElt-Example\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Exemple&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#TraitElt-BasicOperations\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Operations&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#TraitElt-Links\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Lien&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;TraitElt-Description\&quot;      role=\&quot;tabpanel\&quot;&gt; L’attribut `accessibilityTraits` permet de donner une information à l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité sur la nature d’un composant. &lt;/br&gt;De ce fait, l’`accessibilityTrait` joue également sur la vocalisation de l’élément car cette nature est restituée par &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;.    &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;TraitElt-Details\&quot; role=\&quot;tabpanel\&quot; &gt; L'`accessibilityTrait` est disponible via l’&lt;i lang=\&quot;en\&quot;&gt;interface builder&lt;/i&gt; de Xcode mais également utilisable directement via le code.   &lt;/br&gt;Il existe beaucoup de traits dont les principaux sont fournis ci-dessous&amp;nbsp;:   - **accessibilityTraitNone**&amp;nbsp;: supprime toute valeur sémantique à l’élément. - **accessibilityTraitButton**&amp;nbsp;: ajoute le trait «&amp;nbsp;bouton&amp;nbsp;», l’élément est vu comme un bouton par &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;. - **accessibilityTraitLink**&amp;nbsp;: utile pour définir un label en tant que «&amp;nbsp;lien&amp;nbsp;». - **accessibilityTraitHeader**&amp;nbsp;: permet de définir un élément comme un en-tête (voir la section &lt;a href=\&quot;criteria-ios-conception.html#titre-et-en-t-te\&quot;&gt;«&amp;nbsp;titre et en-tête&amp;nbsp;»&lt;/a&gt;). - **accessibilityTraitAdjustable**&amp;nbsp;: permet de définir un élément comme un élément «&amp;nbsp;ajustable&amp;nbsp;», c’est-à-dire un élément dont la valeur instantanée peut être modifiée via un [geste spécifique](./lecteur-ecran-voiceover.html) de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;.  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;TraitElt-Example\&quot; role=\&quot;tabpanel\&quot; &gt; &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; - (void)customTraits() {     //Spécification d'un UIPageControl avec le trait ’ajustable’.     pageControl.accessibilityTraits = UIAccessibilityTraitAdjustable;          //Ajout d'un en-tête.       defaultHeaderViewCell.accessibilityTraits = UIAccessibilityTraitHeader; } &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt; func customTraits() {     //Spécification d'un UIPageControl avec le trait ’ajustable’.     pageControl.accessibilityTraits = .adjustable          //Ajout d'un en-tête.      defaultHeaderViewCell.accessibilityTraits = .header } &lt;/code&gt;&lt;/pre&gt;  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;TraitElt-BasicOperations\&quot; role=\&quot;tabpanel\&quot; &gt; L'attribut `accessibilityTrait` est en réalité un `bitmask` pour lequel chaque élément pris individuellement peut prendre une valeur spécifique. &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 600px; height: auto; \&quot; src=\&quot;./images/iOSdev/Traits.png\&quot; /&gt; &lt;/br&gt;Il est donc possible d'ajouter et d'enlever plusieurs `traits` présents pour caractériser un élement après avoir vérifié leur existence par exemple.  &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; - (void)changeTraits {      //Création d'un jeu de traits qui efface le contenu précédent du bitmask.     onePageButton.accessibilityTraits = UIAccessibilityTraitButton | UIAccessibilityTraitLink;          //Ajouts de traits au contenu existant du bitmask.     pageControl.accessibilityTraits |= UIAccessibilityTraitHeader; //Only one trait.     pageControl.accessibilityTraits |= UIAccessibilityTraitButton + UIAccessibilityTraitLink; //Many traits.          //Suppression d'un trait.     onePageButton.accessibilityTraits &amp;= ~UIAccessibilityTraitLink;          //Vérification de l'existence d'un trait au sein du bitmask.     if ((pageControl.accessibilityTraits &amp; UIAccessibilityTraitHeader) != 0) {         // Tâches à réaliser si le trait '.header' est présent...     } } &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt; func changeTraits() {              //Création d'un jeu de traits qui efface le contenu précédent du bitmask.     onePageButton.accessibilityTraits = [.button, .link]              //Ajouts de traits au contenu existant du bitmask.     pageControl.accessibilityTraits.insert(.header) //Only one trait.     pageControl.accessibilityTraits.formUnion([.button, .link]) //Many traits.              //Suppression d'un trait.     onePageButton.accessibilityTraits.remove(.link)              //Vérification de l'existence d'un trait au sein du bitmask.     if (pageControl.accessibilityTraits.rawValue &amp; UIAccessibilityTraits.header.rawValue == UIAccessibilityTraits.header.rawValue) {         // Tâches à réaliser si le trait '.header' est présent...     } } &lt;/code&gt;&lt;/pre&gt;  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;TraitElt-Links\&quot; role=\&quot;tabpanel\&quot; &gt; - [`accessibilityTraits`](https://developer.apple.com/documentation/objectivec/nsobject/1615202-accessibilitytraits) &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios-dev.html#alternatives-textuelles"] = "Alternatives textuelles";
index.add({
    url: "criteria-ios-dev.html#alternatives-textuelles",
    title: "Alternatives textuelles",    
    body: "## Alternatives textuelles &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#textAlt-Details\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Fonctionnement&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#textAlt-Example\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Exemple&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#textAlt-Links\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Liens&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;textAlt-Details\&quot;      role=\&quot;tabpanel\&quot;&gt; Sous iOS, la vocalisation d’un élément s’effectue à travers 4 attributs&amp;nbsp;: `label`, `hint`, `value` et `trait`.   L’ordre de vocalisation est toujours le même (`label`, `value`, `trait` et `hint`), il ne peut pas être changé et la vocalisation est réalisée en une seule fois à l’arrivée sur l’élément. &lt;/br&gt;&lt;/br&gt;Une section de ce guide étant dédiée au &lt;a href=\&quot;#AccessibilityTraits\&quot; style=\&quot;text-decoration: underline;\&quot;&gt;trait&lt;/a&gt;, nous décrivons ici les 3 autres attributs&amp;nbsp;:   - **accessibilityLabel**&amp;nbsp;: le label permet de préciser le titre spécifique à l’accessibilité qui est lu par &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; en lieu et place du texte du composant si celui-ci en possède un, ce qui permet d’avoir un texte de composant plus explicite que celui affiché à l’écran. &lt;/br&gt;Par exemple, dans le cas d’un bouton dont le titre est « OK », on peut indiquer que le bouton sert à valider un choix. - **accessibilityValue**&amp;nbsp;: la valeur d’un élément est, par défaut, le pourcentage de progression. &lt;/br&gt;À noter que, pour la plupart des éléments ajustables disponibles dans le &lt;abbr&gt;SDK&lt;/abbr&gt;, cette `value` n’a pas besoin d’être précisée car le système restitue automatiquement la valeur à l’utilisateur via &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;. - **accessibilityHint**&amp;nbsp;: le `hint` permet de décrire le comportement du composant en incorporant des explications supplémentaires. &lt;/br&gt;Exemple&amp;nbsp;: «&amp;nbsp;cliquez pour obtenir le résultat&amp;nbsp;».    Ces attributs sont disponibles via l’&lt;i lang=\&quot;en\&quot;&gt;interface builder&lt;/i&gt; de Xcode mais également accessibles en programmation. &lt;/br&gt;Tout élément dérivant de `UIView` possède ces attributs qui acceptent une chaîne de caractère les rendant ainsi internationalisables.  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;textAlt-Example\&quot; role=\&quot;tabpanel\&quot; &gt;  &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; @interface ChangeTextView() {          __weak IBOutlet UILabel * monLabel;     __weak IBOutlet UIProgressView * maProgressView; } @end  @implementation ChangeTextView  - (void)viewDidAppear:(BOOL)animated {     [super viewDidAppear:animated];          monLabel.accessibilityLabel = @\&quot;bonjour\&quot;;     monLabel.accessibilityHint = @\&quot;Ceci est un commentaire supplémentaire.\&quot;;          maProgressView.accessibilityValue = @\&quot;45 pour cent\&quot;; } @end &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt; class ChangeTextView: UIViewController {      @IBOutlet weak var monLabel: UILabel!     @IBOutlet weak var maProgressView: UIProgressView!          override func viewDidAppear(_ animated: Bool) {         super.viewDidAppear(animated)                  monLabel.accessibilityLabel = \&quot;bonjour\&quot;         monLabel.accessibilityHint = \&quot;Ceci est un commentaire supplémentaire.\&quot;                  maProgressView.accessibilityValue = \&quot;45 pour cent\&quot;              } } &lt;/code&gt;&lt;/pre&gt;  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;textAlt-Links\&quot; role=\&quot;tabpanel\&quot; &gt;  - [`accessibilityLabel`](https://developer.apple.com/documentation/objectivec/nsobject/1615181-accessibilitylabel) - [`accessibilityValue`](https://developer.apple.com/documentation/objectivec/nsobject/1615117-accessibilityvalue) - [`accessibilityHint`](https://developer.apple.com/documentation/objectivec/nsobject/1615093-accessibilityhint) - [La bonne rédaction des labels](./criteria-ios-wwdc-19000.html#WritingGreatAccessibilityLabels) &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios-dev.html#date-heure-et-nombres"] = "Date, heure et nombres";
index.add({
    url: "criteria-ios-dev.html#date-heure-et-nombres",
    title: "Date, heure et nombres",    
    body: "## Date, heure et nombres &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#format-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#format-DateTime\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Date &amp; Heure&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#format-Numbers\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Nombre&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#format-PhoneNumbers\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Numéro de téléphone&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;format-Description\&quot;      role=\&quot;tabpanel\&quot;&gt; La lecture des date, heure et nombres n'est pas compliquée mais peut très vite devenir un réel casse-tête avec &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;&amp;nbsp;.  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;format-DateTime\&quot; role=\&quot;tabpanel\&quot; &gt; Si on met directement sous forme de texte la date ou l'heure dans le `label`, on s'aperçoit rapidement que le rendu n'est pas naturel à l'écoute. &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 800px; height: auto; \&quot; src=\&quot;./images/iOSdev/DateHeureNombres_10.png\&quot; /&gt; &lt;/br&gt;Il faut absolument formater les données en entrée pour obtenir une vocalisation descriptive naturelle et compréhensible. &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 800px; height: auto; \&quot; src=\&quot;./images/iOSdev/DateHeureNombres_4.png\&quot; /&gt; &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt;     NSDateFormatter * dateFormatter = [[NSDateFormatter alloc]init];     [dateFormatter setDateFormat:@\&quot;dd/MM/yyyy HH:mm\&quot;];          NSDate * date = [dateFormatter dateFromString:@\&quot;01/04/2015 05:30\&quot;];          dateLabel.text = [NSDateFormatter localizedStringFromDate:date                                                     dateStyle:NSDateFormatterShortStyle                                                     timeStyle:NSDateFormatterNoStyle];          dateLabel.accessibilityLabel = [NSDateFormatter localizedStringFromDate:date                                                                   dateStyle:NSDateFormatterMediumStyle                                                                   timeStyle:NSDateFormatterNoStyle];           hourLabel.text = [NSDateFormatter localizedStringFromDate:date                                                     dateStyle:NSDateFormatterNoStyle                                                     timeStyle:NSDateFormatterShortStyle];          NSDateComponents * hourComponents = [[NSCalendar currentCalendar] components:NSCalendarUnitHour | NSCalendarUnitMinute                                                                         fromDate:date];                                                                              hourLabel.accessibilityLabel = [NSDateComponentsFormatter localizedStringFromDateComponents:hourComponents                                                                                      unitsStyle:NSDateComponentsFormatterUnitsStyleSpellOut]; &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;     let dateFormatter = DateFormatter()     dateFormatter.dateFormat = \&quot;dd/MM/yyyy HH:mm\&quot;              let date = dateFormatter.date(from: \&quot;01/04/2015 05:30\&quot;)              dateLabel.text = DateFormatter.localizedString(from: date!,                                                    dateStyle: .short,                                                    timeStyle: .none)                                                             dateLabel.accessibilityLabel = DateFormatter.localizedString(from: date!,                                                                  dateStyle: .medium,                                                                  timeStyle: .none)                       hourLabel.text = DateFormatter.localizedString(from: date!,                                                    dateStyle: .none,                                                    timeStyle: .short)              let hourComponents = Calendar.current.dateComponents([.hour, .minute],                                                          from: date!)     hourLabel.accessibilityLabel = DateComponentsFormatter.localizedString(from: hourComponents,                                                                            unitsStyle: .spellOut) &lt;/code&gt;&lt;/pre&gt;  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;format-Numbers\&quot; role=\&quot;tabpanel\&quot; &gt; En indiquant la valeur d'un nombre directement dans le texte d'un `label`, la vocalisation se fera sur chacun des chiffres présentés rendant la véritable valeur du nombre difficile à deviner. &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 500px; height: auto; \&quot; src=\&quot;./images/iOSdev/DateHeureNombres_8.png\&quot; /&gt; &lt;/br&gt;Comme pour les date et heure, il faut formater la donnée en entrée pour qu'elle puisse être analysée et vocalisée selon la véritable valeur du nombre qu'elle représente. &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 700px; height: auto; \&quot; src=\&quot;./images/iOSdev/DateHeureNombres_5.png\&quot; /&gt; &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt;     NSNumber * numberValue = @54038921.7;          NSNumberFormatter * numberFormatter = [[NSNumberFormatter alloc]init];     numberFormatter.numberStyle = NSNumberFormatterDecimalStyle;          numberLabel.text = [numberFormatter stringFromNumber:numberValue];          numberLabel.accessibilityLabel = [NSNumberFormatter localizedStringFromNumber:numberValue                                                                       numberStyle:NSNumberFormatterSpellOutStyle]; &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;     let numberValue = NSNumber(value: 54038921.7)              numberLabel.text = NumberFormatter.localizedString(from: numberValue,                                                        number: .decimal)                                                                 numberLabel.accessibilityLabel = NumberFormatter.localizedString(from: numberValue,                                                                      number: .spellOut) &lt;/code&gt;&lt;/pre&gt;  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;format-PhoneNumbers\&quot; role=\&quot;tabpanel\&quot; &gt; La problématique liée à la vocalisation d'un numéro de téléphone est identique à celle des nombres puisqu'elle s'appuie entièrement sur le formatage à appliquer avec une prise en compte particulière des chiffres \&quot;0\&quot;. &lt;/br&gt;L'exemple donné ci-dessous concerne la numérotation française avec une logique qui peut se décliner à n'importe quel type de format de numérotation. &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 550px; height: auto; \&quot; src=\&quot;./images/iOSdev/DateHeureNombres_11.png\&quot; /&gt; &lt;/br&gt;L'idée est de séparer chaque paire de chiffres par une virgule qui va fournir la ponctuation vocale. &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 550px; height: auto; \&quot; src=\&quot;./images/iOSdev/DateHeureNombres_6.png\&quot; /&gt; &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt;     NSString * phoneNumberValue = @\&quot;06.11.22.33.06\&quot;;     NSArray * phoneNumberElts = [phoneNumberValue componentsSeparatedByString:@\&quot;.\&quot;];          NSNumberFormatter * nbFormatter = [[NSNumberFormatter alloc]init];     nbFormatter.numberStyle = NSNumberFormatterSpellOutStyle;          NSMutableString * spelledOutString = [[NSMutableString alloc]init];          [phoneNumberElts enumerateObjectsUsingBlock:^(id  _Nonnull obj,                                                   NSUInteger idx,                                                   BOOL * _Nonnull stop) {         NSString * elt = (NSString *)obj;                  if (idx != 0) {             [spelledOutString appendString:@\&quot;,\&quot;];         }                  if ([elt hasPrefix:@\&quot;0\&quot;]) {                          NSString * firstFigure = [nbFormatter stringFromNumber:@([[elt substringToIndex:1] integerValue])];             NSString * secondFigure = [nbFormatter stringFromNumber:@([[elt substringFromIndex:1] integerValue])];                          [spelledOutString appendString:firstFigure];             [spelledOutString appendString:secondFigure];                      } else {             [spelledOutString appendString:[nbFormatter stringFromNumber:@([elt integerValue])]];         }     }];          phoneNumberLabel.text = phoneNumberValue;     phoneNumberLabel.accessibilityLabel = spelledOutString; &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;         let phoneNumberValue = \&quot;06.11.22.33.06\&quot;         let phoneNumberElts = phoneNumberValue.components(separatedBy: \&quot;.\&quot;)                  let nbFormatter = NumberFormatter()         nbFormatter.numberStyle = .spellOut                  var spelledOutString = String()                  for (index, elt) in phoneNumberElts.enumerated() {                          if (index != 0) {                 spelledOutString.append(\&quot;,\&quot;)             }                          if (elt.hasPrefix(\&quot;0\&quot;)) {                                  let firstFigureValue = Int(String(elt[elt.startIndex]))!                 let firstFigure = nbFormatter.string(from: NSNumber(value:firstFigureValue))                 spelledOutString.append(firstFigure!)                                  let secondFigureValue = Int(String(elt[elt.index(elt.startIndex, offsetBy: 1)]))!                 let secondFigure = nbFormatter.string(from: NSNumber(value:secondFigureValue))                 spelledOutString.append(secondFigure!)                              } else {                                  let figure = nbFormatter.string(from: NSNumber(value:Int(elt)!))                 spelledOutString.append(figure!)             }         }          phoneNumberLabel.text = phoneNumberValue         phoneNumberLabel.accessibilityLabel = spelledOutString &lt;/code&gt;&lt;/pre&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios-dev.html#declencher-une-vocalisation"] = "Déclencher une vocalisation";
index.add({
    url: "criteria-ios-dev.html#declencher-une-vocalisation",
    title: "Déclencher une vocalisation",    
    body: "## Déclencher une vocalisation &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#triggerVocal-Details\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Fonctionnement&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#triggerVocal-Example\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Exemple&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#triggerVocal-Links\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Liens&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;triggerVocal-Details\&quot;      role=\&quot;tabpanel\&quot;&gt; Pour déclencher une vocalisation qui se fera dans la langue du système, il faut envoyer une notification à l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité via la méthode **UIAccessibilityPostNotification** avec en paramètres la notification permettant de déclencher une vocalisation **UIAccessibilityAnnouncementNotification** et la chaîne de caractères à vocaliser.  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;triggerVocal-Example\&quot; role=\&quot;tabpanel\&quot; &gt; &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; UIAccessibilityPostNotification(UIAccessibilityAnnouncementNotification,                                  @\&quot;Message pour la vocalisation.\&quot;); &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt; UIAccessibility.post(notification: .announcement,                      argument: \&quot;Message pour la vocalisation.\&quot;) &lt;/code&gt;&lt;/pre&gt;  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;triggerVocal-Links\&quot; role=\&quot;tabpanel\&quot; &gt; - [`UIAccessibilityPostNotification`](https://developer.apple.com/documentation/uikit/1615194-uiaccessibilitypostnotification) - [`UIAccessibilityAnnouncementNotification`](https://developer.apple.com/documentation/uikit/uiaccessibilityannouncementnotification) &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios-dev.html#modifier-la-langue-de-vocalisation"] = "Modifier la langue de vocalisation";
index.add({
    url: "criteria-ios-dev.html#modifier-la-langue-de-vocalisation",
    title: "Modifier la langue de vocalisation",    
    body: "## Modifier la langue de vocalisation &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#changeLang-Details\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Fonctionnement&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#changeLang-Example\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Exemple&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#changeLang-Links\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Lien&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;changeLang-Details\&quot;      role=\&quot;tabpanel\&quot;&gt; Afin de modifier la langue de prononciation de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; pour un mot ou un texte, il existe l’attribut **accessibilityLanguage**&amp;nbsp;. &lt;/br&gt;Disponible via le protocole `UIAccessibility`, cet attribut permet de redéfinir la langue de prononciation d’un texte.  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;changeLang-Example\&quot; role=\&quot;tabpanel\&quot; &gt; Si on utilise l'attribut `accessibilityLanguage` sur un `UILabel`, alors celui-ci sera vocalisé par &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; dans la nouvelle langue donnée en valeur de l’attribut.&lt;/br&gt;  &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; - (IBAction)tapHere:(UIButton *)sender {          myLabel.accessibilityLanguage = @\&quot;en\&quot;;     myLabel.accessibilityLabel = @\&quot;This is a new label. Thank you.\&quot;;     UIAccessibilityPostNotification(UIAccessibilityLayoutChangedNotification, myLabel); } &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt; @IBAction func tapHere(_ sender: UIButton) {              myLabel.accessibilityLanguage = \&quot;en\&quot;     myLabel.accessibilityLabel = \&quot;This is a new label. Thank you.\&quot;     UIAccessibility.post(notification: UIAccessibility.Notification.layoutChanged,                          argument: myLabel) } &lt;/code&gt;&lt;/pre&gt;  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;changeLang-Links\&quot; role=\&quot;tabpanel\&quot; &gt;   - [`accessibilityLanguage`](https://developer.apple.com/documentation/objectivec/nsobject/1615192-accessibilitylanguage) &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios-dev.html#informer-dune-modification-sur-la-page"] = "Informer d’une modification sur la page";
index.add({
    url: "criteria-ios-dev.html#informer-dune-modification-sur-la-page",
    title: "Informer d’une modification sur la page",    
    body: "## Informer d’une modification sur la page &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#changeNotif-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#changeNotif-Details\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Fonctionnement&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#changeNotif-Example\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Exemple&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#changeNotif-Links\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Liens&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;changeNotif-Description\&quot;      role=\&quot;tabpanel\&quot;&gt; Lors d’un changement de contenu sur une page, il est primordial de notifier l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité de ce changement à travers différentes notifications. &lt;/br&gt;Pour ce faire, il faut envoyer une notification de modification à l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité via la méthode **UIAccessibilityPostNotification**.    &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;changeNotif-Details\&quot; role=\&quot;tabpanel\&quot; &gt; Il existe plusieurs notifications de modification, mais les deux plus utiles sont : - **UIAccessibilityLayoutChangedNotification**&amp;nbsp;: permet de spécifier à l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité qu’une partie de la page a été modifiée et doit être accompagné d'un `NSString` ou d'un `UIObject`. &lt;/br&gt;Avec un `NSString`, la notification se comporte comme une **UIAccessibilityAnnouncementNotification** et lance une vocalisation &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;. &lt;/br&gt;Avec un `UIObject`, le focus est repositionné sur l’élément précisé. &lt;/br&gt;Cette notification est très similaire à **UIAccessibilityAnnouncementNotification** mais son utilisation doit être mise en avant dès lors qu'une modification dynamique du contenu se produit. - **UIAccessibilityScreenChangedNotification**&amp;nbsp;: permet d’annoncer un changement global de la page et accepte soit `nil`, soit l’élément qui doit recevoir le focus. &lt;/br&gt;Avec `nil`, la notification vocalise et sélectionne le premier élément accessible de la page. &lt;/br&gt;Avec un `UIObject`, le focus est repositionné sur l’élément précisé en lançant une vocalisation &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;. &lt;/br&gt;Le son utilisé pour notifier la modification est similaire à l'arrivée d'une nouvelle page.  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;changeNotif-Example\&quot; role=\&quot;tabpanel\&quot; &gt; &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; //L'élément 'myLabel' est sélectionné et vocalisé avec sa nouvelle valeur. - (IBAction)tapHere:(UIButton *)sender {          myLabel.accessibilityLabel = @\&quot;Ceci est un nouveau label.\&quot;;     UIAccessibilityPostNotification(UIAccessibilityLayoutChangedNotification, myLabel); }  //Le premier élément accessible de la page est sélectioné et vocalisé avec un son spécifique. - (IBAction)clic:(UIButton *)sender {          UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, nil); } &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt; //L'élément 'myLabel' est sélectionné et vocalisé avec sa nouvelle valeur. @IBAction func tapHere(_ sender: UIButton) {              myLabel.accessibilityLabel = \&quot;Ceci est un nouveau label.\&quot;     UIAccessibility.post(notification: UIAccessibility.Notification.layoutChanged,                          argument: myLabel) }      //Le premier élément accessible de la page est sélectioné et vocalisé avec un son spécifique. @IBAction func clic(_ sender: UIButton) {              UIAccessibility.post(notification: UIAccessibility.Notification.screenChanged,                          argument: nil) } &lt;/code&gt;&lt;/pre&gt;  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;changeNotif-Links\&quot; role=\&quot;tabpanel\&quot; &gt; - [`UIAccessibilityPostNotification`](https://developer.apple.com/documentation/uikit/1615194-uiaccessibilitypostnotification) - [`UIAccessibilityLayoutChangedNotification`](https://developer.apple.com/documentation/uikit/uiaccessibilitylayoutchangednotification) - [`UIAccessibilityScreenChangedNotification`](https://developer.apple.com/documentation/uikit/uiaccessibilityscreenchangednotification) - [`UIAccessibilityPageScrolledNotification`](https://developer.apple.com/documentation/uikit/uiaccessibilitypagescrollednotification) &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;MaskElements\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-dev.html#masquer-des-elements"] = "Masquer des éléments";
index.add({
    url: "criteria-ios-dev.html#masquer-des-elements",
    title: "Masquer des éléments",    
    body: "## Masquer des éléments   &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#hideElts-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#hideElts-Details\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Fonctionnement&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#hideElts-Example\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Exemple&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#hideElts-Links\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Liens&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;hideElts-Description\&quot;      role=\&quot;tabpanel\&quot;&gt; Il est possible de masquer des éléments aux outils d’accessibilité grâce aux attributs d’accessibilité mais aussi de forcer certains éléments à être visibles pour les outils d’accessibilité uniquement.    &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;hideElts-Details\&quot; role=\&quot;tabpanel\&quot; &gt; - **isAccessibilityElement**&amp;nbsp;: booléen qui permet d’indiquer qu’un élément est visible ou non de l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité (de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; ou autre). - **accessibilityElementsHidden**&amp;nbsp;: booléen qui permet d’indiquer que les éléments fils de l’élément cible sont visibles ou non de l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité. - **accessibilityViewIsModal**&amp;nbsp;: booléen qui permet de rendre visible ou non les éléments frères de l’élément cible à l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité. &lt;/br&gt;Une [explication théorique](./criteria-ios-wwdc-18230.html#accessibilityViewIsModal) et une [application pratique](./criteria-ios-wwdc-18230.html#DemoModalView) de cette propriété sont fournies par une vidéo détaillée dans la partie WWDC de ce site.  L’attribut `accessibilityElement` est disponible via l’&lt;i lang=\&quot;en\&quot;&gt;interface builder&lt;/i&gt; de Xcode mais est également utilisable directement via le code. &lt;/br&gt;Les deux autres attributs sont utilisables uniquement via le code.  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;hideElts-Example\&quot; role=\&quot;tabpanel\&quot; &gt; L'idée est de créer un carré rouge qui va contenir 2 autres carrés (bleu et jaune) pour appliquer les attributs définis dans l'onglet `Fonctionnement`. &lt;img alt=\&quot;\&quot; style=\&quot;max-width: 500px; height: auto; \&quot; src=\&quot;./images/iOSdev/MasquerDesElements_1.png\&quot; /&gt; &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; - (void)viewDidAppear:(BOOL)animated {     [super viewDidAppear:animated];          //Création d'un élément père dans lequel 2 autres éléments fils vont être insérés.     CGRect redParentViewRect = CGRectMake(100.0, 100.0, 40.0, 40.0);     UIView * myRedParentView = [[UIView alloc]initWithFrame:redParentViewRect];     myRedParentView.backgroundColor = [UIColor redColor];          [self.view addSubview:myRedParentView];          //L'élément père ne doit pas être accessible pour servir de conteneur à ses enfants.     //Si la valeur est à 'YES', seul cet élément sera accessible sans ses enfants.     myRedParentView.isAccessibilityElement = NO;          //Indication du conteneur que ses enfants peuvent ne pas être accessibles même s'ils sont définis comme tels.     //Si cette valeur est à 'NO' et la précédente à 'NO', seuls ces élements seront accessibles.     myRedParentView.accessibilityElementsHidden = NO;          [self createViewWithColor:[UIColor yellowColor]                         inside:myRedParentView];     [self createViewWithColor:[UIColor blueColor]                         inside:myRedParentView]; }  - (void)createViewWithColor:(UIColor*)color                      inside:(UIView*)parentView {          float delta = (color == [UIColor yellowColor]) ? 0.0 : 20.0;          CGRect rect = CGRectMake(10.0 + delta, 10.0 + delta, 10.0, 10.0);     UIView * theView = [[UIView alloc]initWithFrame:rect];     theView.backgroundColor = color;          [parentView addSubview:theView];          theView.isAccessibilityElement = YES; } &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt; override func viewDidAppear(_ animated: Bool) {         super.viewDidAppear(animated)                  //Création d'un élément père dans lequel 2 autres éléments fils vont être insérés.         let redParentViewRect = CGRect.init(x: 100.0,                                             y: 100.0,                                             width: 40.0,                                             height: 40.0)         let myRedParentView = UIView.init(frame: redParentViewRect)         myRedParentView.backgroundColor = .red                  self.view.addSubview(myRedParentView)                  //L'élément père ne doit pas être accessible pour servir de conteneur à ses enfants.         //Si la valeur est à 'true', seul cet élément sera accessible sans ses enfants.         myRedParentView.isAccessibilityElement = false                  //Indication du conteneur que ses enfants peuvent ne pas être accessibles même s'ils sont définis comme tels.         //Si cette valeur est à 'false' et la précédente à 'false', seuls ces élements seront accessibles.         myRedParentView.accessibilityElementsHidden = false                  self.createViewWithColor(.yellow, inside: myRedParentView)         self.createViewWithColor(.blue, inside: myRedParentView)     }          func createViewWithColor(_ color:UIColor, inside parentView:UIView) {                  let delta:CGFloat = ((color == .yellow) ? 0.0 : 20.0)         let rect = CGRect.init(x: 10.0 + delta,                                y: 10.0 + delta,                                width: 10.0,                                height: 10.0)                  let theView = UIView.init(frame: rect)         theView.backgroundColor = color                  parentView.addSubview(theView)                  theView.isAccessibilityElement = true     } &lt;/code&gt;&lt;/pre&gt;  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;hideElts-Links\&quot; role=\&quot;tabpanel\&quot; &gt;   - [`isAccessibilityElement`](https://developer.apple.com/documentation/objectivec/nsobject/1615141-isaccessibilityelement) - [`accessibilityElementsHidden`](https://developer.apple.com/documentation/objectivec/nsobject/1615080-accessibilityelementshidden) - [`accessibilityViewIsModal`](https://developer.apple.com/documentation/objectivec/nsobject/1615089-accessibilityviewismodal) &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios-dev.html#grouper-des-elements"] = "Grouper des éléments";
index.add({
    url: "criteria-ios-dev.html#grouper-des-elements",
    title: "Grouper des éléments",    
    body: "## Grouper des éléments &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#groupElts-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#groupElts-Example1\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Exemple 1&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#groupElts-Example2\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Exemple 2&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#groupElts-Links\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Liens&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;groupElts-Description\&quot;      role=\&quot;tabpanel\&quot;&gt; On peut envisager de grouper des éléments pour vocaliser en une seule fois l'ensemble formé et associer au groupe ainsi créé une action dédiée par exemple. &lt;/br&gt;Dès lors, les éléments encapsulés ne doivent plus être considérés comme accessibles car seul leur conteneur doit être perçu comme tel.  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;groupElts-Example1\&quot; role=\&quot;tabpanel\&quot; &gt; Nous avons un 'label' et un 'switch control' que nous souhaitons regrouper et traiter d'un seul bloc. &lt;/br&gt;Dans ce cas, on va créer une vue qui va englober les éléments impactés puis implémenter une action qui va indiquer l'action à réaliser en cas d'activation de la zone par l'utilisateur.&lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 700px; height: auto; \&quot; src=\&quot;./images/iOSdev/GrouperDesElements_1.png\&quot; /&gt; &lt;/br&gt;Création de l'élément accessible qui va regrouper les éléments souhaités : &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; #import \&quot;MyViewController.h\&quot; #import \&quot;MyWrapView.h\&quot;  @interface MyViewController ()  @property (weak, nonatomic) IBOutlet UILabel * myLabel; @property (weak, nonatomic) IBOutlet UISwitch * mySwitch;  @end   @implementation MyViewController  - (void)viewDidAppear:(BOOL)animated {     [super viewDidAppear:animated];          //Création de la vue qui va encapsuler le 'label' et le 'Switch Control'.     MyWrapView * wrap = [[MyWrapView alloc] initWith:_myLabel                                                  and:_mySwitch];          [self.view addSubview:wrap]; } @end &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;     class MyViewController: UIViewController {      @IBOutlet weak var myLabel: UILabel!     @IBOutlet weak var mySwitch: UISwitch!               override func viewDidAppear(_ animated: Bool) {         super.viewDidAppear(animated)                  //Création de la vue qui va encapsuler le 'label' et le 'Switch Control'.         let wrap = MyWrapView.init(with: myLabel,                                    and: mySwitch)                  self.view.addSubview(wrap)     } } &lt;/code&gt;&lt;/pre&gt;  &lt;/br&gt;... et implémentation de la classe utilisée pour définir de façon précise l'&lt;a href=\&quot;http://a11y-guidelines.orange.com/mobile/criteria-ios-wwdc-17215.html#DefaultActivation\&quot;&gt;action à associer au double tap d'activation&lt;/a&gt; : &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; @implementation MyWrapView  //Index utilisés pour repérer les éléments accessibles dans la vue de regroupement. int indexLabel = 0; int indexSwitch = 1;   - (instancetype)initWith:(UILabel *)label and:(UISwitch *)aSwitch {          CGRect viewFrame = CGRectUnion(label.frame, aSwitch.frame);     MyWrapView * wrapView = [[MyWrapView alloc]initWithFrame:viewFrame];          wrapView.accessibilityElements = @[label, aSwitch];          NSString * switchValue = (aSwitch.isOn) ? @\&quot;activé\&quot; : @\&quot;désactivé\&quot;;          wrapView.isAccessibilityElement = YES;     wrapView.accessibilityLabel = [NSString stringWithFormat:@\&quot;le contrôle est %@\&quot;, switchValue.description];     wrapView.accessibilityHint = @\&quot;tapez deux fois pour changer sa valeur\&quot;;          return wrapView; }   //Fonction appelée par le système quand un double tap est réalisé sur l'élément sélectionné pour l'activer. - (BOOL)accessibilityActivate {          UISwitch * theSwitch = self.accessibilityElements[indexSwitch];     [theSwitch setOn:!(theSwitch.isOn)];          NSString * switchValue = (theSwitch.isOn) ? @\&quot;activé\&quot; : @\&quot;désactivé\&quot;;          self.accessibilityLabel = [NSString stringWithFormat:@\&quot;le contrôle est %@\&quot;, switchValue.description];     return YES; } @end &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;     class MyWrapView: UIView {          //Index utilisés pour repérer les éléments accessibles dans la vue de regroupement.     let indexLabel = 0     let indexSwitch = 1               override init(frame: CGRect) {         super.init(frame: frame)     }               required init?(coder aDecoder: NSCoder) {         super.init(coder: aDecoder)     }               convenience init(with label: UILabel,and aSwitch: UISwitch) {                  let viewFrame = label.frame.union(aSwitch.frame)         self.init(frame: viewFrame)                  self.accessibilityElements = [label, aSwitch]                  let switchValue = (aSwitch.isOn) ? \&quot;activé\&quot; : \&quot;désactivé\&quot;                  self.isAccessibilityElement = true         self.accessibilityLabel = \&quot;le contrôle est \&quot; + switchValue.description         self.accessibilityHint = \&quot;tapez deux fois pour changer sa valeur.\&quot;     }               //Fonction appelée par le système quand un double tap est réalisé sur l'élément sélectionné pour l'activer.     override func accessibilityActivate() -&gt; Bool {                  let theSwitch = self.accessibilityElements?[indexSwitch] as? UISwitch         theSwitch?.setOn(!((theSwitch?.isOn)!), animated: false)                  let switchValue = (theSwitch?.isOn)! ? \&quot;activé\&quot; : \&quot;désactivé\&quot;                  self.accessibilityLabel = \&quot;le contrôle est\&quot; + switchValue.description                  return true     } } &lt;/code&gt;&lt;/pre&gt;  &lt;/div&gt; &lt;a name=\&quot;ActivationPointExemple\&quot;&gt;&lt;/a&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;groupElts-Example2\&quot; role=\&quot;tabpanel\&quot; &gt; Nous avons un 'label', un 'switch control' et un bouton que nous souhaitons regrouper en un seul bloc dont l'activation changera automatiquement l'état du 'switch control' sans avoir à définir une action comme précédemment. &lt;/br&gt;&lt;/br&gt;L'idée la plus simple consisterait à placer le 'switch control' au milieu de la nouvelle `frame` créée de façon à avoir son [accessibilityActivationPoint](#AccessibilityActivationPoint) directement dessus. &lt;/br&gt;&lt;/br&gt;Cela n'étant malheureusement pas toujours possible, il va donc falloir créer un élément accessible qui regroupera tous les objets impactés puis définir son **accessibilityActivationPoint** sur le 'switch control'. &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 350px; height: auto; \&quot; src=\&quot;./images/iOSdev/GrouperDesElements_2.png\&quot; /&gt; &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; @interface ActivationPointViewController ()      @property (weak, nonatomic) IBOutlet UIButton * myButton; @property (weak, nonatomic) IBOutlet UILabel * myLabel; @property (weak, nonatomic) IBOutlet UISwitch * mySwitch;      @end   @implementation ActivationPointViewController      UIAccessibilityElement * elt;  - (void)viewDidAppear:(BOOL)animated {     [super viewDidAppear:animated];          [_mySwitch addTarget:self                   action:@selector(configChanged:)         forControlEvents:UIControlEventValueChanged];          elt = [[UIAccessibilityElement alloc]initWithAccessibilityContainer:self.view];          CGRect a11yFirstEltFrame = CGRectUnion(_myLabel.frame, _myButton.frame);     CGRect a11yEltFrame = CGRectUnion(a11yFirstEltFrame, _mySwitch.frame);          elt.accessibilityLabel = @\&quot;regroupement d'éléments\&quot;;     elt.accessibilityHint = @\&quot;tapez deux fois pour modifier le switch\&quot;;     elt.accessibilityFrameInContainerSpace = a11yEltFrame;     elt.accessibilityActivationPoint = [_mySwitch center];          self.view.accessibilityElements = @[elt]; }         - (void)configChanged:(UISwitch *)sender {       NSString * switchValue = _mySwitch.on ? @\&quot;activé\&quot; : @\&quot;désactivé\&quot;;     elt.accessibilityLabel = [NSString stringWithFormat:@\&quot;le contrôle est %@\&quot;, switchValue.description]; } @end &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;     class ActivationPointViewController: UIViewController {          @IBOutlet weak var myButton: UIButton!     @IBOutlet weak var myLabel: UILabel!     @IBOutlet weak var mySwitch: UISwitch!          var elt: UIAccessibilityElement?               override func viewDidAppear(_ animated: Bool) {         super.viewDidAppear(animated)                  mySwitch.addTarget(self,                            action: #selector(configChanged),                            for: .valueChanged)                  elt = UIAccessibilityElement(accessibilityContainer: self.view!)         let a11yEltFrame = (myLabel.frame.union(myButton.frame)).union(mySwitch.frame)                  if let elt = elt {                          elt.accessibilityLabel = \&quot;regroupement d'éléments\&quot;             elt.accessibilityHint = \&quot;tapez deux fois pour modifier le switch\&quot;             elt.accessibilityFrameInContainerSpace = a11yEltFrame             elt.accessibilityActivationPoint = mySwitch.center                          self.view.accessibilityElements = [elt]         }     }               @objc func configChanged(sender: UISwitch){                  if let configGroup = elt {                          let switchValue = (mySwitch?.isOn)! ? \&quot;activé\&quot; : \&quot;désactivé\&quot;             configGroup.accessibilityLabel = \&quot;le contrôle est \&quot; + switchValue.description         }     } } &lt;/code&gt;&lt;/pre&gt;  Une autre possibilité de groupement d'éléments pourrait utiliser l’attribut **shouldGroupAccessibilityChildren**, booléen qui permet d’indiquer à &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; qu’il doit grouper les enfants de la vue qui porte l’attribut. &lt;/br&gt;Cela permet notamment de faire des vocalisations uniques ou de définir un ordre de lecture &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; particulier pour une partie de la page seulement *(voir la section [Ordre de lecture](#ReadingOrder))*.  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;groupElts-Links\&quot; role=\&quot;tabpanel\&quot; &gt; - [`accessibilityActivate`](https://developer.apple.com/documentation/objectivec/nsobject/1615165-accessibilityactivate) - [`shouldGroupAccessibilityChildren`](https://developer.apple.com/documentation/objectivec/nsobject/1615143-shouldgroupaccessibilitychildren) &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;ReadingOrder\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-dev.html#ordre-de-lecture"] = "Ordre de lecture";
index.add({
    url: "criteria-ios-dev.html#ordre-de-lecture",
    title: "Ordre de lecture",    
    body: "## Ordre de lecture &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#readingOrder-Details\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Fonctionnement&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#readingOrder-Example\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Exemple&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#readingOrder-Links\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Liens&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;readingOrder-Details\&quot;      role=\&quot;tabpanel\&quot;&gt; Redéfinir l’ordre de lecture pour &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; s’effectue en respectant le protocole **UIAccessibilityContainer**. &lt;/br&gt;L’idée est d’avoir un tableau des éléments de la vue qui définit l’ordre de lecture des éléments. &lt;/br&gt;&lt;/br&gt;Il est bien souvent nécessaire d’utiliser l’attribut **shouldGroupAccessibilityElement** afin d’avoir un ordre précis mais pour une partie seulement de la vue (le reste étant l’ordre naturel de lecture proposé par &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;).  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;readingOrder-Example\&quot; role=\&quot;tabpanel\&quot; &gt; Le meilleur exemple pour illustrer cette fonctionnalité est le clavier pour lequel les touches sucessives ne suivent pas forcément l'ordre natif proposé par &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;. &lt;/br&gt;Dans cet exemple, on veut l'ordre suivant : 1, 2, 3, 4, 7, 6, 8, 9, 5. &lt;/br&gt;&lt;/br&gt;On crée deux vues au sein desquelles on incorpore les chiffres qu'on souhaite vocaliser selon un ordre bien précis : &lt;/br&gt;&lt;img alt=\&quot;affichage des vues grise et bleue pour l'exemple\&quot; style=\&quot;max-width: 500px; height: auto; \&quot; src=\&quot;./images/iOSdev/OrdreDeLecture_1.png\&quot; /&gt; &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt;     __weak IBOutlet UIView * blueBlock;     __weak IBOutlet UIView * greyColumn;      - (void)viewDidAppear:(BOOL)animated {     [super viewDidAppear:animated];          //Lecture des 3 premiers nombres dans la vue grise.     greyColumn.shouldGroupAccessibilityChildren = YES;          // Lecture des chiffres 6, 8, 9 et 5 au sein du bloc bleu.     blueBlock.isAccessibilityElement = NO;     blueBlock.accessibilityElements = @[key_6,                                         key_8,                                         key_9,                                         key_5]; } &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;     @IBOutlet weak var greyColumn: UIView!     @IBOutlet weak var blueBlock: UIView!          override func viewDidAppear(_ animated: Bool) {         super.viewDidAppear(animated)                  //Lecture des 3 premiers nombres dans la vue grise.         greyColumn.shouldGroupAccessibilityChildren = true                  // Lecture des chiffres 6, 8, 9 et 5 au sein du bloc bleu.         blueBlock.isAccessibilityElement = false         blueBlock.accessibilityElements = [key_6!,                                            key_8!,                                            key_9!,                                            key_5!]     } &lt;/code&gt;&lt;/pre&gt;  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;readingOrder-Links\&quot; role=\&quot;tabpanel\&quot; &gt; - [`UIAccessibilityContainer`](https://developer.apple.com/documentation/uikit/accessibility/uiaccessibilitycontainer?language=objc) - [`shouldGroupAccessibilityChildren`](https://developer.apple.com/documentation/objectivec/nsobject/1615143-shouldgroupaccessibilitychildren) &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios-dev.html#focus-dun-element"] = "Focus d'un élément";
index.add({
    url: "criteria-ios-dev.html#focus-dun-element",
    title: "Focus d'un élément",    
    body: "## Focus d'un élément &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#focusElt-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#focusElt-Details\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Fonctionnement&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#focusElt-Example\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Exemple&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#focusElt-Links\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Lien&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;focusElt-Description\&quot;      role=\&quot;tabpanel\&quot;&gt; Le protocole informel **UIAccessibilityFocus** fournit des éléments de programmation efficaces de façon à pouvoir être informé d'une sélection passée, active ou à venir d'un élément accessible.  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;focusElt-Details\&quot; role=\&quot;tabpanel\&quot; &gt; - **accessibilityElementDidBecomeFocused** : méthode appelée dès que l'élément accessible est sélectionné. - **accessibilityElementDidLoseFocus** : méthode appelée dès que l'élément accessible perd le focus. - **accessibilityElementIsFocused** : valeur booléenne qui permet de savoir si un élément accessible est sélectionné.  Attention, ces **méthodes** ne sont pas appelées au sein d'un contrôleur de vue si un de ses élements accessibles est sélectionné mais uniquemnet si elles sont **implémentées sur l'élément accessible lui-même**. &lt;/br&gt;&lt;/br&gt;Cette erreur à laquelle on ne pense pas de prime abord provient du caractère informel du protocole **UIAccessibilityFocus** dont les éléments peuvent subir un &lt;span lang=\&quot;en\&quot;&gt;override&lt;/span&gt; sur tout objet héritant de NSObject même s'il n'est pas accessible... comme un contrôleur de vue par exemple.  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;focusElt-Example\&quot; role=\&quot;tabpanel\&quot; &gt; L'exemple de code ci-dessous permet de suivre le focus d'un élément accessible identifié par son `accessibleIdentifier`. &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; #import \&quot;UIView+focus.h\&quot;  @implementation UIView (focus)  - (void)accessibilityElementDidBecomeFocused {          if ([self accessibilityElementIsFocused]) {         NSLog(@\&quot;Mon élément est sélectionné.\&quot;);     } }  - (void)accessibilityElementDidLoseFocus {          if ([self accessibilityElementIsFocused]) {         NSLog(@\&quot;Mon élément a perdu le focus.\&quot;);     } }  - (BOOL)accessibilityElementIsFocused {          if ([self.accessibilityIdentifier isEqualToString:@\&quot;monEltAccessible\&quot;]) {         return YES;     } else {         return NO;     } } @end &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt; extension UIView {     override open func accessibilityElementDidBecomeFocused() {                  if self.accessibilityElementIsFocused() {             print(\&quot;Mon élément est sélectionné.\&quot;)         }     }          override open func accessibilityElementDidLoseFocus() {                  if self.accessibilityElementIsFocused() {             print(\&quot;Mon élément a perdu le focus.\&quot;)         }     }          override open func accessibilityElementIsFocused() -&gt; Bool {                  if (self.accessibilityIdentifier == \&quot;monEltAccessible\&quot;) {             return true         } else {             return false         }     } } &lt;/code&gt;&lt;/pre&gt;  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;focusElt-Links\&quot; role=\&quot;tabpanel\&quot; &gt; - [`UIAccessibilityFocus`](https://developer.apple.com/documentation/uikit/accessibility/uiaccessibilityfocus) &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios-dev.html#modifier-la-zone-de-focus-de-span-langenvoiceoverspan"] = "Modifier la zone de focus de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;";
index.add({
    url: "criteria-ios-dev.html#modifier-la-zone-de-focus-de-span-langenvoiceoverspan",
    title: "Modifier la zone de focus de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;",    
    body: "## Modifier la zone de focus de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#focusArea-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#focusArea-Details\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Fonctionnement&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#focusArea-Example\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Exemple&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#focusArea-Links\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Liens&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;focusArea-Description\&quot;      role=\&quot;tabpanel\&quot;&gt; Dans le cas d’objet modifié dynamiquement ou d’élément ne dérivant pas de `UIView`, il est possible de déterminer la zone géographique d’accessibilité de cet élément, c’est-à-dire la zone que &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; met en surbrillance lors du focus.    &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;focusArea-Details\&quot; role=\&quot;tabpanel\&quot; &gt; - **accessibilityFrame**&amp;nbsp;: permet de définir cette zone via un rectangle (`CGRect`). &lt;/br&gt;Par défaut pour un élément dérivant de `UIView`, cette zone est la partie «&amp;nbsp;visible&amp;nbsp;» de la vue. - **accessibilityPath**&amp;nbsp;: équivalent à `accessibilityFrame` mais permet de définir la zone via des courbes de Bézier. &lt;a name=\&quot;AccessibilityActivationPoint\&quot;&gt;&lt;/a&gt; - **accessibilityActivationPoint**&amp;nbsp;: définit un point de contact au sein de la `frame` dont l'action résultante sera activée par une sélection classique d'élément via un double tap. &lt;/br&gt; Par défaut, ce point se trouve au centre de la `frame` mais on peut le définir n'importe à l'intérieur de cette dernière, l'idée étant de pouvoir activer un élement facilement lors d'un [regroupement par exemple](#ActivationPointExemple). &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 350px; height: auto; \&quot; src=\&quot;./images/iOSdev/ModifierLaZoneDeFocus_2.png\&quot; /&gt; &lt;/br&gt; En conservant la valeur par défaut de ce point, on peut aisément se retrouver dans une situation où on active involontairement l'élément situé au milieu de la `frame` uniquement en activant le regroupement créé.  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;focusArea-Example\&quot; role=\&quot;tabpanel\&quot; &gt; &lt;img alt=\&quot;\&quot; style=\&quot;max-width: 700px; height: auto; \&quot; src=\&quot;./images/iOSdev/ModifierLaZoneDeFocus_1.png\&quot; /&gt; &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; float xVal; float yVal; float widthVal; float heightVal;      - (void)viewDidAppear:(BOOL)animated {     [super viewDidAppear:animated];          xVal = myLabel.accessibilityFrame.origin.x;     yVal = myLabel.accessibilityFrame.origin.y;     widthVal = myLabel.accessibilityFrame.size.width;     heightVal = myLabel.accessibilityFrame.size.height;      }  //Première façon d'augmenter la zone de focus. - (IBAction)tapHere:(UIButton *)sender {          myLabel.accessibilityFrame = CGRectMake(xVal,                                             yVal,                                             widthVal + 100.0,                                             heightVal+ 100.0);          UIAccessibilityPostNotification(UIAccessibilityLayoutChangedNotification, myLabel); }  //Seconde façon d'augmenter la zone de focus (Bézier). - (IBAction)clic:(UIButton *)sender {          UIBezierPath * bezierPath = [UIBezierPath bezierPath];          [bezierPath moveToPoint:CGPointMake(xVal, yVal)];          [bezierPath addLineToPoint:CGPointMake(xVal + widthVal + 100.0,                                             yVal)];     [bezierPath addLineToPoint:CGPointMake(xVal + widthVal + 100.0,                                             yVal + heightVal+ 100.0)];     [bezierPath addLineToPoint:CGPointMake(xVal,                                             yVal + heightVal+ 100.0)];     [bezierPath closePath];          myLabel.accessibilityPath = bezierPath;          UIAccessibilityPostNotification(UIAccessibilityLayoutChangedNotification, myLabel); } &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;     var xVal: CGFloat = 0.0     var yVal: CGFloat = 0.0     var widthVal: CGFloat = 0.0     var heightVal: CGFloat = 0.0          override func viewDidAppear(_ animated: Bool) {         super.viewDidAppear(animated)                  xVal = myLabel.accessibilityFrame.origin.x;         yVal = myLabel.accessibilityFrame.origin.y;         widthVal = myLabel.accessibilityFrame.size.width;         heightVal = myLabel.accessibilityFrame.size.height;     }          //Première façon d'augmenter la zone de focus.     @IBAction func clicHere(_ sender: UIButton) {                  myLabel.accessibilityFrame = CGRect.init(x: xVal,                                                  y: yVal,                                                  width: widthVal + 100.0,                                                  height: heightVal + 100.0)                  UIAccessibility.post(notification: UIAccessibility.Notification.layoutChanged,                              argument: myLabel)     }          //Seconde façon d'augmenter la zone de focus (Bézier).     @IBAction func clic(_ sender: UIButton) {                  let bezierPath = UIBezierPath.init()                  bezierPath.move(to: CGPoint.init(x: xVal, y: yVal))                  bezierPath.addLine(to: CGPoint.init(x: xVal + widthVal + 100.0,                                             y: yVal))         bezierPath.addLine(to: CGPoint.init(x: xVal + widthVal + 100.0,                                             y: yVal + heightVal + 100.0))         bezierPath.addLine(to: CGPoint.init(x: xVal,                                             y: yVal + heightVal + 100.0))         bezierPath.close()                  myLabel.accessibilityPath = bezierPath                  UIAccessibility.post(notification: UIAccessibility.Notification.screenChanged,                              argument: myLabel)     } &lt;/code&gt;&lt;/pre&gt;  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;focusArea-Links\&quot; role=\&quot;tabpanel\&quot; &gt; - [`accessibilityFrame`](https://developer.apple.com/documentation/uikit/uiaccessibilityelement/1619579-accessibilityframe) - [`accessibilityPath`](https://developer.apple.com/documentation/objectivec/nsobject/1615159-accessibilitypath) - [`accessibilityActivationPoint`](https://developer.apple.com/documentation/objectivec/nsobject/1615179-accessibilityactivationpoint) &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios-dev.html#vue-modale"] = "Vue modale";
index.add({
    url: "criteria-ios-dev.html#vue-modale",
    title: "Vue modale",    
    body: "## Vue modale &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#modalView-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#modalView-Details\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Fonctionnement&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#modalView-Example\&quot;            id=\&quot;modalView-Example_tab\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Exemples&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#modalView-Links\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Liens&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;modalView-Description\&quot;      role=\&quot;tabpanel\&quot;&gt; Quand on souhaite que le lecteur d'écran ne puisse voir et vocaliser qu'une seule et unique vue mise en avant *(alertes, popups...)* alors que d'autres éléments sont toujours présents en arrière-plan, il faut absolument utiliser la propriété **[accessibilityViewIsModal](./criteria-ios-wwdc-18230.html#accessibilityViewIsModal)** qui va focaliser &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; sur l'instance possédant cette propriété à la valeur *&lt;span lang=\&quot;en\&quot;&gt;true&lt;/span&gt;*.   &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;modalView-Details\&quot; role=\&quot;tabpanel\&quot; &gt; En fonction de la hiérarchie des vues implémentée au sein d'une application, le simple fait d'écrire `accessibilityViewIsModal = true` risque de ne pas produire toujours l'effet escompté en vocalisant certains éléments situés en arrière-plan. &lt;/br&gt;&lt;/br&gt;En effet, **seuls les éléments accessibles situés au même niveau hiérarchique** que la vue impactée sur laquelle cette propriété sera activée **seront exclus de l'analyse &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;**. &lt;/br&gt;&lt;/br&gt;Une illustration pédagogique et interactive présente dans [cet article de David RÖNNQVIST](http://ronnqvi.st/adding-accessible-behavior) *(section 'Implementing accessible modal views')* permet de parfaitement comprendre graphiquement comment fonctionne une vue modale si les explications fournies dans l'onglet &lt;a role=\&quot;button\&quot; onclick=\&quot;$('#modalView-Example_tab').trigger('click');document.getElementById('modalView').scrollIntoView({ behavior: 'smooth', block: 'start' })\&quot;&gt;Exemples&lt;/a&gt; ne sont pas suffisamment claires.  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;modalView-Example\&quot; role=\&quot;tabpanel\&quot; &gt; Les exemples développés par la suite supposent acquises les connaissances concernant l'affichage/masquage des conteneurs et de leurs contenus : se référer à la rubrique **[Masquer des éléments](#MaskElements)** pour approfondir ces notions si besoin. &lt;/br&gt;&lt;/br&gt;Pour application, supposons que nous avons une vue générique contenant des éléments tous accessibles&amp;nbsp;: - Une première vue *(parent A)* avec 3 sous-vues *(A1, A2, A3)*. - Une seconde vue *(parent B)* avec un premier niveau *(B1 et B2)* possédant lui-même des sous-vues *(B1.1, B1.2, B2.1, B2.2 et B3.3)*. &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 900px; height: auto; \&quot; src=\&quot;./images/iOSdev/ModalView_1.png\&quot; /&gt;  **Exemple 1**&amp;nbsp;: passer `Parent A` en vue modale. &lt;/br&gt;Sachant que `Parent A` et `Parent B` sont au même niveau de la hiérarchie des vues, le simple fait d'activer `accessibilityViewIsModal` sur `Parent A` permet d'obtenir le résulat souhaité. &lt;/br&gt;&lt;/br&gt;&lt;/br&gt;**Exemple 2**&amp;nbsp;: passer `A2` en vue modale. &lt;/br&gt;Les vues `A1` et `A3` ne sont pas prises en compte par &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; car elles sont au même niveau de la hiérarchie des vues que `A2` **MAIS** `Parent B` *(ou éventuellement ses sous-vues)* sera vocalisé... ce qui n'est pas souhaité. &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 700px; height: auto; \&quot; src=\&quot;./images/iOSdev/ModalView_3.png\&quot; /&gt; &lt;/br&gt;Pour solutionner ce problème, l'idée est de masquer les éléments non désirables dès lors qu'on active la vue modale. &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt;     parentA.isAccessibilityElement = NO;     parentA.accessibilityElementsHidden = NO;      A2.accessibilityViewIsModal = YES;              //Résout le problème de Parent B et de ses sous-vues.     parentB.isAccessibilityElement = NO;     parentB.accessibilityElementsHidden = YES; &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;     parentA.isAccessibilityElement = false     parentA.accessibilityElementsHidden = false      A2.accessibilityViewIsModal = true              //Résout le problème de Parent B et de ses sous-vues.     parentB.isAccessibilityElement = false     parentB.accessibilityElementsHidden = true &lt;/code&gt;&lt;/pre&gt;  &lt;/br&gt;**Exemple 3**&amp;nbsp;: passer `B1.1` en vue modale. &lt;/br&gt;Dans ce cas, les vues `parent A` et `B2`  *(ou éventuellement leurs sous-vues)* sont vocalisées tout comme la vue modale. &lt;/br&gt;Seule `B1.2` qui est au même niveau que `B1.1` n'est pas analysée par &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;. &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 900px; height: auto; \&quot; src=\&quot;./images/iOSdev/ModalView_4.png\&quot; /&gt; &lt;/br&gt;Là encore, il faut masquer tous les éléments accessibles non désirables dès lors qu'on active la vue modale. &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt;     parentB.isAccessibilityElement = NO;     parentB.accessibilityElementsHidden = NO;      B1.isAccessibilityElement = NO;     B1.accessibilityElementsHidden = NO;      B11.accessibilityViewIsModal = YES;      //Résout le problème de Parent A et de B2.     parentA.isAccessibilityElement = NO;     parentA.accessibilityElementsHidden = YES;      B2.isAccessibilityElement = NO;     B2.accessibilityElementsHidden = YES; &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;     parentB.isAccessibilityElement = false     parentB.accessibilityElementsHidden = false      B1.isAccessibilityElement = false     B1.accessibilityElementsHidden = false      B11.accessibilityViewIsModal = true      //Résout le problème de Parent A et de B2.     parentA.isAccessibilityElement = false     parentA.accessibilityElementsHidden = true      B2.isAccessibilityElement = false     B2.accessibilityElementsHidden = true &lt;/code&gt;&lt;/pre&gt;  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;modalView-Links\&quot; role=\&quot;tabpanel\&quot; &gt; - [Masquer des éléments](#MaskElements) - [`accessibilityViewIsModal`](https://developer.apple.com/documentation/objectivec/nsobject/1615089-accessibilityviewismodal) - [David Rönnqvist : \&quot;Implementing accessible modal views\&quot;](http://ronnqvi.st/adding-accessible-behavior) - [WWDC 2018 : Fournir une expérience exceptionnelle en accessibilité](./criteria-ios-wwdc-18230.html#accessibilityViewIsModal) &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios-dev.html#taille-des-textes"] = "Taille des textes";
index.add({
    url: "criteria-ios-dev.html#taille-des-textes",
    title: "Taille des textes",    
    body: "## Taille des textes &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#textSize-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#textSize-Details\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Fonctionnement&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#textSize-Links\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Liens&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;textSize-Description\&quot;      role=\&quot;tabpanel\&quot;&gt; Depuis iOS7, il est possible de modifier dynamiquement la taille des textes d'une application à l’aide des réglages du terminal.  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;textSize-Details\&quot; role=\&quot;tabpanel\&quot; &gt;  &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#TextSize-iOS13\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;iOS 13&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#TextSize-iOS12\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;iOS 12&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;TextSize-iOS13\&quot;      role=\&quot;tabpanel\&quot;&gt; &lt;img alt=\&quot;\&quot; style=\&quot;max-width: 950px; height: auto; \&quot; src=\&quot;./images/iOSdev/TailleDesTextes_iOS13_1.png\&quot; /&gt; &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot;       id=\&quot;TextSize-iOS12\&quot;       role=\&quot;tabpanel\&quot; &gt; &lt;img alt=\&quot;\&quot; style=\&quot;max-width: 700px; height: auto; \&quot; src=\&quot;./images/iOSdev/TailleDesTextes_1.png\&quot; /&gt; &lt;/div&gt;&lt;/div&gt;  &lt;/br&gt;Quelques points sont néanmoins essentiels pour la bonne utilisation du &lt;span lang=\&quot;en\&quot;&gt;Dynamic Type&lt;/span&gt; mis à disposition&amp;nbsp;:  - **Utiliser impérativement les styles de texte** proposés selon la version d'iOS avec laquelle l'application est développée.  &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 400px; height: auto; \&quot; src=\&quot;./images/iOSdev/TailleDesTextes_2.png\&quot; /&gt;  - Utiliser la police système pour les textes de l’application afin de se faciliter grandement la tâche même si l'utilisation d'autres polices est devenue nettement plus aisée depuis l'arrivée de `UIFontMetrics` avec iOS11.  &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt;     __weak IBOutlet UILabel * fontHeadline;     __weak IBOutlet UILabel * fontFootNote;          //Utilisation de la font native.     fontFootNote.font = [UIFont preferredFontForTextStyle:UIFontTextStyleHeadline];          //Définition de la font pour le titre principal d'une page.     UIFont * fontHead = [UIFont fontWithName:@\&quot;Chalkduster\&quot; size:30.0];     UIFontMetrics * fontHeadMetrics = [[UIFontMetrics alloc]initForTextStyle:UIFontTextStyleHeadline];     fontHeadline.font = [fontHeadMetrics scaledFontForFont:fontHead]; &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;     @IBOutlet weak var fontHeadline: UILabel!     @IBOutlet weak var fontFootNote: UILabel!          //Utilisation de la police native.     fontFootNote.font = .preferredFont(forTextStyle: .headline)              //Définition personnalisée de la police pour le titre principal d'une page.     let fontHead = UIFont(name: \&quot;Chalkduster\&quot;, size: 30.0)     let fontHeadMetrics = UIFontMetrics(forTextStyle: .headline)     fontHeadline.font = fontHeadMetrics.scaledFont(for: fontHead!) &lt;/code&gt;&lt;/pre&gt;  - Penser à écouter la notification **UIContentSizeCategoryDidChange** qui annonce le changement de la taille du texte à partir des paramètres du téléphone. &lt;/br&gt;Cette tâche est simplifiée depuis iOS10 où l'attribut **adjustsFontForContentSizeCategory** se charge de la mise à jour automatique de la nouvelle taille de la police système au sein de l'application (cet attribut ne peut s'appliquer aux polices personnalisées qu'avec l'utilisation de `UIFontMetrics` en iOS11). &lt;/br&gt;Il est aussi possible d'utiliser la méthode **[traitCollectionDidChange](./criteria-ios-wwdc-17245.html#Demo)** du protocole informel `UITraitEnvironment` qui sera automatiquement appelée dès qu'une modification concernant l'environnement de l'interface iOS surviendra *(class/content size, portrait/paysage, constraste des couleurs)*. &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt;     //Écoute de la notification annonçant le changement de taille de la police.     [[NSNotificationCenter defaultCenter] addObserver:self                                              selector:@selector(methodToBeCalled:)                                                  name:UIContentSizeCategoryDidChangeNotification                                                object:nil];          //Modification automatique de la taille de la police sans utiliser la notification.     fontHeadline.adjustsFontForContentSizeCategory = YES;          - (void)methodToBeCalled:(NSNotification *)notification {              //Il faut de nouveau affecter la police des éléments impactés lors du traitement de cette notification.         fontFootNote.font = [UIFont preferredFontForTextStyle:UIFontTextStyleFootnote];     } &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;     //Écoute de la notification annonçant le changement de taille de la police.     NotificationCenter.default.addObserver(self,                                            selector:#selector(methodToBeCalled(notification:)),                                            name: UIContentSizeCategory.didChangeNotification,                                            object: nil)          //Modification automatique de la taille de la police sans utiliser la notification.     fontHeadline.adjustsFontForContentSizeCategory = true          @objc func methodToBeCalled(notification: Notification) {          //Il faut de nouveau affecter la police des éléments impactés lors du traitement de cette notification.         fontFootNote.font = UIFont.preferredFont(forTextStyle: .footnote)     } &lt;/code&gt;&lt;/pre&gt;  - Ne pas oublier d'adapter les contraintes graphiques aux éléments susceptibles de voir leur taille modifiée en privilégiant l'utilisation de valeurs dynamiques : penser à paramétrer les éléments inclus dans les navigation/tab/status bar et toolbar qui seront affichés via le **[Large Content Viewer](./criteria-ios-wwdc-19261.html)**.  - Penser à adapter le [contraste des couleurs](./criteria-ios-conception.html#couleurs) à la taille de texte modifiée si nécessaire.  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;textSize-Links\&quot; role=\&quot;tabpanel\&quot; &gt; - [&lt;span lang=\&quot;en\&quot;&gt;Dynamic Type&lt;/span&gt; et styles de texte](https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/typography/) - [`UIContentSizeCategoryDidChange`](https://developer.apple.com/documentation/foundation/nsnotification.name/1622948-uicontentsizecategorydidchange) - [`adjustsFontForContentSizeCategory`](https://developer.apple.com/documentation/uikit/uicontentsizecategoryadjusting/1771731-adjustsfontforcontentsizecategor?language=objc) - [Application du Dynamic Type](./criteria-ios-wwdc-17245.html)      &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios-dev.html#trait-dunion-de-troncature"] = "Trait d'union de troncature";
index.add({
    url: "criteria-ios-dev.html#trait-dunion-de-troncature",
    title: "Trait d'union de troncature",    
    body: "## Trait d'union de troncature &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#truncHyphen-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#truncHyphen-Example\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Exemple&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;truncHyphen-Description\&quot;      role=\&quot;tabpanel\&quot;&gt; L'utilisation du `Dynamic Type` exposé dans le paragraphe précédent s'accompagne indéniablement de la troncature de mots en fonction du grossissement de texte choisi par l'utilisateur. &lt;/br&gt;Malheureusement, cela n'est pas pris en compte nativement par le système et seule une intervention au niveau programmatique permet d'obtenir ce rendu visuel particulièrement apprécié.  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;truncHyphen-Example\&quot; role=\&quot;tabpanel\&quot; &gt; &lt;img alt=\&quot;\&quot; style=\&quot;max-width: 700px; height: auto; \&quot; src=\&quot;./images/iOSdev/Troncature.png\&quot; /&gt; &lt;/br&gt;L'idée est de spécifier l'utilisation d'un `NSMutableAttributedString` auquel on ajoute une propriété de type  `NSMutableParagraphStyle` comme indiqué par l'exemple ci-dessous : &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; @interface TruncationHyphen () {     __weak IBOutlet UILabel * myLabel; } @end   @implementation TruncationHyphen  - (void)viewDidLoad {     [super viewDidLoad];          NSString * myString = @\&quot;anticonstitutionnellement\&quot;;     NSMutableParagraphStyle * paraph = [[NSMutableParagraphStyle alloc] init];          paraph.alignment = NSTextAlignmentJustified;     paraph.hyphenationFactor = 1.0;          UIFont * myFont = [UIFont fontWithName:@\&quot;HoeflerText-Black\&quot; size:18.0];     UIFont * myTextFont = [[UIFontMetrics metricsForTextStyle:UIFontTextStyleTitle1] scaledFontForFont:myFont];          NSDictionary * attributesDictionary = @{NSFontAttributeName:myTextFont};     NSMutableAttributedString * myText = [[NSMutableAttributedString alloc]initWithString:myString                                                                                 attributes:attributesDictionary];          [myText addAttribute:NSParagraphStyleAttributeName                    value:paraph                    range:NSMakeRange(0, 1)];          myLabel.attributedText = myText; } @end &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt; class TruncationHyphen: UIViewController {      @IBOutlet weak var myLabel: UILabel!          override func viewDidLoad() {         super.viewDidLoad()                  let myString = \&quot;anticonstitutionnellement\&quot;                  let paraph = NSMutableParagraphStyle()         paraph.alignment = .justified         paraph.hyphenationFactor = 1.0                  let myTextFont = UIFontMetrics(forTextStyle: .title1).scaledFont(for:UIFont(name:\&quot;HoeflerText-Black\&quot;, size:18)!)                  let myText = NSMutableAttributedString(string:myString,                                                attributes: [.font: myTextFont])                  myText.addAttribute(.paragraphStyle,                             value: paraph,                             range: NSMakeRange(0,1))          myLabel.attributedText = myText     } } &lt;/code&gt;&lt;/pre&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios-dev.html#taille-des-elements-graphiques"] = "Taille des éléments graphiques";
index.add({
    url: "criteria-ios-dev.html#taille-des-elements-graphiques",
    title: "Taille des éléments graphiques",    
    body: "## Taille des éléments graphiques &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#graphEltSize-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#graphEltSize-Example\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Exemple&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#graphEltSize-Links\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Liens&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;graphEltSize-Description\&quot;      role=\&quot;tabpanel\&quot;&gt; Tout comme la taille des textes est adaptable selon les réglages d'accessibilité (voir &lt;a href=\&quot;http://a11y-guidelines.orange.com/mobile/criteria-ios-dev.html#taille-des-textes\&quot;&gt;la rubrique précédente&lt;/a&gt;), la taille des images ainsi que celle des éléments d'une barre de tabulation ou d'outils l'est aussi mais **uniquement depuis iOS11 avec Xcode 9**.  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;graphEltSize-Example\&quot; role=\&quot;tabpanel\&quot; &gt; En suivant les différentes étapes ci-dessous, vous obtiendrez l'effet défini dans la partie Description et présenté graphiquement en exemple à la fin de cette rubrique&amp;nbsp;: &lt;/br&gt;&lt;/br&gt;1. Sous Xcode, importer l'image à grossir au format `pdf` à la résolution x1 dans le catalogue `xcassets`. &lt;/br&gt;&lt;/br&gt;2. Dans l'&lt;span lang=\&quot;en\&quot;&gt;Image Set&lt;/span&gt; qui vient d'être créé, cocher la case `Preserve Vector Data` et spécifier `Single Scale` : &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 700px; height: auto; \&quot; src=\&quot;./images/iOSdev/TailleDesEltsGraphiques_4.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;3. Si un &lt;span lang=\&quot;en\&quot;&gt;storyboard&lt;/span&gt; est utilisé pour intégrer l'image, cocher `Adjusts Image Size` dans la partie &lt;span lang=\&quot;en\&quot;&gt;Image View&lt;/span&gt;, sinon mettre à `true` la propriété `adjustsImageSizeForAccessibilityContentSizeCategory` de l'image si cette opération se fait de façon programmatique : &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 350px; height: auto; \&quot; src=\&quot;./images/iOSdev/TailleDesEltsGraphiques_5.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;4. Si une **barre de tabulation** ou une **barre d'outils** est aussi à intégrer dans l'application, renouveler les 3 étapes précédentes pour chacune des images à utiliser en grossissement de l'onglet au milieu de l'écran puis associer l'image souhaitée aux différents éléments impactés : &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 350px; height: auto; \&quot; src=\&quot;./images/iOSdev/TailleDesEltsGraphiques_6.png\&quot; /&gt; &lt;/br&gt;**ATTENTION : s'assurer que les contraintes mises en place initialement permettent toujours un affichage cohérent et désiré après grossissement.** &lt;/br&gt;&lt;/br&gt;De façon à pouvoir tester à la fois le grossissement des images et celui d'un onglet sélectionné, on crée une application contenant une barre de tabulations contenant 2 onglets dont seul le second nous intéresse et affiche l'image du logo Orange. &lt;/br&gt;&lt;/br&gt;Après modification du grossissement de texte dans les réglages (voir &lt;a href=\&quot;http://a11y-guidelines.orange.com/mobile/criteria-ios-dev.html#taille-des-textes\&quot;&gt;la rubrique précédente&lt;/a&gt;), on revient dans l'application pour constater : - Une taille de l'image Orange nettement plus conséquente. - Au milieu de l'écran, l'affichage grossi de l'onglet sur lequel on doit appuyer de façon continue pour provoquer cette apparition ⟹ fonctionnalité **[Large Content Viewer](./criteria-ios-wwdc-19261.html)** disponible depuis iOS 11. &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 1050px; height: auto; \&quot; src=\&quot;./images/iOSdev/TailleDesEltsGraphiques_9.png\&quot; /&gt;  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;graphEltSize-Links\&quot; role=\&quot;tabpanel\&quot; &gt; - [`adjustsImageSizeForAccessibilityContentSizeCategory`](https://developer.apple.com/documentation/uikit/uiaccessibilitycontentsizecategoryimageadjusting/2890929-adjustsimagesizeforaccessibility) - [WWDC 2019 : Large Content Viewer](./criteria-ios-wwdc-19261.html) &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios-dev.html#large-content-viewer"] = "Large Content Viewer";
index.add({
    url: "criteria-ios-dev.html#large-content-viewer",
    title: "Large Content Viewer",    
    body: "## Large Content Viewer &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#largeContentViewer-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#largeContentViewer-Example\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Exemple&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#largeContentViewer-Links\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Liens&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;largeContentViewer-Description\&quot;      role=\&quot;tabpanel\&quot;&gt; Le `Dynamic Type` permet le grossissement de tous les éléments graphiques avec une particularité pour les éléments {`navigation`/`tab`/`status bars` + `toolbars`} pour lesquels un appui long est nécessaire pour afficher un `HUD` en plein écran appelé **Large Content Viewer** *(voir &lt;a href=\&quot;./criteria-ios-dev.html#taille-des-l-ments-graphiques\&quot;&gt;Taille des éléments graphiques&lt;/a&gt;)*. &lt;/br&gt;&lt;/br&gt;Disponible depuis iOS 11, cette fonctionnalité était confinée aux seuls éléments UIKit mentionnés précédemment jusqu'à **iOS 13** où son utilisation est désormais possible sur tout élément graphique qui se conforme au protocole **UILargeContentViewerItem**. &lt;/br&gt;&lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 900px; height: auto; \&quot; src=\&quot;./images/iOSdev/LargeContentViewer_1.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;Avant d'implémenter le `Large Content Viewer`, il y a deux points importants qu'il est nécessaire de préciser&amp;nbsp;:  - Cette fonctionnalité n'est **disponible que pour les cinq dernières tailles de grossissement activées en accessibilité** dans les réglages du terminal. - Il est très important d'avoir à l'esprit que les modifications de taille liées au `Dynamic Type` doivent toujours être implémentées de façon **P.R.I.O.R.I.T.A.I.R.E.**&amp;nbsp;: le `Large Content Viewer` n'est à utiliser qu'à partir du moment où **l'élément graphique impacté ne peut pas répondre aux changements souhaités** ⟹ [recommandation Apple](./criteria-ios-wwdc-19261.html#LargeContentViewer). &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;largeContentViewer-Example\&quot; role=\&quot;tabpanel\&quot; &gt; Si le grossissement extrême d'un élément graphique risque de dégrader l'expérience utilisateur, on peut très simplement implémenter le `Large Content Viewer` sur cette vue pour obtenir le résultat grossi an milieu d'écran&amp;nbsp;: &lt;/br&gt;&lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 900px; height: auto; \&quot; src=\&quot;./images/iOSdev/LargeContentViewer_2.png\&quot; /&gt;  &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; @interface LogoViewController () @property (weak, nonatomic) IBOutlet UIImageView * myView; @end   NS_ASSUME_NONNULL_BEGIN @implementation LogoViewController  - (void)viewDidLoad {     [super viewDidLoad];          _myView.showsLargeContentViewer = YES;     _myView.largeContentTitle = @\&quot;logo\&quot;;     _myView.largeContentImage = [UIImage systemImageNamed:@\&quot;hand.thumbsup\&quot;];          [_myView addInteraction:[[UILargeContentViewerInteraction alloc] init]]; } @end NS_ASSUME_NONNULL_END &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt; class LogoViewController: UIViewController {          @IBOutlet weak var myView: UIImageView!          override func viewDidAppear(_ animated: Bool) {         super.viewDidAppear(animated)                  myView.isUserInteractionEnabled = true                  myView.showsLargeContentViewer = true         myView.largeContentTitle = \&quot;logo\&quot;         myView.largeContentImage = UIImage(systemName: \&quot;hand.thumbsup\&quot;)                  myView.addInteraction(UILargeContentViewerInteraction())     } } &lt;/code&gt;&lt;/pre&gt;  &lt;/br&gt;De la même façon, pour un **élément cliquable** comme un bouton dont le grossissement pourrait devenir problématique, il est tout à fait possible d'utiliser cette fonctionnalité pour afficher son contenu et s'assurer que **son action sera déclenchée dès que le doigt sera relevé**&amp;nbsp;: &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 900px; height: auto; \&quot; src=\&quot;./images/iOSdev/LargeContentViewer_3.png\&quot; /&gt;  &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; @interface ButtonViewController () @property (weak, nonatomic) IBOutlet UIButton * myButton; @end   NS_ASSUME_NONNULL_BEGIN @implementation ButtonViewController  - (void)viewDidLoad {     [super viewDidLoad];          _myButton.showsLargeContentViewer = YES;     _myButton.largeContentTitle = @\&quot;button\&quot;;     _myButton.largeContentImage = @\&quot;hand.thumbsup\&quot;;          [_myButton addInteraction:[[UILargeContentViewerInteraction alloc] init]]; }  - (IBAction)tapButton:(UIButton *)sender {     //Actions à réaliser dès que le bouton est activé. } @end NS_ASSUME_NONNULL_END &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt; class ButtonViewController: UIViewController {      @IBOutlet weak var myButton: UIButton!          override func viewDidAppear(_ animated: Bool) {         super.viewDidAppear(animated)                  myButton.showsLargeContentViewer = true         myButton.largeContentTitle = \&quot;button\&quot;         myButton.largeContentImage = UIImage(systemName: \&quot;hand.thumbsup\&quot;)         myButton.addInteraction(UILargeContentViewerInteraction())     }               @IBAction func tapButton(_ sender: UIButton) {         //Actions à réaliser dès que le bouton est activé.     } } &lt;/code&gt;&lt;/pre&gt;  &lt;/br&gt;Lorsque la **gestuelle 'appui long' est déjà implémentée sur l'élément impacté**, il est nécessaire d'utiliser la méthode `gestureRecognizer(_:shouldRecognizeSimultaneouslyWith:)` qui permettra de [mettre en place concomitamment les deux gestuelles](https://developer.apple.com/videos/play/wwdc2019/261/?time=636).  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;largeContentViewer-Links\&quot; role=\&quot;tabpanel\&quot; &gt; - [`UILargeContentViewerItem`](https://developer.apple.com/documentation/uikit/uilargecontentvieweritem) - [`UILargeContentViewerInteraction`](https://developer.apple.com/documentation/uikit/uilargecontentviewerinteraction) - [`UIInteraction`](https://developer.apple.com/documentation/uikit/uiinteraction) - [`gestureRecognizer(_:shouldRecognizeSimultaneouslyWith:)`](https://developer.apple.com/documentation/uikit/uigesturerecognizerdelegate/1624208-gesturerecognizer) - [WWDC 2019 : Large Content Viewer](./criteria-ios-wwdc-19261.html) &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios-dev.html#valeurs-continument-ajustables"] = "Valeurs continûment ajustables";
index.add({
    url: "criteria-ios-dev.html#valeurs-continument-ajustables",
    title: "Valeurs continûment ajustables",    
    body: "## Valeurs continûment ajustables &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#adjustable-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#adjustable-Example\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Exemple&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#adjustable-Links\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Lien&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;adjustable-Description\&quot;      role=\&quot;tabpanel\&quot;&gt; Des éléments graphiques comme le `picker`, le `stepper` ou encore le `slider` permettent de changer de façon continue la valeur qu'ils proposent de modifier. &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 700px; height: auto; \&quot; src=\&quot;./images/iOSdev/ValeursAjustables_1.png\&quot; /&gt; &lt;/br&gt;Quand on ne voit pas la modification dynamique se faire ou qu'on n'en est pas informé vocalement, il devient très compliqué de pouvoir se rendre compte de ce qui se passe.  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;adjustable-Example\&quot; role=\&quot;tabpanel\&quot; &gt; La méthodologie utilisée pour solutionner cette problématique pour une personne non voyante utilisant &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; reste la même pour ces trois éléments, c'est pourquoi seul le cas du `stepper` sera traité. &lt;/br&gt;&lt;/br&gt;L'implémentation de cet objet graphique est relativement simple mais son utilisation avec VoiceOver requiert quelques ajustements pour obtenir un meilleur parcours utilisateur. &lt;/br&gt;&lt;/br&gt;Si on crée un &lt;span lang=\&quot;en\&quot;&gt;stepper&lt;/span&gt; auquel on ajoute un `label` pour afficher sa valeur, on obtient le résultat suivant : &lt;/br&gt;&lt;img alt=\&quot;exemple de stepper sans une bonne implémentation\&quot; style=\&quot;max-width: 900px; height: auto; \&quot; src=\&quot;./images/iOSdev/ValeursAjustables_2.png\&quot; /&gt; &lt;/br&gt;À partir de là, on s'aperçoit que le focus doit être déplacé pour : - Atteindre chacun des deux éléments permettant d'augmenter ou de diminuer la valeur. - Connaître la valeur obtenue via le `label`.  De plus, il n'y a aucune indication de changement de la valeur en temps réel. &lt;/br&gt;Certes, rien n'est bloquant mais, si l'on souhaite réellement mettre en place cet objet avec un rendu le plus fluide possible, ces quelques remarques conduisent tout naturellement à concevoir différemment cet exemple pourtant si simple. &lt;/br&gt;&lt;/br&gt;L'idée est de pouvoir changer la valeur du &lt;span lang=\&quot;en\&quot;&gt;stepper&lt;/span&gt;, être informé de son changement et d'en connaître la valeur par le biais d'un unique objet. &lt;/br&gt;Il faut donc **regrouper le &lt;span lang=\&quot;en\&quot;&gt;stepper&lt;/span&gt; et le `label`** *(à l'aide d'une &lt;span lang=\&quot;en\&quot;&gt;StackView&lt;/span&gt; par exemple)* puis associer **`UIAccessibilityTraitAdjustable`** à ce nouveau groupe accessible. &lt;/br&gt;Ce nouveau `trait` va permettre de modifier de façon continue la valeur de l'objet auquel il est associé en implémentant **OBLIGATOIREMENT** les méthodes `accessibilityIncrement()` et `accessibilityDecrement()`. &lt;/br&gt;&lt;/br&gt;On élimine ainsi toutes les contraintes rencontrées initialement et on obtient, en plus, un `hint` lié à ce nouveau `trait` qui indique la manipulation nécessaire au bon fonctionnement. &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 1000px; height: auto; \&quot; src=\&quot;./images/iOSdev/ValeursAjustables_3.png\&quot; /&gt; - Pour aboutir à ce résultat, on définit tout d'abord une classe conteneur {&lt;span lang=\&quot;en\&quot;&gt;stepper&lt;/span&gt; + `label`} qui va permettre la délégation pour la modification ultérieure de la valeur.  &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; -===== StepperWrapper.h =====- NS_ASSUME_NONNULL_BEGIN @class StepperWrapper;  @protocol AdjustableForAccessibilityDelegate &amp;lt;NSObject&amp;gt; - (void)adjustableDecrementForView:(StepperWrapper *)view; - (void)adjustableIncrementForView:(StepperWrapper *)view; @end   @interface StepperWrapper : UIStackView @property(nonatomic,weak) id &amp;lt;AdjustableForAccessibilityDelegate&amp;gt; delegate; @end NS_ASSUME_NONNULL_END           -===== StepperWrapper.m =====- NS_ASSUME_NONNULL_BEGIN @implementation StepperWrapper  - (instancetype)initWithCoder:(NSCoder *)coder {          self = [super initWithCoder:coder];          self.isAccessibilityElement = YES;     self.accessibilityTraits = UIAccessibilityTraitAdjustable;          return self; }  - (void)accessibilityDecrement {     if ([_delegate respondsToSelector:@selector(adjustableDecrementForView:)]) {         [_delegate adjustableDecrementForView:self];     } }  - (void)accessibilityIncrement {     if ([_delegate respondsToSelector:@selector(adjustableIncrementForView:)]) {         [_delegate adjustableIncrementForView:self];     } } @end NS_ASSUME_NONNULL_END &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt; protocol AdjustableForAccessibilityDelegate: class {     func adjustableDecrementFor(_ view: StepperWrapper)     func adjustableIncrementFor(_ view: StepperWrapper) }   class StepperWrapper: UIStackView {      weak var delegate: AdjustableForAccessibilityDelegate?          override init(frame: CGRect) {         super.init(frame: frame)     }          required init(coder: NSCoder) {         super.init(coder: coder)                  isAccessibilityElement = true         accessibilityTraits = .adjustable     }          override func accessibilityDecrement() {         delegate?.adjustableDecrementFor(self)     }          override func accessibilityIncrement() {         delegate?.adjustableIncrementFor(self)     } } &lt;/code&gt;&lt;/pre&gt;  - Ensuite, il faut redéfinir les 2 méthodes du protocole implémenté pour indiquer ce qu'elles doivent réaliser avant de mettre à jour la valeur modifiée et de la présenter vocalement dans le &lt;span lang=\&quot;en\&quot;&gt;ViewController&lt;/span&gt;.  &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; NS_ASSUME_NONNULL_BEGIN @interface ContinuousAdjustableValues () &amp;lt;AdjustableForAccessibilityDelegate&amp;gt; @property (weak, nonatomic) IBOutlet StepperWrapper * stepperStackViewAccess; @property (weak, nonatomic) IBOutlet UIStepper * stepperAccess; @property (weak, nonatomic) IBOutlet UILabel * stepperValueAccess; @end   @implementation ContinuousAdjustableValues - (void)viewWillAppear:(BOOL)animated {     [super viewWillAppear:animated];          _stepperStackViewAccess.delegate = self;     _stepperStackViewAccess.accessibilityLabel = @\&quot;augmenter ou diminuer la valeur\&quot;;     _stepperStackViewAccess.accessibilityValue = _stepperValueAccess.text; }  - (void)adjustableDecrementForView:(StepperWrapper *)view {     _stepperAccess.value  -= _stepperAccess.stepValue;     [self updateStepperValue]; }  - (void)adjustableIncrementForView:(StepperWrapper *)view {     _stepperAccess.value  += _stepperAccess.stepValue;     [self updateStepperValue]; }  - (void) updateStepperValue {     _stepperValueAccess.text = [NSString stringWithFormat:@\&quot;Valeur = %0.1f\&quot;,_stepperAccess.value];     _stepperStackViewAccess.accessibilityValue = _stepperValueAccess.text; } @end NS_ASSUME_NONNULL_END &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt; class ContinuousAdjustableValues: UIViewController, AdjustableForAccessibilityDelegate {          @IBOutlet weak var stepperStackViewAccess: StepperWrapper!     @IBOutlet weak var stepperAccess: UIStepper!     @IBOutlet weak var stepperValueAccess: UILabel!               override func viewDidLoad() {         super.viewDidLoad()                  stepperStackViewAccess.delegate = self         stepperStackViewAccess.accessibilityLabel = \&quot;augmenter ou diminuer la valeur\&quot;         stepperStackViewAccess.accessibilityValue = stepperValueAccess.text     }          func adjustableDecrementFor(_ view: StepperWrapper) {         stepperAccess.value -= stepperAccess.stepValue         updateStepperValue()     }          func adjustableIncrementFor(_ view: StepperWrapper) {         stepperAccess.value += stepperAccess.stepValue         updateStepperValue()     }          private func updateStepperValue() {         stepperValueAccess.text = \&quot;Valeur = \(stepperAccess.value)\&quot;         stepperStackViewAccess.accessibilityValue = stepperValueAccess.text     } } &lt;/code&gt;&lt;/pre&gt;  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;adjustable-Links\&quot; role=\&quot;tabpanel\&quot; &gt; - [`UIAccessibilityTraitAdjustable`](https://developer.apple.com/documentation/uikit/uiaccessibilitytraitadjustable) &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios-dev.html#actions-personnalisees"] = "Actions personnalisées";
index.add({
    url: "criteria-ios-dev.html#actions-personnalisees",
    title: "Actions personnalisées",    
    body: "## Actions personnalisées &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#customActions-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#customActions-Example\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Exemple&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#customActions-Links\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Liens&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;customActions-Description\&quot;      role=\&quot;tabpanel\&quot;&gt; Certaines manipulations basiques peuvent devenir un vrai casse-tête pour se fondre dans une navigation sereine avec VoiceOver et se transformer en éléments parfaitement accessibles. &lt;/br&gt;&lt;/br&gt;Un exemple probant est celui du mail iOS natif qui permet d'accéder à un ensemble d'actions. &lt;/br&gt;&lt;/br&gt;  &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#CustomActionsVoiceOver\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Lecteur d'écran&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#CustomActionsSwitchControl\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Contrôle de sélection&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt; &lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;CustomActionsVoiceOver\&quot;      role=\&quot;tabpanel\&quot;&gt; &lt;img alt=\&quot;accès aux actions d'un mail sans voiceover avec un balayage gauche\&quot; style=\&quot;max-width: 900px; height: auto; \&quot; src=\&quot;./images/iOSdev/Actions_VoiceOver.png\&quot;/&gt; &lt;/br&gt;La gestuelle utilisée sans utilisation du lecteur d'écran ne peut pas convenir à VoiceOver pour obtenir le résultat désiré : un balayage vers la gauche sélectionnerait l'élément accessible suivant au lieu de proposer les actions à réaliser sur le mail sélectionné. &lt;/br&gt;&lt;/br&gt;Dans un cas comme celui-là, il conviendrait de réaliser les opérations décrites dans l'onglet `Exemple` pour donner accès à ces opérations si elles n'étaient pas implémentées nativement. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot;       id=\&quot;CustomActionsSwitchControl\&quot;       role=\&quot;tabpanel\&quot; &gt; &lt;img alt=\&quot;accès aux actions d'un mail avec le contrôle de sélection\&quot; style=\&quot;max-width: 1000px; height: auto; \&quot; src=\&quot;./images/iOSdev/Actions_SwitchControl.png\&quot;/&gt; &lt;/br&gt;Ici, toutes les actions sont directement disponibles dès le premier écran pour faciliter grandement l'expérience utilisateur en arrivant rapidement aux resultats souhaités. &lt;/br&gt;&lt;/br&gt;Pour un composant développé au sein d'une application, il est très fortement recommandé de réaliser ce même type de parcours en s'appuyant sur le modèle fourni dans l'onglet `Exemple`. &lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div class=\&quot;tab-pane\&quot; id=\&quot;customActions-Example\&quot; role=\&quot;tabpanel\&quot; &gt; Que ce soit pour le lecteur d'écran ou le contrôle de sélection, la réalisation programmatique est exactement la même pour obtenir les actions souhaitées : l'exemple suivant sera illustré pour VoiceOver. &lt;/br&gt;&lt;/br&gt;Une solution consiste à **associer à l'élément sélectionné un tableau d'actions** dont le système se chargera d'indiquer automatiquement la présence en informant vocalement l'utilisateur de leur disponibilité. &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 900px; height: auto; \&quot; src=\&quot;./images/iOSdev/Actions_2.png\&quot; /&gt;  &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; @interface CustomActions () @property (weak, nonatomic) IBOutlet UILabel * persoElt; @end   @implementation CustomActions - (void)viewDidLoad {     [super viewDidLoad];          UIAccessibilityCustomAction * a11yOptionsAction = [[UIAccessibilityCustomAction alloc]initWithName:@\&quot;options\&quot;                                                                                                 target:self                                                                                               selector:@selector(optionsAction)];     UIAccessibilityCustomAction * a11yDrapeauAction = [[UIAccessibilityCustomAction alloc]initWithName:@\&quot;drapeau\&quot;                                                                                                 target:self                                                                                               selector:@selector(drapeauAction)];     UIAccessibilityCustomAction * a11yCorbeilleAction = [[UIAccessibilityCustomAction alloc]initWithName:@\&quot;corbeille\&quot;                                                                                                   target:self                                                                                                 selector:@selector(corbeilleAction)];          _persoElt.accessibilityCustomActions = @[a11yOptionsAction,                                              a11yDrapeauAction,                                              a11yCorbeilleAction]; }  - (BOOL)optionsAction {     //Code à implémenter pour cette action.     return YES; }  - (BOOL)drapeauAction {     //Code à implémenter pour cette action.     return YES; }  - (BOOL)corbeilleAction {     //Code à implémenter pour cette action.     return YES; } @end &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt; class CustomActions: UIViewController {          @IBOutlet weak var persoElt: UILabel!               override func viewDidLoad() {         super.viewDidLoad()                  let a11yOptionsAction = UIAccessibilityCustomAction(name: \&quot;options\&quot;,                                                             target: self,                                                             selector: #selector(optionsAction))                  let a11yDrapeauAction = UIAccessibilityCustomAction(name: \&quot;drapeau\&quot;,                                                             target: self,                                                             selector: #selector(drapeauAction))                  // Nouvelle syntaxe iOS 13 avec une 'closure'.         let a11yCorbeilleAction = UIAccessibilityCustomAction(name: \&quot;corbeille\&quot;,                                                               actionHandler: { (customAction: UIAccessibilityCustomAction) -&gt; Bool in                                                                 //Code à implémenter pour cette action.                                                                 return true                                                               })                  persoElt.accessibilityCustomActions = [a11yOptionsAction,                                                a11yDrapeauAction,                                                a11yCorbeilleAction]     }               @objc func optionsAction() -&gt; Bool {         //Code à implémenter pour cette action.         return true     }          @objc func drapeauAction() -&gt; Bool {         //Code à implémenter pour cette action.         return true     } } &lt;/code&gt;&lt;/pre&gt;  &lt;/br&gt;Le code implémenté ci-dessus permet d'obtenir le résultat suivant par balayages successifs sur l'élément accessible sélectionné : &lt;/br&gt;&lt;img alt=\&quot;accès aux actions avec voiceover en utilisant un balayage vers le haut\&quot; style=\&quot;max-width: 900px; height: auto; \&quot; src=\&quot;./images/iOSdev/Actions_3.png\&quot; /&gt; &lt;/br&gt;Pour plus d'informations sur ce sujet, ne pas hésiter à visualiser la vidéo **Utiliser les actions personnalisées** dont le [résumé détaillé](./criteria-ios-wwdc-19000.html#AccessibilityCustomActions) se trouve dans la section WWDC de ce site.  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;customActions-Links\&quot; role=\&quot;tabpanel\&quot; &gt; - [`accessibilityCustomActions`](https://developer.apple.com/documentation/objectivec/nsobject/1615150-accessibilitycustomactions) - [`UIAccessibilityCustomAction`](https://developer.apple.com/documentation/uikit/uiaccessibilitycustomaction) - [WWDC 2017 : les nouveautés en accessibilité](./criteria-ios-wwdc-17215.html#CustomActions) - [Utiliser les actions personnalisées](./criteria-ios-wwdc-19000.html#AccessibilityCustomActions) &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios-dev.html#rotor-personnalise"] = "Rotor personnalisé";
index.add({
    url: "criteria-ios-dev.html#rotor-personnalise",
    title: "Rotor personnalisé",    
    body: "## Rotor personnalisé &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#rotor-Details\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Fonctionnement&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#rotor-Example\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Exemple&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#rotor-Link\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Liens&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;rotor-Details\&quot;      role=\&quot;tabpanel\&quot;&gt; Depuis iOS10, il est possible d'ajouter une action spécifique au rotor de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; en s'appuyant sur l'objet **UIAccessibilityCustomRotor** dont la construction prend en compte 2 éléments principaux en entrée : - **UIAccessibilityCustomRotorSearchPredicate** : définit la logique à mettre en oeuvre selon le type de balayage effectué sur l'écran. - **UIAccessibilityCustomRotorItemResult** : correspond à l'élément issu de la logique précedente.  &lt;img alt=\&quot;\&quot; style=\&quot;max-width: 500px; height: auto; \&quot; src=\&quot;./images/iOSdev/CustomRotor_1.png\&quot; /&gt;  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;rotor-Example\&quot; role=\&quot;tabpanel\&quot; &gt; Le code fourni ci-dessous permet de compter et d'afficher le nombre de balayages haut et bas *(finalité inutile avec le rotor mais qui permet de mettre en avant sa création programmatique)*. &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; @interface CustomRotor () @property (weak, nonatomic) IBOutlet UILabel * rotorTitle; @property (weak, nonatomic) IBOutlet UILabel * upLabel; @property (weak, nonatomic) IBOutlet UILabel * downLabel; @end   @implementation CustomRotor  static NSInteger flicksUp; static NSInteger flicksDown;   + (void)initialize {          flicksUp = 0;     flicksDown = 0; }   - (void)viewDidLoad {     [super viewDidLoad];          UIAccessibilityCustomRotor * rotor = [self buildMyRotor:@\&quot;Rotor info\&quot;];     self.accessibilityCustomRotors = @[rotor]; }   - (UIAccessibilityCustomRotor *)buildMyRotor:(NSString * _Nonnull)name{          return [[UIAccessibilityCustomRotor alloc]initWithName:name                                            itemSearchBlock:^UIAccessibilityCustomRotorItemResult * _Nullable(UIAccessibilityCustomRotorSearchPredicate * _Nonnull predicate) {                                                                                                if (predicate.searchDirection == UIAccessibilityCustomRotorDirectionNext) {                                                                                                        flicksDown += 1;                                                    self.downLabel.text = [NSString stringWithFormat:@\&quot;%ld\&quot;,(long)flicksDown];                                                                                                    } else {                                                                                                        flicksUp += 1;                                                    self.upLabel.text = [NSString stringWithFormat:@\&quot;%ld\&quot;,(long)flicksUp];                                                }                                                                                                return [[UIAccessibilityCustomRotorItemResult alloc] initWithTargetElement:self.rotorTitle                                                                                                               targetRange:nil];                                            }]; } @end &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt; class CustomRotor: UIViewController {      @IBOutlet weak var rotorTitle: UILabel!          static var flicksUp = 0     @IBOutlet weak var upLabel: UILabel!          static var flicksDown = 0     @IBOutlet weak var downLabel: UILabel!               override func viewDidLoad() {         super.viewDidLoad()                  let rotor = buildMyRotor(\&quot;Rotor info\&quot;)         self.accessibilityCustomRotors = [rotor]     }               func buildMyRotor(_ name: String) -&gt; UIAccessibilityCustomRotor {                  return  UIAccessibilityCustomRotor.init(name: name,                                                 itemSearch: { predicate -&gt; UIAccessibilityCustomRotorItemResult? in                                                                                                          if (predicate.searchDirection == UIAccessibilityCustomRotor.Direction.next) {                                                                                                                  CustomRotor.flicksDown += 1                                                         self.downLabel.text = String(CustomRotor.flicksDown)                                                                                                              } else {                                                                                                                  CustomRotor.flicksUp += 1                                                         self.upLabel.text = String(CustomRotor.flicksUp)                                                     }                                                                                                          return UIAccessibilityCustomRotorItemResult.init(targetElement:self.rotorTitle,                                                                                                      targetRange: nil)         })     } } &lt;/code&gt;&lt;/pre&gt;  &lt;/br&gt;Le code implémenté ci-dessus permet d'obtenir le résultat suivant : &lt;/br&gt;&lt;img alt=\&quot;affichage modifié avec une action du rotor\&quot; style=\&quot;max-width: 1100px; height: auto; \&quot; src=\&quot;./images/iOSdev/CustomRotor_2.png\&quot; /&gt; &lt;/br&gt;L'utilisation d'un rotor personnalisé n'est pas du tout naturelle au sein d'une application, c'est pourquoi il est primordial de **bien annoncer son fonctionnement et sa finalité** pour faciliter au maximum l'expérience utilisateur. &lt;/br&gt;&lt;/br&gt;La majeure différence du rotor avec les actions personnalisées ou encore les valeurs continûment ajustables réside dans sa possible utilisation quel que soit l'élément sélectionné sur l'écran. &lt;/br&gt;Cependant, si l'élément sélectionné est `ajustable` ou contient des actions personnalisées, **ses actions prévaudront sur celles du rotor**. &lt;/br&gt;&lt;/br&gt;L'implémentation d'une telle fonctionnalité au sein d'une application est donc à envisager selon des **besoins bien spécifiques** dont le seul objectif doit être de **faciliter l'expérience utilisateur**.  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;rotor-Link\&quot; role=\&quot;tabpanel\&quot; &gt; - [`UIAccessibilityCustomRotor`](https://developer.apple.com/documentation/uikit/uiaccessibilitycustomrotor) - [`UIAccessibilityCustomRotorItemResult`](https://developer.apple.com/documentation/uikit/uiaccessibilitycustomrotoritemresult) - [`UIAccessibilityCustomRotorSearchPredicate`](https://developer.apple.com/documentation/uikit/uiaccessibilitycustomrotorsearchpredicate) &lt;&lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios-dev.html#options-daccessibilite"] = "Options d’accessibilité";
index.add({
    url: "criteria-ios-dev.html#options-daccessibilite",
    title: "Options d’accessibilité",    
    body: "## Options d’accessibilité &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#a11yOptions-States\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;États&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#a11yOptions-Events\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Événements&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#a11yOptions-Recap\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Recapitulatif&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#a11yOptions-Link\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Lien&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;a11yOptions-States\&quot;      role=\&quot;tabpanel\&quot;&gt; Est-ce que &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; est activé&amp;nbsp;? Est-ce que le mode audio-mono est activé&amp;nbsp;? &lt;/br&gt;Plusieurs fonctions du &lt;span lang=\&quot;en\&quot;&gt;framework&lt;/span&gt; `UIKit` permettent de connaître le statut de ces options d'accessibilité.  &lt;/br&gt;La plus utile est certainement celle qui permet de savoir si &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; est activé au moment de l’appel (**UIAccessibilityIsVoiceOverRunning**).  &lt;/br&gt;&lt;/br&gt;Une présentation très visuelle de certaines fonctions, peut-être moins utiles à première vue, est faite lors d'une &lt;a href=\&quot;./criteria-ios-wwdc-18230.html\&quot; style=\&quot;text-decoration: underline;\&quot;&gt;vidéo WWDC&lt;/a&gt; *(Fournir une expérience exceptionnelle en accessibilité)* dont le contenu est parfaitement détaillé sur ce site.&lt;/br&gt;&lt;/br&gt;  &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt;     BOOL isVoiveOverRunning = (UIAccessibilityIsVoiceOverRunning() ? 1 : 0);     BOOL isSwitchControlRunning = (UIAccessibilityIsSwitchControlRunning() ? 1 : 0);          NSLog(@\&quot;VoiceOver vaut %d et SwitchControl vaut %d.\&quot;, isVoiveOverRunning, isSwitchControlRunning); &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;     let isVoiceOverRunning = (UIAccessibility.isVoiceOverRunning ? 1 : 0)     let isSwitchControlRunning = (UIAccessibility.isSwitchControlRunning ? 1 : 0)              print(\&quot;VoiceOver vaut \(isVoiceOverRunning) et SwichControl vaut \(isSwitchControlRunning).\&quot;) &lt;/code&gt;&lt;/pre&gt;  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;a11yOptions-Events\&quot; role=\&quot;tabpanel\&quot; &gt; Le système iOS envoie un certain nombre d’événements d’accessibilité à destination des applications lors de la modification des options d’accessibilité. &lt;/br&gt;Par exemple, si &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; est désactivé durant l’utilisation de l’application, celle-ci recevra l’événement **UIAccessibilityVoiceOverStatusDidChangeNotification**, ce qui peut être très utile couplé à la fonction **UIAccessibilityIsVoiceOverRunning** grâce à laquelle on peut exécuter un traitement particulier quand &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; est activé. &lt;/br&gt;Mais que se passe-t-il si &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; est désactivé alors que ce traitement a déjà eu lieu&amp;nbsp;? &lt;/br&gt;&lt;/br&gt;C’est là que les événements système peuvent être utilisés et, en restant à leur écoute, il est possible d’appliquer des traitements spécifiques de manière dynamique.&lt;/br&gt;&lt;/br&gt;  Dans cet exemple, on appelle une méthode spécifique au moment où le statut de VoiceOver ou du Switch Control change. &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; - (void)viewDidAppear:(BOOL)animated {     [super viewDidAppear:animated];          [[NSNotificationCenter defaultCenter] addObserver:self                                              selector:@selector(methodToBeCalled:)                                                  name:UIAccessibilitySwitchControlStatusDidChangeNotification                                                object:nil];          [[NSNotificationCenter defaultCenter] addObserver:self                                              selector:@selector(methodToBeCalled:)                                                  name:UIAccessibilityVoiceOverStatusDidChangeNotification                                                object:nil]; }  - (void)methodToBeCalled:(NSNotification *)notification {          NSArray * checkStatus = @[@\&quot;NOK\&quot;, @\&quot;OK\&quot;];          NSLog(@\&quot;SWITCH CONTROL est %@ et VOICE OVER est %@\&quot;,           checkStatus[UIAccessibilityIsSwitchControlRunning()],           checkStatus[UIAccessibilityIsVoiceOverRunning()]); } &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;     override func viewDidAppear(_ animated: Bool) {         super.viewDidAppear(animated)                  NotificationCenter.default.addObserver(self,                                                selector: #selector(methodToBeCalled(notification:)),                                                name: UIAccessibility.switchControlStatusDidChangeNotification,                                                object: nil)                  NotificationCenter.default.addObserver(self,                                                selector: #selector(methodToBeCalled(notification:)),                                                name: UIAccessibility.voiceOverStatusDidChangeNotification,                                                object: nil)     }          @objc private func methodToBeCalled(notification: Notification) {          let switchControlStatus = (UIAccessibility.isSwitchControlRunning ? \&quot;OK\&quot; : \&quot;NOK\&quot;)         let voiceOverStatus = (UIAccessibility.isVoiceOverRunning ? \&quot;OK\&quot; : \&quot;NOK\&quot;)                  print(\&quot;SWITCH CONTROL est \(switchControlStatus) et VOICE OVER est \(voiceOverStatus).\&quot;)     } &lt;/code&gt;&lt;/pre&gt;  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;a11yOptions-Recap\&quot; role=\&quot;tabpanel\&quot; &gt; Tous les &lt;a href=\&quot;https://developer.apple.com/documentation/uikit/accessibility/notification_names?language=objc\&quot; style=\&quot;text-decoration: underline;\&quot;&gt;événements&lt;/a&gt; et les &lt;a href=\&quot;https://developer.apple.com/documentation/uikit/accessibility?language=objc\&quot; style=\&quot;text-decoration: underline;\&quot;&gt;options d'accessibilité&lt;/a&gt; sont disponibles sur la documentation officielle d'Apple. &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 1100px; height: auto; \&quot; src=\&quot;./images/iOSdev/OptionsA11Y.png\&quot; /&gt; &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;a11yOptions-Link\&quot; role=\&quot;tabpanel\&quot; &gt; - [Options d'accessibilité](./criteria-ios-conception.html#options-d-accessibilit-) *(conception iOS)* &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios-dev.html#barre-de-navigation"] = "Barre de navigation";
index.add({
    url: "criteria-ios-dev.html#barre-de-navigation",
    title: "Barre de navigation",    
    body: "## Barre de navigation &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#navBar-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#navBar-LeftBarItem\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;LeftBarItem&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#navBar-Title\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Titre&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#navBar-RightBarItem\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;RightBarItem&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#navBar-ReadingOrder\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Ordre de lecture&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#navBar-Link\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Lien&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;navBar-Description\&quot;      role=\&quot;tabpanel\&quot;&gt; L'utilisation d'une barre de navigation est particulièrement répandue pour développer des applications iOS et peut se résumer à trois parties à étudier de façon précise pour obtenir un résultat efficace : &lt;/br&gt;&lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 500px; height: auto; \&quot; src=\&quot;./images/iOSdev/NavigationBar_1.png\&quot; /&gt;  - **LeftBarItem** : comprend généralement un seul élément qui permet le retour vers la page de provenance. - **Titre** : souvent un simple texte qui peut aussi se présenter sous forme de &lt;span lang=\&quot;en\&quot;&gt;StackView&lt;/span&gt; dans les cas les plus complexes. - **RightBarItem** : zone qui comprend souvent plusieurs icônes *(compte, authentification, validation...)*.  Utiliser les composants standards en personnalisant un minimum la barre de navigation permet d'assurer sans trop d'efforts un résultat probant avec &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;. &lt;/br&gt;&lt;/br&gt;Malheureusement, ce n'est pas toujours possible selon les contraintes liées au projet, c'est pourquoi des exemples concrets sont fournis pour faciliter une implémentation parfois délicate pouvant aller jusqu'à une modification de l'ordre de lecture au sein-même des éléments de la barre de navigation. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;navBar-LeftBarItem\&quot; role=\&quot;tabpanel\&quot; &gt; Si on ne souhaite modifier que la vocalisation &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; de cet élément sans en changer l'aspect, il suffit de lui fournir un nouveau `label` une fois la barre de navigation chargée. &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt;     self.navigationController.navigationBar.backItem.accessibilityLabel = @\&quot;nouveau label pour le bouton de retour\&quot;; &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;     navigationController?.navigationBar.backItem?.accessibilityLabel = \&quot;nouveau label pour le bouton de retour\&quot; &lt;/code&gt;&lt;/pre&gt;  &lt;/br&gt;La personnalisation de cet élément consiste souvent à **afficher un chevron particulier sans texte**. &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 400px; height: auto; \&quot; src=\&quot;./images/iOSdev/NavigationBar_2.png\&quot; /&gt; &lt;/br&gt;Les deux façons possibles de réalisation détaillées dans les exemples ci-dessous s'appuient sur le remplacement de l'élément standard par un **UIBarButtonItem** personnalisé avec une simple **image fournie en entrée** qui définit le chevron à présenter :  &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt;     UIBarButtonItem &amp;#42; _a11yLeftBarButton;          _a11yLeftBarButton = [[UIBarButtonItem alloc]initWithImage:[UIImage imageNamed:@\&quot;info_chevron\&quot;]                                                          style:UIBarButtonItemStyleDone                                                         target:self                                                         action:@selector(goBackToThePreviousView:)];          _a11yLeftBarButton.accessibilityLabel = @\&quot;écran précédent\&quot;;     self.navigationItem.leftBarButtonItem = _a11yLeftBarButton; &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;     var a11yLeftBarButton: UIBarButtonItem?          a11yLeftBarButton = UIBarButtonItem(image: UIImage(named: \&quot;info_chevron\&quot;),                                         style: .done,                                         target: self,                                         action: #selector(goBackToThePreviousView(info:)))      a11yLeftBarButton!.accessibilityLabel = \&quot;écran précédent\&quot;     navigationItem.leftBarButtonItem = a11yLeftBarButton &lt;/code&gt;&lt;/pre&gt;  &lt;/br&gt;... ou avec une **UIView** pour laquelle une action doit être ajoutée pour définir le rôle du nouveau bouton : cette implémentation est plus longue que la précédente mais a l'avantage de **fournir une &lt;span lang=\&quot;en\&quot;&gt;frame&lt;/span&gt;** dont on va avoir besoin si l'on souhaite travailler sur l'ordre de lecture des éléments de la barre de navigation par exemple.  &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt;     var a11yLeftBarButton: UIBarButtonItem?          UIImage &amp;#42; img = [UIImage imageNamed:@\&quot;info_chevron\&quot;];     UIImageView &amp;#42; imgView = [[UIImageView alloc]initWithImage:img];     _a11yLeftBarButton = [[UIBarButtonItem alloc]initWithCustomView:imgView];          UITapGestureRecognizer &amp;#42; tap = [[UITapGestureRecognizer alloc]initWithTarget:self                                                                           action:@selector(goBackToThePreviousView:)];     [_a11yLeftBarButton.customView addGestureRecognizer:tap];          _a11yLeftBarButton.isAccessibilityElement = YES;     _a11yLeftBarButton.accessibilityTraits = UIAccessibilityTraitButton;     _a11yLeftBarButton.accessibilityLabel = @\&quot;écran précédent\&quot;;          self.navigationItem.leftBarButtonItem = _a11yLeftBarButton; &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;     var a11yLeftBarButton: UIBarButtonItem?          let a11yLeftBarButtonImage = UIImage(named: \&quot;info_chevron\&quot;)     a11yLeftBarButton = UIBarButtonItem(customView: UIImageView(image: a11yLeftBarButtonImage))              let tap = UITapGestureRecognizer(target: self,                                      action: #selector(goBackToThePreviousView(info:)))     a11yLeftBarButton?.customView?.addGestureRecognizer(tap)              a11yLeftBarButton?.isAccessibilityElement = true     a11yLeftBarButton?.accessibilityTraits = .button     a11yLeftBarButton?.accessibilityLabel = \&quot;écran précédent\&quot;              navigationItem.leftBarButtonItem = a11yLeftBarButton &lt;/code&gt;&lt;/pre&gt;  &lt;/br&gt;L'implémentation de l'une ou l'autre de ces solutions va donc dépendre de l'utilisation ultérieure du nouvel élément avec &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;navBar-Title\&quot; role=\&quot;tabpanel\&quot; &gt; De façon à pouvoir utiliser rapidement les propriétés d'accessibilité du titre d'une barre de navigation, le plus simple est d'**implémenter son contenu sous forme de &lt;span lang=\&quot;en\&quot;&gt;UIView&lt;/span&gt;** :  &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt;     UILabel &amp;#42; a11yTitleLabel = [[UILabel alloc]init];     a11yTitleLabel.text = @\&quot;TITRE\&quot;;     [a11yTitleLabel sizeToFit];          self.navigationItem.titleView = a11yTitleLabel;     self.navigationItem.titleView.accessibilityLabel = @\&quot;vocalisation du titre différente de l'écrit\&quot;; &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;     let a11yTitleLabel = UILabel()     a11yTitleLabel.text = \&quot;TITRE\&quot;     a11yTitleLabel.sizeToFit()      navigationItem.titleView = a11yTitleLabel     navigationItem.titleView?.accessibilityLabel = \&quot;vocalisation du titre différente de l'écrit\&quot; &lt;/code&gt;&lt;/pre&gt;  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;navBar-RightBarItem\&quot; role=\&quot;tabpanel\&quot;&gt; &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 400px; height: auto; \&quot; src=\&quot;./images/iOSdev/NavigationBar_3.png\&quot; /&gt; &lt;/br&gt;À la création d'éléments dans la partie droite de la barre de navigation, l'utilisation de &lt;span lang=\&quot;en\&quot;&gt;UIView&lt;/span&gt; est recommandée de façon à pouvoir interagir avec &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; sans effectuer trop de modifications ultérieurement. &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt;     UIBarButtonItem &amp;#42; _a11yRightBarButton;      UILabel &amp;#42; a11y = [[UILabel alloc]init];     a11y.text = @\&quot;OK\&quot;;     [a11y sizeToFit];     [a11y setUserInteractionEnabled:YES]; //Obligatoire pour reconnaître le 'tap gesture'.          _a11yRightBarButton = [[UIBarButtonItem alloc]initWithCustomView:a11y];          UITapGestureRecognizer &amp;#42; tap = [[UITapGestureRecognizer alloc]initWithTarget:self                                                                            action:@selector(validateActions:)];     [_a11yRightBarButton.customView addGestureRecognizer:tap];          _a11yRightBarButton.isAccessibilityElement = YES;     _a11yRightBarButton.accessibilityTraits = UIAccessibilityTraitButton;     _a11yRightBarButton.accessibilityLabel = @\&quot;validation des actions\&quot;;          self.navigationItem.rightBarButtonItem = _a11yRightBarButton; &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;     var a11yRightBarButton: UIBarButtonItem?      let a11y = UILabel()     a11y.text = \&quot;OK\&quot;     a11y.sizeToFit()     a11y.isUserInteractionEnabled = true //Obligatoire pour reconnaître le 'tap gesture'.      a11yRightBarButton = UIBarButtonItem(customView: a11y)              let tap = UITapGestureRecognizer(target: self,                                      action: #selector(validateActions(info:)))     a11yRightBarButton?.customView?.addGestureRecognizer(tap)              a11yRightBarButton?.isAccessibilityElement = true     a11yRightBarButton?.accessibilityTraits = .button     a11yRightBarButton?.accessibilityLabel = \&quot;validation des actions\&quot;              navigationItem.rightBarButtonItem = a11yRightBarButton &lt;/code&gt;&lt;/pre&gt;  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;navBar-ReadingOrder\&quot; role=\&quot;tabpanel\&quot;&gt; Généralement, on n'a pas à toucher l'ordre de lecture &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; pour les éléments de la barre de navigation mais il arrive pourtant que cela soit nécessaire ⟹ exemple d'une page de tutoriel pour laquelle `RightBarItem` permet de passer à la page suivante. &lt;/br&gt;&lt;/br&gt;De façon à pouvoir illustrer une modification d'ordre de lecture impactant les éléments de la barre de navigation, nous allons supposer que le `RightBarItem` doit être le dernier élément de la page atteint à l'aide de balayages horizontaux successifs avec un seul doigt. &lt;/br&gt;&lt;/br&gt;La page étudiée comprendra : &lt;ul&gt;   &lt;li&gt;Une barre de navigation avec un chevron simple *(LeftBarItem)*, un titre et un bouton 'OK' *(RightBarItem)*.&lt;/li&gt;   &lt;li&gt;Cinq labels non consécutifs.&lt;/li&gt;   &lt;li&gt;Un bouton 'ACTION' centré en milieu de page.&lt;/li&gt; &lt;/ul&gt; &lt;img alt=\&quot;\&quot; style=\&quot;max-width: 200px; height: auto; \&quot; src=\&quot;./images/iOSdev/NavigationBar_4.png\&quot; /&gt; &lt;/br&gt;L'idée est de lire les éléments dans l'ordre suivant : LeftBarItem, titre, Label1, Label2, Label3, bouton 'ACTION', Label4, Label5 et RightBarItem. &lt;/br&gt;&lt;/br&gt;Dans un premier temps, on **personnalise les éléments de la barre de navigation** en s'appuyant sur les exemples de code fournis dans les autres onglets de cette section.   &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; @interface NavigationBarReadingOrder() {     UIBarButtonItem &amp;#42; _a11yLeftBarButton;     UIView &amp;#42; _a11yBarTitle;     UIBarButtonItem &amp;#42; _a11yRightBarButton; } @end   @implementation NavigationBarReadingOrder  - (void)viewDidLoad {     [super viewDidLoad];          [self setBackItem];     [self setTitle];     [self setNextPageBarButton]; }   - (void)setBackItem {          UIImage &amp;#42; img = [UIImage imageNamed:@\&quot;info_chevron\&quot;];     UIImageView &amp;#42; imgView = [[UIImageView alloc]initWithImage:img];     _a11yLeftBarButton = [[UIBarButtonItem alloc]initWithCustomView:imgView];          UITapGestureRecognizer &amp;#42; tap = [[UITapGestureRecognizer alloc]initWithTarget:self                                                                           action:@selector(goBackToThePreviousView:)];     [_a11yLeftBarButton.customView addGestureRecognizer:tap];          self.navigationItem.leftBarButtonItem = _a11yLeftBarButton; }   - (void)setTitle {          UILabel &amp;#42; a11yTitleLabel = [[UILabel alloc]init];     a11yTitleLabel.text = @\&quot;TITRE\&quot;;     [a11yTitleLabel sizeToFit];          self.navigationItem.titleView = a11yTitleLabel;     _a11yBarTitle = self.navigationItem.titleView; }   - (void)setNextPageBarButton {          UILabel &amp;#42; a11y = [[UILabel alloc]init];     a11y.text = @\&quot;OK\&quot;;     [a11y sizeToFit];     [a11y setUserInteractionEnabled:YES];          _a11yRightBarButton = [[UIBarButtonItem alloc]initWithCustomView:a11y];          UITapGestureRecognizer &amp;#42; tap = [[UITapGestureRecognizer alloc]initWithTarget:self                                                                           action:@selector(validateActions:)];     [_a11yRightBarButton.customView addGestureRecognizer:tap];          self.navigationItem.rightBarButtonItem = _a11yRightBarButton; } @end &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt; class OrderViewController: UIViewController {      var a11yLeftBarButton: UIBarButtonItem?     var a11yBarTitle: UIView?     var a11yRightBarButton: UIBarButtonItem?          override func viewDidLoad() {         super.viewDidLoad()                  setBackItem()         setTitle()         setNextPageBarButton()     }          private func setBackItem() {         let a11yLeftBarButtonImage = UIImage(named: \&quot;infoChevron\&quot;)         a11yLeftBarButton = UIBarButtonItem(customView: UIImageView(image: a11yLeftBarButtonImage))          let tap = UITapGestureRecognizer(target: self,                                          action: #selector(goBackToThePreviousView(info:)))         a11yLeftBarButton?.customView?.addGestureRecognizer(tap)          navigationItem.leftBarButtonItem = a11yLeftBarButton     }          private func setTitle() {                  let a11yTitleLabel = UILabel()         a11yTitleLabel.text = \&quot;TITRE\&quot;         a11yTitleLabel.sizeToFit()          navigationItem.titleView = a11yTitleLabel         a11yBarTitle = navigationItem.titleView     }          private func setNextPageBarButton() {              let a11y = UILabel()         a11y.text = \&quot;OK\&quot;         a11y.sizeToFit()         a11y.isUserInteractionEnabled = true          a11yRightBarButton = UIBarButtonItem(customView: a11y)                  let tap = UITapGestureRecognizer(target: self,                                          action: #selector(goToTheNextPage(info:)))         a11yRightBarButton?.customView?.addGestureRecognizer(tap)                  navigationItem.rightBarButtonItem = a11yRightBarButton     } } &lt;/code&gt;&lt;/pre&gt;  &lt;/br&gt;Ensuite, on **crée des éléments accessibles** pour la barre de navigation et on **spécifie l'ordre de lecture** &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; pour les éléments de la vue à l'aide de son tableau `accessibilityElements`. &lt;/br&gt;La vue et la barre de navigation étant deux conteneurs différents, on **cache les éléments de la barre de navigation à &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;** et on les transfère à la vue en les créant avec des coordonnées de focus appropriées.  &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; @interface NavigationBarReadingOrder() {     UIBarButtonItem &amp;#42; _a11yLeftBarButton;     UIView &amp;#42; _a11yBarTitle;     UIBarButtonItem &amp;#42; _a11yRightBarButton; }  @property (weak, nonatomic) IBOutlet UILabel &amp;#42; a11yLabel1; @property (weak, nonatomic) IBOutlet UILabel &amp;#42; a11yLabel2; @property (weak, nonatomic) IBOutlet UILabel &amp;#42; a11yLabel3; @property (weak, nonatomic) IBOutlet UILabel &amp;#42; a11yLabel4; @property (weak, nonatomic) IBOutlet UILabel &amp;#42; a11yLabel5; @property (weak, nonatomic) IBOutlet UIButton &amp;#42; a11yCentralButton;  @end   @implementation NavigationBarReadingOrder  - (void)viewDidAppear:(BOOL)animated {     [super viewDidAppear:animated];          [self createA11yElts];     self.navigationController.navigationBar.accessibilityElementsHidden = YES; }   - (void)createA11yElts {          UIView &amp;#42; navBarView = [[[_a11yBarTitle superview] superview] superview];          UIView &amp;#42; leftButtonView = [_a11yLeftBarButton valueForKey:@\&quot;view\&quot;];     UIAccessibilityElement * a11yLBB = [[UIAccessibilityElement alloc] initWithAccessibilityContainer:self.view];     a11yLBB.accessibilityFrameInContainerSpace = [navBarView convertRect:[[leftButtonView superview] superview].frame toView:self.view];     a11yLBB.accessibilityLabel = @\&quot;écran précédent\&quot;;     a11yLBB.accessibilityTraits = UIAccessibilityTraitButton;          UIAccessibilityElement &amp;#42; a11yTBV = [[UIAccessibilityElement alloc] initWithAccessibilityContainer:self.view];     a11yTBV.accessibilityFrameInContainerSpace = [navBarView convertRect:[self.navigationItem.titleView superview].frame toView:self.view];     a11yTBV.accessibilityLabel = @\&quot;vocalisation du titre différente de l'écrit\&quot;;     a11yTBV.accessibilityTraits = UIAccessibilityTraitHeader;      UIView &amp;#42; rightButtonView = [_a11yRightBarButton valueForKey:@\&quot;view\&quot;];     UIAccessibilityElement &amp;#42; a11yRBB = [[UIAccessibilityElement alloc] initWithAccessibilityContainer:self.view];     a11yRBB.accessibilityFrameInContainerSpace = [navBarView convertRect:[[rightButtonView superview] superview].frame toView:self.view];     a11yRBB.accessibilityLabel = @\&quot;écran suivant\&quot;;     a11yRBB.accessibilityTraits = UIAccessibilityTraitButton;          self.view.accessibilityElements = @[a11yLBB,                                         a11yTBV,                                         _a11yLabel1,                                         _a11yLabel2,                                         _a11yLabel3,                                         _a11yCentralButton,                                         _a11yLabel4,                                         _a11yLabel5,                                         a11yRBB]; } @end  &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt; @IBOutlet weak var a11yLabel1: UILabel! @IBOutlet weak var a11yLabel2: UILabel! @IBOutlet weak var a11yLabel3: UILabel! @IBOutlet weak var a11yLabel4: UILabel! @IBOutlet weak var a11yLabel5: UILabel! @IBOutlet weak var a11yCentralButton: UIButton!  override func viewDidAppear(&amp;#95; animated: Bool) {     super.viewDidAppear(animated)              createA11yElts()     navigationController?.navigationBar.accessibilityElementsHidden = true }      private func createA11yElts() {              let navBarView = a11yBarTitle?.superview?.superview?.superview      let leftButtonView = a11yLeftBarButton?.value(forKey: \&quot;view\&quot;) as? UIView     let a11yLBB = UIAccessibilityElement(accessibilityContainer: self.view!)     a11yLBB.accessibilityFrameInContainerSpace = navBarView!.convert((leftButtonView?.superview?.superview!.frame)!,to:self.view)     a11yLBB.accessibilityLabel = \&quot;écran précédent\&quot;     a11yLBB.accessibilityTraits = .button      let a11yTBV = UIAccessibilityElement(accessibilityContainer: self.view!)     a11yTBV.accessibilityFrameInContainerSpace = navBarView!.convert((navigationItem.titleView?.superview!.frame)!,to:self.view)     a11yTBV.accessibilityLabel = \&quot;vocalisation du titre différente de l'écrit\&quot;     a11yTBV.accessibilityTraits = .header      let rightButtonView = a11yRightBarButton?.value(forKey: \&quot;view\&quot;) as? UIView     let a11yRBB = UIAccessibilityElement(accessibilityContainer: self.view!)     a11yRBB.accessibilityFrameInContainerSpace = navBarView!.convert((rightButtonView?.superview?.superview!.frame)!,to:self.view)     a11yRBB.accessibilityLabel = \&quot;écran suivant\&quot;     a11yRBB.accessibilityTraits = .button      self.view.accessibilityElements = [a11yLBB,                                        a11yTBV,                                        a11yLabel1!,                                        a11yLabel2!,                                        a11yLabel3!,                                        a11yCentralButton!,                                        a11yLabel4!,                                        a11yLabel5!,                                        a11yRBB] } &lt;/code&gt;&lt;/pre&gt;      &lt;/br&gt;Le résultat correspond bien à l'ordre de lecture souhaité à l'aide de balayages successifs avec un doigt pour sélectionner les différents éléments accessibles. &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 1000px; height: auto; \&quot; src=\&quot;./images/iOSdev/NavigationBar_5.png\&quot; /&gt; &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 1000px; height: auto; \&quot; src=\&quot;./images/iOSdev/NavigationBar_6.png\&quot; /&gt; &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;navBar-Link\&quot; role=\&quot;tabpanel\&quot;&gt; - [UINavigationBar](https://developer.apple.com/documentation/uikit/uinavigationbar) &lt;/div&gt; &lt;/div&gt; &lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios-dev.html#vocalisation-synthetisee"] = "Vocalisation synthétisée";
index.add({
    url: "criteria-ios-dev.html#vocalisation-synthetisee",
    title: "Vocalisation synthétisée",    
    body: "## Vocalisation synthétisée &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#speechSyn-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#speechSyn-Details\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Fonctionnement&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#speechSyn-Example\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Exemple&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#speechSyn-Phonemes\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Phonèmes&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#speechSyn-Links\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Liens&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;speechSyn-Description\&quot;      role=\&quot;tabpanel\&quot;&gt; L'utilisation d'une voix synthétisée peut se faire dans [bon nombre de cas](./criteria-ios-wwdc-18236.html#Uses) non nécessairement liés à l'accessibilité mais, dans ce cadre, il est important de noter que **cette fonctionnalité ne remplace absolument pas &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;** mais peut judicieusement compléter son implémentation selon les configurations rencontrées *(la voix synthétisée peut chevaucher celle du lecteur d'écran)*.&lt;/br&gt;   &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;speechSyn-Details\&quot; role=\&quot;tabpanel\&quot;&gt; Très peu d'éléments sont nécessaires pour créer rapidement une vocalisation synthétisée : &lt;ul&gt;   &lt;li&gt;**Le texte à fournir** : se présente sous forme d'instance `AVSpeechUtterance` comprenant une propriété `voice` typée `AVSpeechSynthesisVoice`.&lt;/li&gt;   &lt;li&gt;**Le synthétiseur** : instance `AVSpeechSynthesizer` qui se charge de traiter le texte à fournir en assurant un contrôle d'événements grâce au protocole `AVSpeechSynthesizerDelegate`.&lt;/li&gt; &lt;/ul&gt; &lt;img alt=\&quot;\&quot; style=\&quot;max-width: 800px; height: auto; \&quot; src=\&quot;./images/iOSdev/SpeechSynthesizer.png\&quot; /&gt; &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;speechSyn-Example\&quot; role=\&quot;tabpanel\&quot;&gt; Pour assurer la vocalisation complète d'instances `AVSpeechUtterance`, il est [primordial](./criteria-ios-wwdc-18236.html#Basics) de **conserver l'instance `AVSpeechSynthesizer` jusqu'à la fin de l'ensemble de la vocalisation**. &lt;/br&gt;&lt;/br&gt;L'exemple suivant va permettre de définir le débit vocal, la hauteur tonale ainsi que le volume de la voix pour chaque type de texte passé au synthétiseur vocal tout en permettant aussi de : &lt;ul&gt;   &lt;li&gt;Mettre en avant le mot vocalisé grâce au protocole `AVSpeechSynthesizerDelegate`.&lt;/li&gt;   &lt;li&gt;Réaliser une pause et repartir de l'endroit d'où l'on vient avec des méthodes d'instance `AVSpeechSynthesizer`.&lt;/li&gt; &lt;/ul&gt;  &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; @interface SpeechSynthesis()  &lt;AVSpeechSynthesizerDelegate&gt; {      NSMutableArray * playerQueue;     AVSpeechSynthesizer * synthesizer;     __weak IBOutlet UILabel * textLabel; } @end  NS_ASSUME_NONNULL_BEGIN @implementation SpeechSynthesis  - (void)viewDidLoad {     [super viewDidLoad];          playerQueue = [[NSMutableArray alloc] init];     synthesizer = [[AVSpeechSynthesizer alloc] init]; }  - (void)viewDidAppear:(BOOL)animated {     [super viewDidAppear:animated];          for (int i = 1 ; i &lt; 11 ; i++) {               NSString * stringNbPrefix = @\&quot;phrase numéro \&quot;;         NSString * stringNbSuffix = @\&quot; de la voix synthétisée.\&quot;;         NSString * stringNb = [NSString stringWithFormat:@\&quot;%@%i%@\&quot;, stringNbPrefix, i, stringNbSuffix];                  AVSpeechUtterance * utterance = [[AVSpeechUtterance alloc] initWithString:stringNb];         utterance.rate = AVSpeechUtteranceDefaultSpeechRate;     //débit vocal         utterance.pitchMultiplier = 1.0;     //hauteur tonale         utterance.volume = 1.0;      //volume de la voix                  [playerQueue addObject:utterance];     }          synthesizer.delegate = self;          for (AVSpeechUtterance * utterance in playerQueue) {         [synthesizer speakUtterance:utterance];     } }  //Méthode du protocole AVSpeechSynthesizerDelegate pour déterminer visuellement le mot vocalisé. - (void)speechSynthesizer:(AVSpeechSynthesizer *)synthesizer willSpeakRangeOfSpeechString:(NSRange)characterRange                 utterance:(AVSpeechUtterance *)utterance {          NSMutableAttributedString * attributedString = [[NSMutableAttributedString alloc] initWithString:utterance.speechString];          [attributedString addAttribute:NSFontAttributeName                              value:[UIFont systemFontOfSize:19.0]                              range:characterRange];          NSAttributedString * subString = [attributedString attributedSubstringFromRange:characterRange];     textLabel.attributedText = attributedString;          NSString * output = [NSString stringWithFormat:@\&quot;%@%@\&quot;, @\&quot;mot : \&quot;, subString.string];     NSLog(@\&quot;%@\&quot;, output); }  - (IBAction)pauseButton:(UIButton *)sender {          if (synthesizer.isSpeaking == TRUE) {         if ([synthesizer pauseSpeakingAtBoundary:AVSpeechBoundaryImmediate] == TRUE) {             NSLog(@\&quot;PAUSE\&quot;);         } else {             NSLog(@\&quot;P.R.O.B.L.È.M.E. avec la PAUSE.\&quot;);         }     } }  - (IBAction)resumeButton:(UIButton *)sender {          if (synthesizer.isPaused == TRUE) {         if ([synthesizer continueSpeaking] == TRUE) {             NSLog(@\&quot;REPRISE\&quot;);         } else {             NSLog(@\&quot;P.R.O.B.L.È.M.E. avec la REPRISE.\&quot;);         }     } } @end &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt; class SpeechSynthesis: UIViewController, AVSpeechSynthesizerDelegate {          @IBOutlet weak var textLabel: UILabel!          var synthesizer = AVSpeechSynthesizer()     var playQueue = [AVSpeechUtterance]()               override func viewDidAppear(_ animated: Bool) {         super.viewDidAppear(animated)                  for i in 1...10 {                          let stringNb = \&quot;phrase numéro \&quot; + String(i) + \&quot; de la voix synthétisée.\&quot;                          let utterance = AVSpeechUtterance(string: stringNb)             utterance.rate = AVSpeechUtteranceDefaultSpeechRate     //débit vocal             utterance.pitchMultiplier = 1.0     //hauteur tonale             utterance.volume = 1.0      //volume de la voix                          playQueue.append(utterance)         }          synthesizer.delegate = self          for utterance in playQueue {             synthesizer.speak(utterance)         }     }          //Méthode du protocole AVSpeechSynthesizerDelegate pour déterminer visuellement le mot vocalisé.     func speechSynthesizer(_ synthesizer: AVSpeechSynthesizer,                            willSpeakRangeOfSpeechString characterRange: NSRange,                            utterance: AVSpeechUtterance) {          let attributedString = NSMutableAttributedString(string: utterance.speechString)         attributedString.addAttribute(.font,                                       value: UIFont.boldSystemFont(ofSize: 19),                                       range: characterRange)          textLabel.attributedText = attributedString          let subString = attributedString.attributedSubstring(from: characterRange)         print(\&quot;mot : \(subString.string)\&quot;)     }               @IBAction func pauseAction(_ sender: UIButton) {              if (synthesizer.isSpeaking == true) {             if (synthesizer.pauseSpeaking(at: .immediate) == true) {                 print(\&quot;PAUSE\&quot;)             } else {                 print(\&quot;P.R.O.B.L.È.M.E. avec la PAUSE.\&quot;)             }         }     }               @IBAction func resumeAction(_ sender: UIButton) {               if (synthesizer.isPaused == true) {             if (synthesizer.continueSpeaking() == true) {                 print(\&quot;REPRISE\&quot;)             } else {                 print(\&quot;P.R.O.B.L.È.M.E. avec la REPRISE.\&quot;)             }         }     } } &lt;/code&gt;&lt;/pre&gt;  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;speechSyn-Phonemes\&quot; role=\&quot;tabpanel\&quot;&gt; Lorsque des mots ont une consonance bien particulière ou que l'on souhaite réaliser une épellation spécifique, l'utilisation de la phonétique est fortement recommandée pour s'assurer du résultat.  &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt;     NSMutableAttributedString &amp;#42; attrStr = [[NSMutableAttributedString alloc] initWithString:@\&quot;blablabla\&quot;                                                                               attributes:@{AVSpeechSynthesisIPANotationAttribute:@\&quot;mɔ̃.daj.fɔ.nə.fɔ̃.ksjɔ.nə.paʀ.fɛ.tə.ˈmɑ̃\&quot;}];          AVSpeechUtterance &amp;#42; utterance = [[AVSpeechUtterance alloc] initWithAttributedString:attrStr];          AVSpeechSynthesizer &amp;#42; synthesizer = [[AVSpeechSynthesizer alloc] init];     [synthesizer speakUtterance:utterance]; &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt;         let pronunciationKey = NSAttributedString.Key(rawValue: AVSpeechSynthesisIPANotationAttribute)                  let attrStr = NSMutableAttributedString(string: \&quot;blablabla\&quot;,                                                 attributes: [pronunciationKey: \&quot;mɔ̃.daj.fɔ.nə.fɔ̃.ksjɔ.nə.paʀ.fɛ.tə.ˈmɑ̃\&quot;])          let utterance = AVSpeechUtterance(attributedString: attrStr)          let synthesizer = AVSpeechSynthesizer()         synthesizer.speak(utterance) &lt;/code&gt;&lt;/pre&gt;  La génération de cette phonétique peut se faire en passant par les réglages du terminal. &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#Phonemes-iOS13\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;iOS 13&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#Phonemes-iOS12\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;iOS 12&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;Phonemes-iOS13\&quot;      role=\&quot;tabpanel\&quot;&gt; &lt;img alt=\&quot;\&quot; style=\&quot;max-width: 850px; height: auto; \&quot; src=\&quot;./images/iOSdev/SpeechSynthesizerEx_iOS13_1.png\&quot; /&gt; &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot;       id=\&quot;Phonemes-iOS12\&quot;       role=\&quot;tabpanel\&quot; &gt; &lt;img alt=\&quot;\&quot; style=\&quot;max-width: 1100px; height: auto; \&quot; src=\&quot;./images/iOSdev/SpeechSynthesizerEx_1.png\&quot; /&gt; &lt;/div&gt;&lt;/div&gt;  &lt;/br&gt;Une fois le menu `Prononciations` activé... &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 1100px; height: auto; \&quot; src=\&quot;./images/iOSdev/SpeechSynthesizerEx_2.png\&quot; /&gt;&lt;/br&gt;&lt;/br&gt; &lt;ol&gt;   &lt;li&gt;Sélectionner l'icône '**+**' pour ajouter une nouvelle phonétique.&lt;/li&gt;   &lt;li&gt;Donner un nom à la nouvelle entrée de façon à la retrouver plus facilement ultérieurement.&lt;/li&gt;   &lt;li&gt;Taper sur l'icône **micro**.&lt;/li&gt;   &lt;li&gt;Vocaliser la phrase ou le mot souhaité.&lt;/li&gt;   &lt;li&gt;Écouter les différentes propositions faites par le système.&lt;/li&gt;   &lt;li&gt;Valider le choix à l'aide du bouton '**OK**' ou annuler pour recommencer l'opération.&lt;/li&gt;   &lt;li&gt;Sélectionner le bouton de retour pour valider la nouvelle phonétique créée.&lt;/li&gt;   &lt;li&gt;Retrouver l'ensemble des éléments ainsi générés sur la page `Prononciations`.&lt;/li&gt; &lt;/ol&gt;  &lt;img alt=\&quot;\&quot; style=\&quot;max-width: 1100px; height: auto; \&quot; src=\&quot;./images/iOSdev/SpeechSynthesizerEx_3.png\&quot;/&gt; &lt;/br&gt;Une des possibilités pour copier cette expression dans le code est de passer par l'**application locale `Notes`** dans laquelle on copiera la phonétique pour la synchroniser avec l'**application iCloud `Notes`** d'où on pourra aisément transférer l'information désirée au sein de `Xcode`.&lt;/br&gt;&lt;/br&gt; &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;speechSyn-Links\&quot; role=\&quot;tabpanel\&quot;&gt; &lt;ul&gt;   &lt;li&gt;[AVSpeechSynthesisVoice](https://developer.apple.com/documentation/avfoundation/avspeechsynthesisvoice)&lt;/li&gt;   &lt;li&gt;[AVSpeechSynthesizer](https://developer.apple.com/documentation/avfoundation/avspeechsynthesizer)&lt;/li&gt;   &lt;li&gt;[AVSpeechSynthesizerDelegate](https://developer.apple.com/documentation/avfoundation/avspeechsynthesizerdelegate)&lt;/li&gt;   &lt;li&gt;[AVSpeechUtterance](https://developer.apple.com/documentation/avfoundation/avspeechutterance)&lt;/li&gt;   &lt;li&gt;[WWDC 2018 : Utiliser une voix synthétisée avec AVSpeechSynthesizer](./criteria-ios-wwdc-18236.html) &lt;/li&gt; &lt;/ul&gt;  &lt;/div&gt; &lt;/div&gt;  L'ensemble des fonctionnalités proposées par le synthétiseur vocal sont présentées dans une [vidéo WWDC](./criteria-ios-wwdc-18236.html) *(Utiliser une voix synthétisée avec AVSpeechSynthesizer)* parfaitement résumée dans la partie WWDC de ce site. &lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios-dev.html#retour-haptique"] = "Retour haptique";
index.add({
    url: "criteria-ios-dev.html#retour-haptique",
    title: "Retour haptique",    
    body: "## Retour haptique &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#haptic-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#haptic-Example\&quot;            id=\&quot;haptic-Example_tab\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Exemple&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#haptic-Links\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Lien&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;haptic-Description\&quot;      role=\&quot;tabpanel\&quot;&gt; Le retour haptique permet d'informer par vibration tactile l'utilisateur de l'état final *(success, warning, failure...)* d'une action ou d'un événement sur un élément graphique par exemple. &lt;/br&gt;Les différents types d'instances de générateurs de retour haptique (**UIImpactFeedbackGenerator**, **UISelectionFeedbackGenerator** et **UINotificationFeedbackGenerator**) sont décrits en détails dans la &lt;a href=\&quot;https://developer.apple.com/documentation/uikit/uifeedbackgenerator\&quot; style=\&quot;text-decoration: underline;\&quot;&gt;documentation Apple&lt;/a&gt; et leur utilisation dans l'onglet &lt;a role=\&quot;button\&quot; style=\&quot;text-decoration: underline;\&quot; onclick=\&quot;$('#haptic-Example_tab').trigger('click');\&quot;&gt;Exemple&lt;/a&gt; de cette rubrique.&lt;/br&gt;  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;haptic-Example\&quot; role=\&quot;tabpanel\&quot;&gt; L'exemple ci-dessous permet à la fois de tester et de comprendre l'implémentation des différents types de retour haptique mis à disposition.&lt;/br&gt;  &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; NS_ASSUME_NONNULL_BEGIN @implementation HapticFeedback  int i = 0;  - (IBAction)myButton:(UIButton *)sender {          i += 1;          switch (i) {         case 1: {             UINotificationFeedbackGenerator * generator = [[UINotificationFeedbackGenerator alloc] init];             [generator notificationOccurred:UINotificationFeedbackTypeError];             break;         }         case 2: {             UINotificationFeedbackGenerator * generator = [[UINotificationFeedbackGenerator alloc] init];             [generator notificationOccurred:UINotificationFeedbackTypeSuccess];             break;         }         case 3: {             UINotificationFeedbackGenerator * generator = [[UINotificationFeedbackGenerator alloc] init];             [generator notificationOccurred:UINotificationFeedbackTypeWarning];             break;         }         case 4: {             UIImpactFeedbackGenerator * generator = [[UIImpactFeedbackGenerator alloc] initWithStyle:UIImpactFeedbackStyleLight];             [generator impactOccurred];             break;         }         case 5: {             UIImpactFeedbackGenerator * generator = [[UIImpactFeedbackGenerator alloc] initWithStyle:UIImpactFeedbackStyleMedium];             [generator impactOccurred];             break;         }         case 6: {             UIImpactFeedbackGenerator * generator = [[UIImpactFeedbackGenerator alloc] initWithStyle:UIImpactFeedbackStyleHeavy];             [generator impactOccurred];             break;         }         case 7: {             UIImpactFeedbackGenerator * generator = [[UIImpactFeedbackGenerator alloc] initWithStyle:UIImpactFeedbackStyleSoft];             [generator impactOccurred];             break;         }         case 8: {             UIImpactFeedbackGenerator * generator = [[UIImpactFeedbackGenerator alloc] initWithStyle:UIImpactFeedbackStyleRigid];             [generator impactOccurred];             break;         }         default: {             i = 0;             UISelectionFeedbackGenerator * generator = [[UISelectionFeedbackGenerator alloc] init];             [generator selectionChanged];             break;         }     } } @end NS_ASSUME_NONNULL_END &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt; class HapticViewController: UIViewController {      var i = 0      @IBAction func tapButton(_ sender: UIButton) {              i += 1                  switch i {         case 1:             let generator = UINotificationFeedbackGenerator()             generator.notificationOccurred(.error)          case 2:             let generator = UINotificationFeedbackGenerator()             generator.notificationOccurred(.success)          case 3:             let generator = UINotificationFeedbackGenerator()             generator.notificationOccurred(.warning)          case 4:             let generator = UIImpactFeedbackGenerator(style: .light)             generator.impactOccurred()          case 5:             let generator = UIImpactFeedbackGenerator(style: .medium)             generator.impactOccurred()          case 6:             let generator = UIImpactFeedbackGenerator(style: .heavy)             generator.impactOccurred()                  case 7:             let generator = UIImpactFeedbackGenerator(style: .soft)             generator.impactOccurred()                      case 8:             let generator = UIImpactFeedbackGenerator(style: .rigid)             generator.impactOccurred()                      default:             let generator = UISelectionFeedbackGenerator()             generator.selectionChanged()             i = 0         }     } } &lt;/code&gt;&lt;/pre&gt;  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;haptic-Links\&quot; role=\&quot;tabpanel\&quot;&gt;      - [UIFeedbackGenerator](https://developer.apple.com/documentation/uikit/uifeedbackgenerator)  &lt;/div&gt; &lt;/div&gt; &lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios-dev.html#controle-de-selection"] = "Contrôle de sélection";
index.add({
    url: "criteria-ios-dev.html#controle-de-selection",
    title: "Contrôle de sélection",    
    body: "## Contrôle de sélection &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#switchCtrl-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#switchCtrl-Custom\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Personnalisation du mode élément&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#switchCtrl-Link\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Lien&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;switchCtrl-Description\&quot;      role=\&quot;tabpanel\&quot;&gt; L'utilisation du contrôle de sélection s'articule autour du mode point et du mode élément définis ci-dessous. &lt;/br&gt;&lt;img alt=\&quot;modes point et élément pour le contrôle de sélection\&quot; style=\&quot;max-width: 700px; height: auto; \&quot; src=\&quot;./images/iOSdev/ControlesDeSelection.png\&quot; /&gt; &lt;/br&gt;La sélection des éléments avec le mode élément fonctionne globalement bien quand les éléments proposés sont natifs et que l'application n'est pas trop compliquée graphiquement. &lt;/br&gt;Il peut très bien arriver que ce mode de sélection ne suive pas la logique souhaitée et ne propose pas les éléments dans l'ordre désiré. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;switchCtrl-Custom\&quot; role=\&quot;tabpanel\&quot;&gt; La structure utilisée pour l'exemple est présentée ci-dessous grâce à l'&lt;span lang=\&quot;en\&quot;&gt;InterfaceBuilder&lt;/span&gt; de Xcode : &lt;/br&gt;&lt;img alt=\&quot;exemple de l'interface graphique de xcode\&quot; style=\&quot;max-width: 700px; height: auto; \&quot; src=\&quot;./images/iOSdev/ControleDeSelectionIB_1.png\&quot; /&gt; &lt;/br&gt;Afin de personnaliser la sélection de ces éléments, on souhaite : - Créer 2 groupes {Test_1 + Test_2 ; Btn 5 + Btn 6} sélectionnables en mode élément. - Avoir uniquement les éléments restants Btn 1 et Btn 2 accessibles séparément.  &lt;pre&gt;&lt;code class=\&quot;objective-c\&quot;&gt; @interface ViewController ()  @property (weak, nonatomic) IBOutlet UIStackView * btnsParentView; @property (weak, nonatomic) IBOutlet UIButton * btn1; @property (weak, nonatomic) IBOutlet UIButton * btn2; @property (weak, nonatomic) IBOutlet UIButton * btn5; @property (weak, nonatomic) IBOutlet UIButton * btn6;  @end   @implementation ViewController - (void)viewDidAppear:(BOOL)animated {     [super viewDidAppear:animated];          //Création du premier groupe 'testWrap' en COMBINANT les boutons 'Test_1' et 'Test_2'.     UIButton * testOneButton = [self.view viewWithTag:1];     UIButton * testTwoButton = [self.view viewWithTag:2];     CGRect testWrapFrame = CGRectUnion(testOneButton.frame, testTwoButton.frame);          UIAccessibilityElement * testWrap = [[UIAccessibilityElement alloc]initWithAccessibilityContainer:self.view];          testWrap.isAccessibilityElement = false;     testWrap.accessibilityFrame = testWrapFrame;     testWrap.accessibilityNavigationStyle = UIAccessibilityNavigationStyleCombined; //Property specifique au contrôle de sélection.     testWrap.accessibilityElements = @[testOneButton, testTwoButton];               //Création du second groupe 'secondGroup' en SÉPARANT les boutons 1 et 2.     CGRect secondGroupRect = CGRectUnion(_btn1.frame, _btn2.frame);     CGRect secondGroupFrame = [_btnsParentView convertRect:secondGroupRect                                                     toView:self.view];     UIAccessibilityElement * secondGroup = [[UIAccessibilityElement alloc]initWithAccessibilityContainer:_btnsParentView];          secondGroup.isAccessibilityElement = false;     secondGroup.accessibilityFrame = secondGroupFrame;     secondGroup.accessibilityNavigationStyle = UIAccessibilityNavigationStyleSeparate;     secondGroup.accessibilityElements = @[_btn1, _btn2];           //Création du troisième groupe 'thirdGroup' en COMBINANT les boutons 5 et 6.     CGRect thirdGroupRect = CGRectUnion(_btn1.frame, _btn2.frame);     CGRect thirdGroupFrame = [_btnsParentView convertRect:thirdGroupRect                                                    toView:self.view];     UIAccessibilityElement * thirdGroup = [[UIAccessibilityElement alloc]initWithAccessibilityContainer:_btnsParentView];          thirdGroup.isAccessibilityElement = false;     thirdGroup.accessibilityFrame = thirdGroupFrame;     thirdGroup.accessibilityNavigationStyle = UIAccessibilityNavigationStyleCombined;     thirdGroup.accessibilityElements = @[_btn5, _btn6];               self.view.accessibilityElements = @[testWrap,                                          secondGroup,                                          thirdGroup]; } @end &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=\&quot;swift\&quot;&gt; class ViewController: UIViewController {          @IBOutlet weak var btnsParentView: UIStackView!     @IBOutlet weak var btn1: UIButton!     @IBOutlet weak var btn2: UIButton!     @IBOutlet weak var btn5: UIButton!     @IBOutlet weak var btn6: UIButton!               override func viewDidAppear(_ animated: Bool) {         super.viewDidAppear(animated)                  //Création du premier groupe 'testWrap' en COMBINANT les boutons 'Test_1' et 'Test_2'.         let testOneButton = self.view.viewWithTag(1) as? UIButton         let testTwoButton = self.view.viewWithTag(2) as? UIButton         let testWrapFrame = testOneButton?.frame.union((testTwoButton?.frame)!)          let testWrap = UIAccessibilityElement(accessibilityContainer: self.view!)          testWrap.isAccessibilityElement = false         testWrap.accessibilityFrame = testWrapFrame!         testWrap.accessibilityNavigationStyle = .combined   //Property specifique au contrôle de sélection.         testWrap.accessibilityElements = [testOneButton!, testTwoButton!]           //Création du second groupe 'secondGroup' en SÉPARANT les boutons 1 et 2.         let secondGroupRect = btn1.frame.union(btn2.frame)         let secondGroupFrame = btnsParentView.convert(secondGroupRect,                                                       to: self.view)         let secondGroup = UIAccessibilityElement(accessibilityContainer: btnsParentView!)          secondGroup.isAccessibilityElement = false         secondGroup.accessibilityFrame = secondGroupFrame         secondGroup.accessibilityNavigationStyle = .separate         secondGroup.accessibilityElements = [btn1!, btn2!]           //Création du troisième groupe 'thirdGroup' en COMBINANT les boutons 5 et 6.         let thirdGroupRect = btn5.frame.union(btn6.frame)         let thirdGroupFrame = btnsParentView.convert(thirdGroupRect,                                                      to: self.view)         let thirdGroup = UIAccessibilityElement(accessibilityContainer: btnsParentView!)          thirdGroup.isAccessibilityElement = false         thirdGroup.accessibilityFrame = thirdGroupFrame         thirdGroup.accessibilityNavigationStyle = .combined         thirdGroup.accessibilityElements = [btn5!, btn6!]           self.view.accessibilityElements = [testWrap,                                            secondGroup,                                             thirdGroup]     } } &lt;/code&gt;&lt;/pre&gt;  &lt;/br&gt;Le rendu de ce code est visualisable ci-dessous : &lt;/br&gt;&lt;img alt=\&quot;rendu final avec le code implémenté\&quot; style=\&quot;max-width: 1100px; height: auto; \&quot; src=\&quot;./images/iOSdev/ControleDeSelection_1.png\&quot; /&gt; &lt;/br&gt;Les groupes créés permettent d'accéder directement aux éléments qu'ils contiennent dès qu'ils sont activés.  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;switchCtrl-Link\&quot; role=\&quot;tabpanel\&quot;&gt; - [`accessibilityNavigationStyle`](https://developer.apple.com/documentation/objectivec/nsobject/1615200-accessibilitynavigationstyle) &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios-dev.html#vocalisation-du-nom-de-lapplication"] = "Vocalisation du nom de l'application";
index.add({
    url: "criteria-ios-dev.html#vocalisation-du-nom-de-lapplication",
    title: "Vocalisation du nom de l'application",    
    body: "## Vocalisation du nom de l'application &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#appName-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#appName-Example\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Exemple&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#appName-Link\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Lien&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;appName-Description\&quot;      role=\&quot;tabpanel\&quot;&gt; Même s'il est possible à un utilisateur de personnaliser manuellement la vocalisation du nom d'une application via une &lt;a href=\&quot;./lecteur-ecran-voiceover.html#CustomLabel\&quot; style=\&quot;text-decoration: underline;\&quot;&gt;gestuelle spécifique &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;&lt;/a&gt;, cette manipulation est aussi réalisable en programmation. &lt;/br&gt;&lt;/br&gt;L'idée est de pouvoir vocaliser proprement les sigles présents sur les icônes applicatives qui sont très expressifs visuellement mais textuellement incompréhensibles. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;appName-Example\&quot; role=\&quot;tabpanel\&quot;&gt; **CFBundleSpokenName** est la clé permettant d'adapter la vocalisation du texte définissant le nom d'une application qui, dans un cadre d'internationalisation, peut prendre différentes valeurs selon les langues visées. &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 750px; height: auto; \&quot; src=\&quot;./images/iOSdev/AppName_1.png\&quot; /&gt; &lt;/br&gt;On passe alors d'un sigle incompréhensible avec une icône éventuellement plus parlante à une expression parfaitement compréhensible par un utilisateur pour lequel l'icône n'est peut-être pas du tout accessible. &lt;/br&gt;&lt;img alt=\&quot;\&quot; style=\&quot;max-width: 600px; height: auto; \&quot; src=\&quot;./images/iOSdev/AppName_2.png\&quot; /&gt;  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;appName-Link\&quot; role=\&quot;tabpanel\&quot;&gt; - [`CFBundleSpokenName`](https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundlespokenname) &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt; &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["criteria-flutter.html#laccessibilite-avec-flutter"] = "L'accessibilité avec Flutter";
index.add({
    url: "criteria-flutter.html#laccessibilite-avec-flutter",
    title: "L'accessibilité avec Flutter",    
    body: "# L'accessibilité avec Flutter  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;Flutter\&quot;}]); });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-flutter\&quot;&gt;&lt;/span&gt;  Si vous développez des applications avec Flutter, sachez qu'il est possible de produire des applications accessibles. Le framework offre notamment la gestion des lecteurs d'écran ainsi que l'agrandissement de la taille des textes.  "
});

documentTitles["criteria-flutter.html#ressources"] = "Ressources";
index.add({
    url: "criteria-flutter.html#ressources",
    title: "Ressources",    
    body: "## Ressources  Pour obtenir des informations sur le sujet, commencez par [la page officielle sur l'accessibilité](https://flutter.dev/docs/development/accessibility-and-localization/accessibility) qui ne reflète pour le moment pas toute l'étendue des possibilités.  Vous pouvez également visionner les vidéos suivantes qui permettront d'approfondir certaines notions : - &lt;a href=\&quot;https://www.youtube.com/watch?v=bWbBgbmAdQs\&quot; lang=\&quot;en\&quot;&gt;Building in accessibility with Flutter (Flutter Interact '19)&lt;/a&gt; - &lt;a href=\&quot;https://youtu.be/YSULAJf6R6M?t=584\&quot; lang=\&quot;en\&quot;&gt;Beyond Mobile: Material Design, Adaptable UIs, and Flutter (Google I/O'19)&lt;/a&gt; - [Ok Flutter elle est où la rampe d'accès - Cédric Creusot](https://www.youtube.com/watch?v=EqInAYQMYT8)  &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["criteria-android-conception.html#les-criteres-incontournables-sous-android-pour-la-conception"] = "Les critères incontournables sous Android pour la conception";
index.add({
    url: "criteria-android-conception.html#les-criteres-incontournables-sous-android-pour-la-conception",
    title: "Les critères incontournables sous Android pour la conception",    
    body: "# Les critères incontournables sous Android pour la conception  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;Android\&quot;, \&quot;url\&quot;: \&quot;./criteria-android.html\&quot;},         {\&quot;label\&quot;:\&quot;Critères de conception\&quot;} 	]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Critères de conception\&quot;,\&quot;url\&quot;:\&quot;criteria-android-conception.html\&quot;, \&quot;expanded\&quot;: true},          {\&quot;label\&quot;:\&quot;Guide pour les développeurs\&quot;,\&quot;url\&quot;:\&quot;criteria-android-dev.html\&quot;},         {\&quot;label\&quot;:\&quot;TalkBack\&quot;,\&quot;url\&quot;:\&quot;screen-reader-talkback.html\&quot;}     ]);         });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-android\&quot;&gt;&lt;/span&gt;   Ce guide a pour objectif de présenter les différents critères d’accessibilité à respecter pour obtenir une application Android accessible. Chaque critère est présenté en expliquant pour qui ce critère est important, quand on peut le mettre en place, pourquoi il est important et la règle d’accessibilité qui en découle. Les critères sont explicités par des exemples de code et des captures d’exemples réels. Nous vous invitons à installer l’application [mDAN](./mdan.html) pour obtenir des exemples fonctionnels avec &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;, le lecteur d’écran d’Android, et d’autres outils d’assistance. Pour plus d’information sur l’outil (comment l’activer, comment s’en servir…) nous vous invitons à vous référer à la [section concernant &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;](./screen-reader-talkback.html).  Pour le web, le niveau d’accessibilité demandé à toute interface &lt;abbr&gt;HTML&lt;/abbr&gt; par le groupe Orange est **le respect des critères du niveau AA des &lt;span lang=\&quot;en\&quot;&gt;Web Content Accessibility Guidelines&lt;/span&gt; (&lt;abbr&gt;WCAG&lt;/abbr&gt;) 2.1, sans point bloquant** suite à un test utilisateur d’aide technique pour les principaux scénarios d’utilisation des fonctionnalités du site ou de l’application. Pour les applications mobiles natives, une transposition de ces critères et le respect des recommandations de la plateforme Android en terme d’accessibilité est demandé, voir ces [recommandations](https://developer.android.com/guide/topics/ui/accessibility/). L’objet de ces pages étant d’en faire un « digest » sans s’y substituer.   "
});

documentTitles["criteria-android-conception.html#images"] = "Images";
index.add({
    url: "criteria-android-conception.html#images",
    title: "Images",    
    body: "## Images **Cible&amp;nbsp;:** tout le monde (sur réseau à faible bande passante…) et en particulier les personnes déficientes visuelles.   **Quand&amp;nbsp;:** lors de la conception et pendant le développement.  **Description&amp;nbsp;:**  Les images sont très souvent utilisées pour transmettre de nombreuses informations. Comme le dit l’adage, une image vaut mille mots. Les non-voyants ne pouvant voir les images, il est important que celles-ci possèdent une alternative qui donne toutes les informations portées par l’image.   Dans le cas d’une image contenant du texte, l’alternative sera ledit texte. Dans le cas d’une image qui apporte des informations sous la forme d’un graphe, dessin ou autre, l’alternative devra contenir toutes les informations nécessaires présentes dans l’image.  Certaines images sont utilisées à des fins décoratives. Ces images ne nécessitent pas d’alternative. Par défaut sous Android, les images ne sont pas vocalisées par le lecteur d’écran &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;.   Les illustrations de l’application sont également considérées comme des images décoratives. La règle est donc la même&amp;nbsp;: il n’y a pas d’alternative textuelle à ajouter.   Les icônes sont, a contrario, largement utilisées en tant que bouton pour des fonctionnalités diverses. Elles ont donc besoin d’alternatives textuelles pertinentes.  L’alternative d’une image est renseignée via l’attribut `contentDescription` (disponible pour tout élément héritant de `View`).  **À vérifier&amp;nbsp;:**  - les images portant de l’information restituent cette information à travers leur alternative textuelle, - les images décoratives n’ont pas d’alternative textuelle.  **Objectif utilisateur&amp;nbsp;:**  Permettre l’accès à l’information incluse dans une image pour des utilisateurs qui n’y ont pas accès. Point bloquant&amp;nbsp;: une image sans description textuelle est inexploitable par des personnes ayant des déficiences visuelles.  **Exemples&amp;nbsp;:**  &lt;img src=\&quot;./images/image_ex.png\&quot; alt=\&quot;exemple complet d’image décorative et d’icône informative\&quot; width=\&quot;400\&quot;&gt;  En décomposant l’image&amp;nbsp;: - &lt;img src=\&quot;./images/montagnard.png\&quot; alt=\&quot;exemple d’image décorative\&quot; width=\&quot;256\&quot;&gt; pas de `contentDescription` - &lt;img src=\&quot;./images/settings.png\&quot; alt=\&quot;exemple d’icône informative - paramètres\&quot; width=\&quot;48\&quot;&gt; `imageView.setContentDescription(\&quot;paramètres\&quot;)` - &lt;img src=\&quot;./images/edit.png\&quot; alt=\&quot;exemple d’icône informative - édition\&quot; width=\&quot;48\&quot;&gt; `imageView.setContentDescription(\&quot;éditer le nom de l’image\&quot;)`  "
});

documentTitles["criteria-android-conception.html#couleurs"] = "Couleurs";
index.add({
    url: "criteria-android-conception.html#couleurs",
    title: "Couleurs",    
    body: "## Couleurs  **Cible&amp;nbsp;:** tout le monde (soleil sur l’écran, impression noir et blanc…) et en particulier les personnes malvoyantes, les seniors et les personnes avec des problèmes de vision (daltonisme, vision des contrastes, etc.)   **Quand&amp;nbsp;:**  dès la phase de conception et lors du développement.  **Description&amp;nbsp;:**  Les couleurs jouent un rôle très important dans la transmission des informations. On associe certaines couleurs à des concepts ou à des sensations, mais il ne faut pas oublier qu’une partie de la population ne distingue pas correctement les couleurs.  **À vérifier&amp;nbsp;:**  - La couleur ne doit jamais être le seul canal de transmission d’une information, d’indication d’une action, de sollicitation d’une réponse ou de distinction d’un élément.  - Le contraste entre les couleurs de texte et de fond doit aussi être suffisant (7:1 sur mobile, 4,5:1 pour les textes larges, à calculer avec &lt;span lang=\&quot;en\&quot;&gt;Colour Constrast Analyzer&lt;/span&gt; par exemple). Du fait des contraintes des mobiles (écran, luminosité,…) un niveau AAA est demandé.  **Objectif utilisateur&amp;nbsp;:**   Faciliter la lecture à tous les utilisateurs, déficients visuels ou personnes dans un environnement lumineux défavorable (en mobilité).   Permettre aux utilisateurs ne distinguant pas les couleurs (daltoniens, déficients visuels, déficients auditifs, utilisateurs de mobile en luminosité extérieure… ) d’accéder tout de même à l’information par d’autres moyens.  **Outil&amp;nbsp;:** L’application [&lt;span lang=\&quot;en\&quot;&gt;Colour Constrast Analyzer&lt;/span&gt;](http://www.paciellogroup.com/resources/contrastanalyser/) permet de mesurer rapidement des niveaux de contraste de couleurs (gratuit pour Mac et Windows).    L’application [&lt;span lang=\&quot;en\&quot;&gt;AccessibilityScanner&lt;/span&gt;](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor&amp;hl=fr) permet de tester directement vos applications sur certains critères d’accessibilité et notamment les couleurs. Disponible à partir d’Android 6.  **Exemple de contraste non valide&amp;nbsp;:**   Le texte \&quot;film | 20h40 …\&quot; ne présente pas un contraste suffisant. Celui-ci ne sera pas lisible par tous les utilisateurs.    ![capture d’écran présentant du texte dont le contraste n’est pas suffisant](images/contraste.png)     **Exemple de passage d’information par la couleur valide et non valide&amp;nbsp;:**   &lt;img src=\&quot;./images/couleur.png\&quot; alt=\&quot;exemple de passage d’information par la couleur valide et non valide. Dans un cas la couleur et la forme de l’objet porte l’information avec une légende, dans l’autre cas seule la couleur porte l’information.\&quot; width=\&quot;300\&quot;&gt;     "
});

documentTitles["criteria-android-conception.html#alternative-textuelle"] = "Alternative textuelle";
index.add({
    url: "criteria-android-conception.html#alternative-textuelle",
    title: "Alternative textuelle",    
    body: "## Alternative textuelle  **Cible&amp;nbsp;:** tout le monde et en particulier les personnes déficientes visuelles.   **Quand&amp;nbsp;:** dès la conception, à la rédaction du contenu et pendant le développement.  **Description&amp;nbsp;:**    Les alternatives textuelles sont au cœur de l’accessibilité sur mobile. Grâce à elles, un utilisateur non-voyant peut utiliser une application sans perte d’information.      Tout comme pour les images, il est important de renseigner une alternative textuelle lorsque l’information n’est pas disponible pour les personnes malvoyantes/non-voyantes. C’est le cas des composants fournissant de l’information par la couleur, la forme, la position, le son… Sur mobile, tous les composants peuvent recevoir une alternative textuelle, il est donc possible d’enrichir la vocalisation native d’un élément, y compris celle d’un simple texte.      La place sur mobile étant réduite, on utilise bien souvent des abréviations pour les textes. Mais cependant, cela pose un problème aux utilisateurs de synthèse vocale qui restituent les abréviations telles quelles. Pour corriger ces vocalisations, il suffit de placer une alternative textuelle sur le texte. Cette alternative contient le texte non abrégé. À noter que &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; sait reconnaître quelques abréviations courantes. Par exemple, «&amp;nbsp;etc.&amp;nbsp;» et «&amp;nbsp;Dr.&amp;nbsp;» sont bien vocalisées «&amp;nbsp;et cetera&amp;nbsp;» et «&amp;nbsp;Docteur&amp;nbsp;».      Certaines images sont régulièrement associées à du texte pour donner une information. C’est le cas notamment des «&amp;nbsp;messages non lus&amp;nbsp;» où une infobulle donne le nombre de messages à lire et où une image donne l’information «&amp;nbsp;message&amp;nbsp;». Dans ce cas, la solution consiste à placer une alternative textuelle sur le texte qui donne toutes les informations nécessaires. Par exemple&amp;nbsp;: «&amp;nbsp;3 messages non lus&amp;nbsp;». On peut également placer cette alternative sur l’image, mais dans ce cas, il faut penser à rendre le texte «&amp;nbsp;invisible&amp;nbsp;» pour le lecteur d’écran.  L’alternative textuelle d’un élément est renseignée via l’attribut `contentDescription` (disponible pour tout élément héritant de `View`). Pour les boutons présents dans l’`ActionBar` (ou `ToolBar`), c’est l’attribut `title` qu’il faut renseigner. Le texte ou son alternative est vocalisé automatiquement avec des informations sur le type de composant (bouton, case à cocher…), de son état éventuel (coché décoché, sélectionné), s’il est utilisable (désactivé). Pour plus d’informations techniques sur ces attributs, nous vous conseillons de lire la section des [alternatives textuelles dans le guide développeur](./criteria-android-dev.html#alternatives-textuelles).  **À vérifier&amp;nbsp;:**  - Les éléments de l’application qui nécessitent une alternative en possèdent bien une, - Les alternatives textuelles de l’application sont explicites et compréhensibles.  **Objectif utilisateur&amp;nbsp;:**  Permettre aux utilisateurs du lecteur d’écran d’accéder à toutes les informations véhiculées par l’application.  **Exemple&amp;nbsp;:**  Ci-dessous, un exemple fréquent d’une icône qu’on couple avec du texte (infobulle) pour ajouter de l’information. Dans notre cas, l’icône «&amp;nbsp;mail&amp;nbsp;» couplée à l’infobulle de valeur «&amp;nbsp;3&amp;nbsp;» nous fait comprendre que nous avons «&amp;nbsp;3 mails non lus&amp;nbsp;». Si aucune alternative textuelle n’est ajoutée, 2 vocalisations seront lues «&amp;nbsp;bouton sans libellé&amp;nbsp;» et «&amp;nbsp;3&amp;nbsp;». On comprend bien ici l’importance d’ajouter des alternatives textuelles.   &lt;img src=\&quot;./images/alt.png\&quot; alt=\&quot;exemple d’icône couplée à du texte qui nécessite une alternative textuelle\&quot; width=\&quot;80\&quot; class=\&quot;pull-left\&quot;&gt; &lt;pre&gt;&lt;code class=\&quot;java\&quot;&gt;containerView.setContentDescription(\&quot;3 mails non lus, bouton\&quot;); //On ajoute l’alternative complète (construite dynamiquement au préalable) sur le conteneur containerView.setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_YES); //Le conteneur est une View, non visible par l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité par défaut. On le rend visible. mailImageView.setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_NO); //On masque le bouton-icône pour éviter une redondance d’information infobulleTextView.setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_NO); //On masque le texte pour éviter une redondance d’information &lt;/code&gt;&lt;/pre&gt;&lt;pre&gt; &lt;code class=\&quot;kotlin\&quot;&gt;containerView.contentDescription = \&quot;3 mails non lus, bouton\&quot; //On ajoute l’alternative complète (construite dynamiquement au préalable) sur le conteneur containerView.importantForAccessibility = View.IMPORTANT_FOR_ACCESSIBILITY_YES //Le conteneur est une View, non visible par l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité par défaut. On le rend visible. mailImageView.importantForAccessibility = View.IMPORTANT_FOR_ACCESSIBILITY_NO //On masque le bouton-icône pour éviter une redondance d’information infobulleTextView.importantForAccessibility = View.IMPORTANT_FOR_ACCESSIBILITY_NO) //On masque le texte pour éviter une redondance d’information &lt;/code&gt;&lt;/pre&gt;      "
});

documentTitles["criteria-android-conception.html#titre-et-en-tete"] = "Titre et en-tête";
index.add({
    url: "criteria-android-conception.html#titre-et-en-tete",
    title: "Titre et en-tête",    
    body: "## Titre et en-tête  **Cible&amp;nbsp;:** tout le monde   **Quand&amp;nbsp;:** dès la conception et à la rédaction du contenu.  **Description&amp;nbsp;:**   Le titre de la page est le premier élément qui est vocalisé ou vu sur un écran mobile. Il facilite la navigation pour tout le monde&amp;nbsp;: à tout moment, on sait où on se trouve dans l’application.   Une erreur commune est de mettre un titre unique pour toutes les pages d’une application (ou même pas de titre du tout).  **À vérifier&amp;nbsp;:**   - Chaque écran doit avoir un titre qui lui est propre ou qui permet de se repérer dans la navigation (couplé avec le bouton de retour).  **Objectif utilisateur&amp;nbsp;:**  Permettre aux utilisateurs d’identifier le sujet d’une page, de se repérer et de se faire une idée précise du contenu de la page sans avoir à le lire.  **Exemple non valide&amp;nbsp;:**  &lt;img src=\&quot;./images/header.png\&quot; alt=\&quot;exemple de titre non pertinent (absence de titre)\&quot; width=\&quot;300\&quot;&gt;      "
});

documentTitles["criteria-android-conception.html#etat-des-elements"] = "État des éléments";
index.add({
    url: "criteria-android-conception.html#etat-des-elements",
    title: "État des éléments",    
    body: "## État des éléments  **Cible&amp;nbsp;:** tout le monde et en particulier les personnes déficientes visuelles.   **Quand&amp;nbsp;:** lors du développement.  **Description&amp;nbsp;:**  Si un élément ne restitue pas à la vocalisation son statut, sa nature ou son état, l’utilisateur de &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; est dans l’impossibilité de comprendre ce qui se passe à l’écran. Ne pas préciser qu’une zone est dépliée ou que l’on se trouve face à un système d’onglets sont des exemples très fréquents.      Grand classique de ce problème&amp;nbsp;: les onglets. Les différents types d’onglets proposés dans Android ne donnent pas toutes les informations sur leur nature et sur leur état. Il est donc à la charge du développeur de donner ces informations à l’utilisateur via les attributs d’accessibilité correspondants (`contentDescription`). En l’occurrence, une bonne alternative pour le titre d’un onglet peut être&amp;nbsp;: \&quot;sélectionné, titre de l’onglet, onglet 1 sur 3\&quot;      Autre classique d’élément qui ne restitue pas par défaut son état&amp;nbsp;: les zones dépliables. Encore une fois, c’est grâce à l’alternative textuelle du titre de la zone dépliable que l’on peut donner à l’utilisateur de &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; le statut de celle-ci.     Pour renseigner ce genre d’information, il faut utiliser l’attribut `contentDescription` (disponible pour tout élément héritant de `View`).  **À vérifier&amp;nbsp;:**  - Tout élément dont le statut est modifié durant l’utilisation de l’application doit restituer son état à travers son alternative textuelle. Par exemple, un élément qui peut être sélectionné/non sélectionné doit restituer son état à travers une alternative textuelle.  **Objectif utilisateur&amp;nbsp;:**  Permettre aux utilisateurs de lecteurs d’écran d’avoir accès aux informations des composants, leur état, leur nature afin qu’ils puissent les utiliser sans difficultés.  **Exemple&amp;nbsp;:**  &lt;img src=\&quot;./images/tabs.png\&quot; alt=\&quot;exemple d’onglets qui ne restituent pas leur état et nature par défaut\&quot; width=\&quot;400\&quot;&gt;   Pour obtenir un exemple de code qui corrige ce problème, nous vous invitons à vous référer à la page du [guide développeur](./criteria-android-dev.html#alternatives-textuelles) correspondante.     "
});

documentTitles["criteria-android-conception.html#composant-standard"] = "Composant standard";
index.add({
    url: "criteria-android-conception.html#composant-standard",
    title: "Composant standard",    
    body: "## Composant standard  **Cible&amp;nbsp;:** tout le monde.   **Quand&amp;nbsp;:** en phase de sélection des briques logicielles et lors des développements.  **Description&amp;nbsp;:**    L’accessibilité est prise en compte dans les composants natifs (la plupart du temps). De plus, l’utilisation de composants standards permet à l’utilisateur de se retrouver dans une situation et un comportement habituels. La navigation dans une interface standard est donc plus confortable.      Utiliser au maximum les composants natifs en modifiant leur apparence. Si aucun composant standard ne permet de répondre au besoin, créer un composant dédié basé sur un composant standard en veillant à conserver la cohérence de navigation et l’accessibilité.      **Objectif utilisateur&amp;nbsp;:**   Permet à tous les utilisateurs d’interagir plus intuitivement avec l’interface.  **Objectif technique&amp;nbsp;:**  Améliore globalement la maintenabilité. Réduit les temps de développement.      "
});

documentTitles["criteria-android-conception.html#zone-de-clic"] = "Zone de clic";
index.add({
    url: "criteria-android-conception.html#zone-de-clic",
    title: "Zone de clic",    
    body: "## Zone de clic  **Cible&amp;nbsp;:** pour tous et en particulier les personnes avec des déficiences motrices   **Quand&amp;nbsp;:** dès la phase de conception et lors du développement.  **Description&amp;nbsp;:**    Une taille insuffisante pour la zone d’action d’un composant peut empêcher certains utilisateurs de profiter pleinement de l’application. Cela peut engendrer des frustrations qui peuvent conduire à la désinstallation de l’application. Chaque élément cliquable de l’application doit donner à l’utilisateur une taille suffisante pour sa zone d’action.  **À vérifier&amp;nbsp;:**  - Google définit pour son système une taille de zone de clic minimum de 48dp (en hauteur ET largeur, avec 8 dp de marge autour de l’élément).  **Objectif utilisateur&amp;nbsp;:**  Améliorer le confort de navigation au toucher (&lt;i lang=\&quot;en\&quot;&gt;touch&lt;/i&gt;).  **Outil&amp;nbsp;:**  L’application [&lt;span lang=\&quot;en\&quot;&gt;AccessibilityScanner&lt;/span&gt;](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor&amp;hl=fr) permet de tester directement vos applications sur certains critères d’accessibilité et notamment la taille des zones de clic. Disponible à partir d’Android 6.   **Exemple valide&amp;nbsp;:**   Dans les exemples ci-dessous, le cadre noir correspond à la taille de la zone interactive.   &lt;img src=\&quot;./images/clic_ok.png\&quot; alt=\&quot;exemple de composant interactif avec une zone d’interaction assez large\&quot; width=\&quot;300\&quot;&gt;  **Exemple non-valide&amp;nbsp;:**    &lt;img src=\&quot;./images/clic_ko.png\&quot; alt=\&quot;exemple de composant interactif avec une zone d’interaction trop petite\&quot; width=\&quot;300\&quot;&gt;   "
});

documentTitles["criteria-android-conception.html#element-fantome"] = "Élément fantôme";
index.add({
    url: "criteria-android-conception.html#element-fantome",
    title: "Élément fantôme",    
    body: "## Élément fantôme  **Cible&amp;nbsp;:** les personnes déficientes visuelles.   **Quand&amp;nbsp;:** lors du développement.  **Description&amp;nbsp;:**    Bien qu’invisibles à l’écran, certains éléments peuvent être lus par le lecteur d’écran (éléments positionnés en dehors de la zone visible ou masqués par d’autres éléments). La superposition d’écrans est quelque chose de courant sur mobile, mais cela engendre des problèmes d’accessibilité très lourds à corriger si elle n’est pas faite correctement dès le départ. Un lecteur d’écran tel que &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; est capable de lire les informations d’une vue qui est placée «&amp;nbsp;sous&amp;nbsp;» une autre. Mais si l’utilisateur n’est plus capable d’interagir avec cette vue, cela perturbe totalement sa navigation et celle-ci devient vite impossible.      Grand classique du problème&amp;nbsp;: les fragments. Un fragment est un composant qu’on peut facilement superposer par-dessus un autre sous Android. Une mauvaise utilisation des fragments peut aboutir à une navigation impossible avec le lecteur d’écran.      Consulter l’article sur l’[utilisation des fragments](https://developer.android.com/guide/components/fragments.html) pour plus d’informations.  **À vérifier&amp;nbsp;:**  - &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; ne doit pas vocaliser d’éléments indésirables appartenant à un autre écran que celui en cours de consultation.  **Objectif utilisateur&amp;nbsp;:**  Permettre la navigation dans l’application sans avoir d’élément perturbant, non utilisable, sur la vue courante.  **Exemple non-valide&amp;nbsp;:**    Dans l’exemple ci-dessous, le cadre vert correspond au focus de &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;. Ce dernier vocalise (la vocalisation est affichée en bas de l’écran sur la capture) un contenu se trouvant derrière la vue active.   &lt;img src=\&quot;./images/ghost.png\&quot; alt=\&quot;exemple d’élément fantôme\&quot; width=\&quot;300\&quot;&gt;   "
});

documentTitles["criteria-android-conception.html#taille-des-textes"] = "Taille des textes";
index.add({
    url: "criteria-android-conception.html#taille-des-textes",
    title: "Taille des textes",    
    body: "## Taille des textes  **Cible&amp;nbsp;:** tout le monde et en particulier les personnes déficientes visuelles.   **Quand&amp;nbsp;:** lors de la conception et lors du développement.  **Description&amp;nbsp;:**   L’utilisateur a la possibilité d’augmenter la taille du texte via une option d’accessibilité. Afin que l’application réagisse correctement à cette option, il est nécessaire d’utiliser des tailles de texte dynamiques qui s’ajusteront en fonction des paramètres utilisateurs. Un texte trop petit sera facilement ignoré par certains utilisateurs malvoyants.      L’application devra mettre en œuvre des tailles de textes dynamiques, s’assurer de la bonne réactivité des zones d’affichage au grossissement de texte (conteneurs qui s’adaptent à la taille de leur contenu). Il faut aussi assurer une taille minimum pour les textes (14sp).      Afin de permettre à l’option «&amp;nbsp;grand caractère&amp;nbsp;» d’interagir correctement avec l’application, plusieurs points sont à respecter durant les développements&amp;nbsp;: - Utiliser une taille de police dynamique&amp;nbsp;: le «&amp;nbsp;sp&amp;nbsp;». Cette unité, spécifique à Android, permet d’obtenir une taille de police en fonction de la densité de pixel de l’écran. Il est plus que recommandé de l’utiliser pour les textes, ne serait-ce que pour obtenir un design uniforme sur tous les types de &lt;i lang=\&quot;en\&quot;&gt;devices&lt;/i&gt; Android.  - Gérer les débordements de contenu&amp;nbsp;: une erreur courante est d’utiliser une taille de texte dynamique («&amp;nbsp;sp&amp;nbsp;» donc) mais de ne pas faire attention au conteneur. Si le texte grossit, le conteneur doit en faire autant pour ne pas qu’il y ait de débordement. On peut parfaitement jouer avec le `min-height` et le `height` des conteneurs pour obtenir un résultat correct (le `height` à `wrap_content` et le `min-height` à la hauteur voulue par défaut).  **À vérifier&amp;nbsp;:**  - L’application réagit correctement à l’option grand caractère, - Les textes de l’application ont une taille minimum de 14sp.  **Objectif utilisateur&amp;nbsp;:**  Permettre aux utilisateurs (malvoyants, en mobilité, seniors…) d’augmenter la taille du texte sans perte d’information pour accéder plus aisément au contenu.  **Outil&amp;nbsp;:** L’application [&lt;span lang=\&quot;en\&quot;&gt;AccessibilityScanner&lt;/span&gt;](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor&amp;hl=fr) permet de tester directement vos applications sur certains critères d’accessibilité et notamment la taille des textes. Disponible à partir d’Android 6.  **Exemple&amp;nbsp;:**  &lt;img src=\&quot;./images/text.png\&quot; alt=\&quot;exemple d’utilisation de taille de police dynamique\&quot; width=\&quot;300\&quot;&gt;    "
});

documentTitles["criteria-android-conception.html#controle-de-contenu"] = "Contrôle de contenu";
index.add({
    url: "criteria-android-conception.html#controle-de-contenu",
    title: "Contrôle de contenu",    
    body: "## Contrôle de contenu  **Cible&amp;nbsp;:** tout le monde et en particulier les personnes déficientes visuelles et cognitives.   **Quand&amp;nbsp;:** lors de la conception et lors du développement.  **Description&amp;nbsp;:**   Sur mobile, les lecteurs d’écran essayent de transmettre au maximum à l’utilisateur les changements de contexte. Dans certains cas, cela peut donner des vocalisations permanentes, et donc inaudibles, ou empêcher toute action de l’utilisateur.   L’utilisateur doit rester maître du contenu à tout instant. C’est particulièrement vrai avec le contenu interactif. Il faut donc éviter par exemple qu’une vidéo ne se lance directement en plein écran, qu’une vidéo ne se lance directement sans une action au préalable de l’utilisateur, qu’un carrousel ne défile de manière automatique, etc.  **À vérifier&amp;nbsp;:**  - Les contenus interactifs peuvent être maîtrisés par l’utilisateur (présence d’un bouton pause sur carrousel automatique, bouton accessible pour sortir du mode plein-écran etc)  **Objectif utilisateur&amp;nbsp;:**  Permettre aux utilisateurs de rester maîtres de l’application. Permettre à l’utilisateur de lecteur d’écran d’éviter une pollution sonore qui peut nuire à sa navigation.   **Objectif technique&amp;nbsp;:**  Améliorer le référencement naturel.   "
});

documentTitles["criteria-android-conception.html#changement-de-contenu"] = "Changement de contenu";
index.add({
    url: "criteria-android-conception.html#changement-de-contenu",
    title: "Changement de contenu",    
    body: "## Changement de contenu  **Cible&amp;nbsp;:** tout le monde et en particulier les personnes déficientes visuelles.   **Quand&amp;nbsp;:** lors de la conception et lors du développement.  **Description&amp;nbsp;:**   Lorsque du contenu est modifié dynamiquement à la suite d’une action de l’utilisateur, il faut le notifier à la synthèse vocale. Sans retour vocal, l’utilisateur ne sait pas qu’une action a été déclenchée.   Sur une page, si du contenu est modifié dynamiquement suite à une action utilisateur, il est important que le lecteur d’écran soit notifié afin qu’il déclenche une vocalisation. Par exemple, les listes qui se rafraîchissent, ou un compteur de temps.  Une simple vocalisation peut suffire à avertir l’utilisateur. Il est très facile de déclencher des vocalisations avec &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;. Attention : nous parlons de la vocalisation si &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; est activé et non pas de &lt;abbr&gt;TTS&lt;/abbr&gt; (Text To Speech) qui peut fonctionner indépendamment du statut de &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;. Il suffit de faire appel à la méthode `announceForAccessibility` en lui passant en paramètre l’`id` de la chaîne de caractère à vocaliser. À noter&amp;nbsp;: la méthode `announceForAccessibility` est disponible sur tout élément qui hérite de `View` et se fait dans la langue du système.  Il est également possible de spécifier à une vue qu’elle est une région &lt;i lang=\&quot;en\&quot;&gt;live&lt;/i&gt;, c’est-à-dire que son contenu est susceptible d’être modifié dynamiquement et qu’elle doit dans ce cas prévenir l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité. Cela aura pour conséquence de générer des vocalisations avec &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; par exemple. Un exemple type d’utilisation&amp;nbsp;: sur un formulaire, si l’utilisateur fait une erreur et qu’un message d’erreur apparaît, la vue contenant le message doit être définie comme une région &lt;i lang=\&quot;en\&quot;&gt;live&lt;/i&gt;.  Il faut passer par la méthode `setAccessibilityLiveRegion` qui prend en paramètre un mode pour la région &lt;i lang=\&quot;en\&quot;&gt;live&lt;/i&gt;. Il existe 3 modes&amp;nbsp;: -	`ACCESSIBILITY_LIVE_REGION_NONE`&amp;nbsp;: cette vue n’est pas une région &lt;i lang=\&quot;en\&quot;&gt;live&lt;/i&gt;. C’est la valeur par défaut de la plupart des vues. -	`ACCESSIBILITY_LIVE_REGION_POLITE`&amp;nbsp;: en cas de changement dans la vue, des vocalisations sont effectuées sur les changements. Ces vocalisations sont «&amp;nbsp;polies&amp;nbsp;»&amp;nbsp;; elles sont moins prioritaires que les vocalisations système par exemple. -	`ACCESSIBILITY_LIVE_REGION_ASSERTIVE`&amp;nbsp;: en cas de changement dans la vue, des vocalisations seront effectuées sur les changements. Ces vocalisations sont «&amp;nbsp;&lt;i lang=\&quot;en\&quot;&gt;rude&lt;/i&gt;&amp;nbsp;»&amp;nbsp;; elles sont prioritaires et immédiatement vocalisées. À noter, la méthode `setAccessibilityLiveRegion` est disponible sur tout élément qui hérite de `View`.  **À vérifier&amp;nbsp;:**  - Avec un lecteur d’écran, s’assurer que les modifications dynamiques dans les pages sont bien vocalisées.  **Objectif utilisateur&amp;nbsp;:**  Donner accès aux modifications des informations de l’application aux utilisateurs de lecteurs d’écran.   "
});

documentTitles["criteria-android-conception.html#i-langenscrolli-horizontal"] = "&lt;i lang=\&quot;en\&quot;&gt;Scroll&lt;/i&gt; horizontal";
index.add({
    url: "criteria-android-conception.html#i-langenscrolli-horizontal",
    title: "&lt;i lang=\&quot;en\&quot;&gt;Scroll&lt;/i&gt; horizontal",    
    body: "## &lt;i lang=\&quot;en\&quot;&gt;Scroll&lt;/i&gt; horizontal  **Cible&amp;nbsp;:** tout le monde et en particulier les personnes déficientes visuelles.   **Quand&amp;nbsp;:** dès la phase de conception et lors du développement.  **Description&amp;nbsp;:**  Un &lt;i lang=\&quot;en\&quot;&gt;scroll&lt;/i&gt; horizontal peut être très difficile à détecter si aucun visuel n’aide l’utilisateur à comprendre qu’il existe plusieurs pages.   Ne pas hésiter à afficher un élément pour indiquer un &lt;i lang=\&quot;en\&quot;&gt;scroll&lt;/i&gt; horizontal (des «&amp;nbsp;points&amp;nbsp;» par exemple). Quand cela est nécessaire, ajouter également des boutons «&amp;nbsp;suivant&amp;nbsp;» et «&amp;nbsp;précédent&amp;nbsp;».  **À vérifier&amp;nbsp;:**  - Les scrolls horizontaux sont indiqués visuellement - Avec le lecteur d’écran activé, un mécanisme permet de passer de page en page lorsqu’un &lt;i lang=\&quot;en\&quot;&gt;scroll&lt;/i&gt; horizontal est présent.  **Objectif utilisateur&amp;nbsp;:**  Donner une indication visuelle aux utilisateurs lors de la présence de &lt;i lang=\&quot;en\&quot;&gt;scrolls&lt;/i&gt; horizontaux. Permettre aux utilisateurs de lecteur d’écran d’utiliser les &lt;i lang=\&quot;en\&quot;&gt;scrolls&lt;/i&gt; horizontaux.  &lt;div class=\&quot;sideToSide row\&quot;&gt; &lt;div class=\&quot;col-sm-6 col-xs-12\&quot;&gt; **Exemple valide&amp;nbsp;:**  &lt;img src=\&quot;./images/scroll_h1.png\&quot; alt=\&quot;exemple de scroll horizontal accessible, avec des flèches matérialisant le scroll horizontal et des points indiquant le nombre de pages disponibles et laquelle est affichée.\&quot; width=\&quot;300\&quot;&gt; &lt;/div&gt; &lt;div class=\&quot;col-sm-6 col-xs-12\&quot;&gt; **Exemple non-valide&amp;nbsp;:**  &lt;img src=\&quot;./images/scroll_h2.png\&quot; alt=\&quot;exemple de scroll horizontal non accessible, sans informations sur l’action de scroll possible.\&quot; width=\&quot;300\&quot;&gt; &lt;/div&gt; &lt;/div&gt;  "
});

documentTitles["criteria-android-conception.html#formulaire"] = "Formulaire";
index.add({
    url: "criteria-android-conception.html#formulaire",
    title: "Formulaire",    
    body: "## Formulaire  **Cible&amp;nbsp;:** tout le monde et en particulier les personnes déficientes visuelles.   **Quand&amp;nbsp;:** lors de la conception et lors du développement.  **Description&amp;nbsp;:**  Lier les champs de formulaires avec leurs labels apporte une vocalisation supplémentaire qui permet à l’utilisateur de comprendre quoi remplir lorsqu’il arrive sur un champ de formulaire.      Il existe 2 grandes techniques pour réaliser cette liaison&amp;nbsp;:  - `labelFor`&amp;nbsp;: permet de spécifier à une vue qu’elle est le label d’une autre vue. Cette méthode prend en paramètre l’`id` de la vue que l’on labellise. On peut utiliser cette méthode avec quasiment tout type de champ de formulaire. Utilisable depuis le &lt;abbr&gt;xml&lt;/abbr&gt; `android:labelFor` ou le code `setLabelFor`.  - `hint`&amp;nbsp;: permet d’ajouter un texte d’exemple quand le champ de texte est vide. Cette méthode ne marche que pour les `TextView`. Prend en paramètre l’`id` d’une chaîne de caractère. Utilisable depuis le &lt;abbr&gt;xml&lt;/abbr&gt; `android:hint` ou le code `setHint`.  **À vérifier&amp;nbsp;:**  - les champs de formulaire doivent être liés à un label si celui-ci est visible, sinon un `hint` est présent.  **Objectif utilisateur&amp;nbsp;:**  Améliorer la navigation et la compréhension globale de la page, car les champs de formulaires décrivant le contenu attendu  facilitent leur saisie par les utilisateurs déficients visuels.   "
});

documentTitles["criteria-android-conception.html#ordre-de-lecture"] = "Ordre de lecture";
index.add({
    url: "criteria-android-conception.html#ordre-de-lecture",
    title: "Ordre de lecture",    
    body: "## Ordre de lecture  **Cible&amp;nbsp;:** les personnes déficientes visuelles.   **Quand&amp;nbsp;:** lors du développement.  **Description&amp;nbsp;:**  L’ordre de lecture permet à l’utilisateur de lecteur d’écran de se repérer dans la navigation et d’assurer une cohérence fonctionnelle. Il est donc important d’y faire attention.      Par défaut, l’ordre de lecture de la synthèse vocale prend en compte plusieurs paramètres&amp;nbsp;: la lecture «&amp;nbsp;logique&amp;nbsp;» (en France), soit de gauche à droite et de haut en bas, et la lecture du &lt;abbr&gt;xml&lt;/abbr&gt; (ordre de déclaration des éléments). Il existe cependant certain cas où le lecteur d’écran n’arrive pas à déterminer un ordre et dans ce cas, il utilise l’ordre de définition des éléments, ce qui peut amener des vocalisations incohérentes.      Il est tout à fait possible de redéfinir cet ordre de lecture avec deux attributs&amp;nbsp;: -	`accessibilityTraversalAfter`&amp;nbsp;: prend un `id` en paramètre et permet de spécifier à la vue qu’elle doit être «&amp;nbsp;vue&amp;nbsp;» par l’accessibilité après la vue passée en paramètre. - `accessibilityTraversalBefore`&amp;nbsp;: prend un `id` en paramètre et permet de spécifier à la vue qu’elle doit être «&amp;nbsp;vue&amp;nbsp;» par l’accessibilité avant la vue passée en paramètre.    À noter&amp;nbsp;: ces attributs peuvent être utilisés directement dans le &lt;abbr&gt;xml&lt;/abbr&gt; mais également dans le code via les méthodes `setAccessibilityTraversalAfter` et `setAccessibilityTraversalBefore`. Ces méthodes sont disponibles pour tout élément qui hérite de `View`.  **À vérifier&amp;nbsp;:**  - L’ordre de lecture (celui de &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;) est logique et cohérent.  **Objectif utilisateur&amp;nbsp;:**  Assurer un ordre de lecture logique et cohérent aux utilisateurs de lecteurs d’écran pour leur assurer une complète compréhension du contenu.  **Exemple&amp;nbsp;:**       Dans cet exemple, l’ordre de lecture par défaut dépend complètement de l’implémentation et de l’ordre de déclaration des éléments. Dans ce cas-ci&amp;nbsp;: `vol+, vol-, 1, 2, 3, 4, 5, 6, 7, 8, 9, p+, p-, 0`. Un ordre de lecture plus cohérent serait `1, 2, 3, 4, 5, 6, 7, 8, 9, 0, vol+, vol-, p+, p-`.    &lt;img src=\&quot;./images/order.png\&quot; alt=\&quot;exemple de scroll horizontal accessible\&quot; width=\&quot;300\&quot;&gt;   &lt;pre&gt;&lt;code class=\&quot;java\&quot; &gt;volupButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.remote0).getId()); voldownButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.volup).getId()); chaineplusButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.voldown).getId()); chainemoinsButton.setAccessibilityTraversalAfter(myView.findViewById(R.id.chaineplus).getId()); […]&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=\&quot;kotlin\&quot;&gt; volupButton.accessibilityTraversalAfter = remote0.id voldownButton.accessibilityTraversalAfter = volup.id chaineplusButton.accessibilityTraversalAfter = voldown.id chainemoinsButton.accessibilityTraversalAfter = chaineplus.id […] &lt;/code&gt;&lt;/pre&gt;   "
});

documentTitles["criteria-android-conception.html#navigation-au-focus"] = "Navigation au focus";
index.add({
    url: "criteria-android-conception.html#navigation-au-focus",
    title: "Navigation au focus",    
    body: "## Navigation au focus  **Cible&amp;nbsp;:** tout le monde et en particulier les personnes déficientes motrices qui utilisent un clavier pour naviguer.   **Quand&amp;nbsp;:** lors de la conception et lors du développement.  **Description&amp;nbsp;:**  La navigation au focus est très utile pour les personnes qui présentent des difficultés motrices ou cognitives. Cette navigation permet de passer d’élément interactif en élément interactif (élément sur lequel on peut effectuer une action). Elle correspond à la navigation que l’on peut faire avec un clavier Bluetooth lié à un smartphone.  Pour gérer la navigation au focus, il faut s’assurer de 3 choses&amp;nbsp;:   - Permettre le focus sur les éléments interactifs&amp;nbsp;: la navigation au focus ne concerne que les éléments interactifs. Si, par exemple, votre application possède des vues &lt;i lang=\&quot;en\&quot;&gt;custom&lt;/i&gt; cliquables, il faut s’assurer que ces vues soient focusables en positionnant l’attribut `focusable` à `true`. - Gérer l’affichage du focus&amp;nbsp;: tout élément interactif peut recevoir le focus, il faut donc que le `state_focused` soit défini et permette de distinguer d’un seul coup d’œil quel élément a le focus. - Gérer l’ordre du focus&amp;nbsp;: à travers les options `nextFocusDown`, `nextFocusUp`, `nextFocusRight` et `nextFocusLeft`, vous pouvez spécifier quelle vue doit prendre le focus selon l’utilisation des flèches tab, bas, haut, droit et gauche.   À noter&amp;nbsp;: `nextFocusDown`, `nextFocusUp`, `nextFocusRight`, `nextFocusLeft`, `focusable` ainsi que d’autres options de gestion du focus sont accessibles directement dans le &lt;abbr&gt;xml&lt;/abbr&gt; ou dans le code à travers les méthodes correspondantes.    Pour plus d’information sur la [gestion du focus sous Android](http://developer.android.com/guide/topics/ui/accessibility/apps.html#focus-nav).   **À vérifier&amp;nbsp;:**  - L’ordre de navigation au focus (clavier) est logique et cohérent. - À la navigation au focus (clavier), il est possible de déterminer visuellement l’élément qui a le focus  **Objectif utilisateur&amp;nbsp;:**  Permettre l’utilisation de l’application avec un clavier, dock tablette ou tout autre dispositif de navigation séquentielle.  "
});

documentTitles["criteria-android-conception.html#orientation-de-lecran"] = "Orientation de l’écran";
index.add({
    url: "criteria-android-conception.html#orientation-de-lecran",
    title: "Orientation de l’écran",    
    body: "## Orientation de l’écran **Cible&amp;nbsp;:** tout le monde et en particulier les personnes avec des déficiences visuelles ou motrices.  **Quand&amp;nbsp;:** lors de la conception et lors du développement.  **Description&amp;nbsp;:** L’accès au contenu d’une application ne doit pas dépendre de l’orientation de l’écran (portrait et paysage), sauf si une orientation particulière est essentielle pour la compréhension ou l’utilisation du contenu (projection, tableau…).  **À vérifier&amp;nbsp;:** - L’utilisation de composants graphiques standard qui supportent les deux modes (fragments…), ou définir un `design` spécifique à chaque orientation. - Que l’application n’est pas verrouillée dans un mode (portrait ou paysage).  **Objectif utilisateur&amp;nbsp;:** - Assurer une meilleure lisibilité du contenu pour les personnes qui utilisent le grossissement de caractères et passent du portrait au paysage en fonction de leur besoin. - Assurer une meilleure lisibilité du contenu pour les écrans fixés sur support (lit d’hôpital, chaise roulante…).  &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["criteria-ios-conception.html#les-criteres-de-conception-ios"] = "Les critères de conception iOS";
index.add({
    url: "criteria-ios-conception.html#les-criteres-de-conception-ios",
    title: "Les critères de conception iOS",    
    body: "# Les critères de conception iOS  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;iOS\&quot;, \&quot;url\&quot;: \&quot;./criteria-ios.html\&quot;},         {\&quot;label\&quot;:\&quot;Critères de conception\&quot;} 	]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Critères de conception\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-conception.html\&quot;, \&quot;expanded\&quot;: true},          {\&quot;label\&quot;:\&quot;Guide pour les développeurs\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-dev.html\&quot;},         {\&quot;label\&quot;:\&quot;VoiceOver\&quot;,\&quot;url\&quot;:\&quot;lecteur-ecran-voiceover.html\&quot;},         {\&quot;label\&quot;:\&quot;WWDC\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-wwdc.html\&quot;},         {\&quot;label\&quot;:\&quot;Tests\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-test.html\&quot;}     ]);	 });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-ios\&quot;&gt;&lt;/span&gt;  Ce guide a pour objectif de présenter les différents critères d’accessibilité à respecter pour obtenir une application iOS accessible. &lt;/br&gt;Chacun de ces critères est présenté en expliquant pour qui il est important, quand on peut le mettre en place, pourquoi il est important et la règle d’accessibilité qui en découle. &lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios-conception.html#images"] = "Images";
index.add({
    url: "criteria-ios-conception.html#images",
    title: "Images",    
    body: "## Images &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#images-Objectives\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Objectif&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#images-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#images-Examples\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Exemple&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#images-Check\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;À vérifier&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;images-Objectives\&quot;      role=\&quot;tabpanel\&quot;&gt;      Permettre l’accès à l’information incluse dans une image pour des utilisateurs qui n’y ont pas accès. &lt;/br&gt;Le point bloquant est une image sans description textuelle qui est inexploitable par des personnes ayant des déficiences visuelles. &lt;/br&gt;&lt;/br&gt;**Cible&amp;nbsp;:** tout le monde et en particulier les personnes déficientes visuelles.   **Quand&amp;nbsp;:** lors de la conception et pendant le développement. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;images-Description\&quot; role=\&quot;tabpanel\&quot; &gt; Les images sont très souvent utilisées pour transmettre de nombreuses informations. &lt;/br&gt;Les non-voyants ne pouvant voir les images, il est important que celles-ci possèdent une alternative qui donne toutes les informations portées par cette dernière. &lt;/br&gt;Dans le cas d’une image contenant du texte, l’alternative sera ledit texte mais dans le cas d’une image qui apporte des informations sous la forme d’un graphe, dessin ou autre, l’alternative devra contenir toutes les informations nécessaires présentes dans l’image. &lt;/br&gt;&lt;/br&gt;Certaines images sont utilisées à des fins décoratives et ne nécessitent donc pas d’alternative. &lt;/br&gt;Par défaut sous iOS, les images ne sont pas vocalisées par le lecteur d’écran. &lt;/br&gt;&lt;/br&gt;Les illustrations de l’application sont également considérées comme des images décoratives. &lt;/br&gt;La règle est donc la même&amp;nbsp;: il n’y a pas d’alternative textuelle à ajouter. Les icônes sont, a contrario, largement utilisées en tant que boutons pour des fonctionnalités diverses. Elles ont donc besoin d’alternatives textuelles pertinentes. &lt;/br&gt;&lt;/br&gt;L’alternative d’une image est renseignée via l’attribut `accessibilityLabel` *(via le protocole `UIAccessibility` implémenté par tout élément standard dérivant de `UIView`)*. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;images-Examples\&quot; role=\&quot;tabpanel\&quot; &gt; &lt;img src=\&quot;./images/image_ex.png\&quot; alt=\&quot;exemple complet d’image décorative et d’icône informative\&quot; width=\&quot;400\&quot;&gt;      &lt;/br&gt;&lt;/br&gt;En décomposant l’image, on obtient&amp;nbsp;:   - &lt;img src=\&quot;./images/montagnard.png\&quot; alt=\&quot;exemple d’image décorative\&quot; width=\&quot;256\&quot;&gt; pas d’`accessibilityLabel`   - &lt;img src=\&quot;./images/edit.png\&quot; alt=\&quot;exemple d’icône informative - paramètres\&quot; width=\&quot;48\&quot;&gt; `buttonView.accessibilityLabel = \&quot;example_image_edit_accessibilityLabel\&quot;.localized`   - &lt;img src=\&quot;./images/settings.png\&quot; alt=\&quot;exemple d’icône informative - édition\&quot; width=\&quot;48\&quot;&gt; `buttonView.accessibilityLabel = \&quot;example_image_settings_accessibilityLabel\&quot;.localized` &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;images-Check\&quot; role=\&quot;tabpanel\&quot; &gt; - Les images portant de l’information restituent cette information à travers leur alternative textuelle. - Les images décoratives n’ont pas d’alternative textuelle. &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt;  "
});

documentTitles["criteria-ios-conception.html#couleurs"] = "Couleurs";
index.add({
    url: "criteria-ios-conception.html#couleurs",
    title: "Couleurs",    
    body: "## Couleurs   &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#colours-Objectives\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Objectif&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#colours-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#colours-Examples\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Exemples&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#colours-Check\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;À vérifier&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;colours-Objectives\&quot;      role=\&quot;tabpanel\&quot;&gt; Faciliter la lecture à tous les utilisateurs, déficients visuels ou personnes dans un environnement lumineux défavorable. &lt;/br&gt;Permettre aux utilisateurs ne distinguant pas les couleurs *(daltoniens, déficients visuels, déficients auditifs, utilisateurs de mobile en luminosité extérieure…)*, d’accéder tout de même à l’information par d’autres moyens. &lt;/br&gt;&lt;/br&gt;**Cible&amp;nbsp;:** tout le monde, en particulier les personnes malvoyantes, les seniors et les personnes avec des problèmes de vision *(daltonisme, vision des contrastes,...)*   **Quand&amp;nbsp;:**  dès la phase de conception et lors du développement. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;colours-Description\&quot; role=\&quot;tabpanel\&quot; &gt; Les couleurs jouent un rôle très important dans la transmission des informations. &lt;/br&gt;On associe certaines couleurs à des concepts ou à des sensations, mais il ne faut pas oublier qu’une partie de la population ne distingue pas correctement les couleurs. &lt;/br&gt;&lt;/br&gt;La décision de mettre certaines polices en gras va favoriser un contraste plus faible pour des tailles basses de police. &lt;/br&gt;&lt;img style=\&quot;max-width: 1000px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/color_contrast_2.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;Ne pas mettre des polices en gras va demander un contraste des couleurs plus fort que dans le cas précédent. &lt;/br&gt;&lt;img style=\&quot;max-width: 1000px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/color_contrast_3.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt; Avec l’apparition du [Dynamic Type](./criteria-ios-dev.html#taille-des-textes) permettant de grossir de façon conséquente la taille de police, le contraste des couleurs n’est pas nécessairement figé et doit s’adapter au grossissement souhaité. &lt;/br&gt;&lt;img style=\&quot;max-width: 300px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/color_contrast_1.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;Il existe des cas où rajouter des motifs pour différencier les informations véhiculées uniquement par la couleur surcharge inutilement l'interface graphique si l'utilisateur n'en a pas besoin. &lt;/br&gt;&lt;img style=\&quot;max-width: 1100px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-244-TextStyles_11.png\&quot; /&gt; &lt;/br&gt;Dans ce cas, l'utilisation de l'option d'accessibilité [différencier sans couleur](#optionA11Y_differentiateWithoutColour) *(nouveauté iOS 13)* va permettre ce type d'affichage **uniquement à la demande de l'utilisateur**. &lt;/br&gt;&lt;/br&gt;**Outil&amp;nbsp;:** L’application [&lt;span lang=\&quot;en\&quot;&gt;Colour Contrast Analyzer&lt;/span&gt;](http://www.paciellogroup.com/resources/contrastanalyser/) permet de mesurer rapidement des niveaux de contraste de couleurs (gratuit pour mac et windows). &lt;/br&gt;L'outil &lt;span lang=\&quot;en\&quot;&gt;Accessibility Inspector&lt;/span&gt; dispose aussi d'une fonctionnalité [&lt;span lang=\&quot;en\&quot;&gt;Color Contrast Calculator&lt;/span&gt;](./criteria-ios-wwdc-19000.html#ColorContrast) depuis Xcode 11 qui permet d'obtenir les mêmes résultats. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;colours-Examples\&quot; role=\&quot;tabpanel\&quot; &gt; **Contraste non valide&amp;nbsp;:**   Le texte «&amp;nbsp;film | 20h40 …&amp;nbsp;» ne présente pas un contraste suffisant&amp;nbsp;: celui-ci ne sera pas lisible par tous les utilisateurs.      ![capture d’écran présentant du texte dont le contraste n’est pas suffisant](images/contraste.png)    &lt;/br&gt;&lt;/br&gt;**Passage d’information par la couleur valide et non valide&amp;nbsp;:** &lt;/br&gt;&lt;img src=\&quot;./images/couleur_ios.png\&quot; alt=\&quot;exemple de passage d’information par la couleur valide et non valide\&quot; width=\&quot;300\&quot;&gt; &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;colours-Check\&quot; role=\&quot;tabpanel\&quot; &gt; - La couleur ne doit jamais être le seul canal de transmission d’une information, d’indication d’une action, de sollicitation d’une réponse ou de distinction d’un élément.  - Le contraste entre les couleurs de texte et de fond doit aussi être suffisant *(à calculer avec &lt;span lang=\&quot;en\&quot;&gt;Colour Contrast Analyzer&lt;/span&gt; ou avec la fonctionnalité [Color Contrast Calculator](./criteria-ios-wwdc-19000.html#ColorContrast) de l'outil &lt;span lang=\&quot;en\&quot;&gt;Accessibility Inspector&lt;/span&gt; sous Xcode 11)*. - Avec l'arrivée du **Mode Sombre** en iOS 13, une attention toute particulière doit être portée sur les contrastes utilisés au sein des différents thèmes et pouvant être modifiés avec l'option d'accessibilité &lt;a role=\&quot;button\&quot; onclick=\&quot;     document.getElementById('a11yOptions').scrollIntoView({ behavior: 'smooth', block: 'start' });     $('#a11yOptions-Description_tab').trigger('click');     document.getElementsByName('optionA11Y_contraste')[0].scrollIntoView({ behavior: 'smooth', block: 'start' });\&quot;&gt;augmenter le contraste&lt;/a&gt;. &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt;  "
});

documentTitles["criteria-ios-conception.html#alternative-textuelle"] = "Alternative textuelle";
index.add({
    url: "criteria-ios-conception.html#alternative-textuelle",
    title: "Alternative textuelle",    
    body: "## Alternative textuelle &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#alternativeText-Objectives\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Objectif&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#alternativeText-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#alternativeText-Examples\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Exemple&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#alternativeText-Check\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;À vérifier&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;alternativeText-Objectives\&quot;      role=\&quot;tabpanel\&quot;&gt; Permettre aux utilisateurs ayant des déficiences sensorielles *(déficients visuels, déficients auditifs, utilisateurs de mobiles en luminosité extérieure, en milieu bruyant, malentendant…)* d’accéder aux informations véhiculées par l’application par d’autres biais. &lt;/br&gt;&lt;/br&gt;**Cible&amp;nbsp;:** tout le monde et en particulier les personnes déficientes visuelles.   **Quand&amp;nbsp;:** dès la conception, à la rédaction du contenu et pendant le développement. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;alternativeText-Description\&quot; role=\&quot;tabpanel\&quot; &gt; Les alternatives textuelles sont au cœur de l’accessibilité sur mobile. Grâce à elles, un utilisateur non voyant peut utiliser une application sans perte d’information. &lt;/br&gt;&lt;/br&gt;Tout comme pour les images, il est important de renseigner une alternative textuelle lorsque l’information n’est pas disponible pour les personnes malvoyantes/non-voyantes. &lt;/br&gt;C’est le cas des composants fournissant de l’information par la couleur, la forme, la position, le son… &lt;/br&gt;Sur mobile, tous les composants peuvent recevoir une alternative textuelle, il est donc possible d’enrichir la vocalisation native d’un élément, y compris celle d’un simple texte. &lt;/br&gt;&lt;/br&gt;La place sur mobile étant réduite, on utilise bien souvent des abréviations pour les textes. &lt;/br&gt;Cependant, cela pose un problème aux utilisateurs de synthèse vocale qui restitue les abréviations telles quelles. &lt;/br&gt;Pour corriger ces vocalisations, il suffit de placer une alternative textuelle sur le texte. &lt;/br&gt;Cette alternative contient le texte non abrégé.  &lt;/br&gt;À noter que &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; sait reconnaître quelques abréviations courantes&amp;nbsp;: «&amp;nbsp;etc.&amp;nbsp;» est bien vocalisé «&amp;nbsp;et cetera&amp;nbsp;». &lt;/br&gt;&lt;/br&gt;Certaines images sont régulièrement associées à du texte pour donner une information. &lt;/br&gt;C’est le cas notamment des «&amp;nbsp;messages non lus&amp;nbsp;» où une infobulle donne le nombre de messages à lire et où une image donne l’information «&amp;nbsp;message&amp;nbsp;». &lt;/br&gt;Dans ce cas, la solution consiste à placer une alternative textuelle sur le texte qui donne toutes les informations nécessaires. &lt;/br&gt;Par exemple&amp;nbsp;: «&amp;nbsp;3 messages non lus&amp;nbsp;». &lt;/br&gt;&lt;/br&gt;On peut également placer cette alternative sur l’image, mais dans ce cas, il faut penser à rendre le texte «&amp;nbsp;invisible&amp;nbsp;» pour le lecteur d’écran. &lt;/br&gt;&lt;/br&gt;L’alternative textuelle d’un élément est renseignée via les attributs `accessibilityLabel`, `accessibilityHint`, `accessibilityValue` et `accessibilityTrait` (via le protocole `UIAccessibility` implémenté par tout élément standard dérivant de `UIView`). &lt;/br&gt;&lt;/br&gt;L’ordre de vocalisation est toujours le suivant : `label`, `value`, `trait` et `hint`. &lt;/br&gt;Cet ordre ne peut pas être changé et la vocalisation est réalisée en une seule fois, à l’arrivée sur l’élément. &lt;/br&gt;&lt;/br&gt;Pour plus d’informations techniques sur ces attributs, nous vous conseillons de lire la section des [alternatives textuelles dans le guide développeur](./criteria-ios-dev.html#alternatives-textuelles). &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;alternativeText-Examples\&quot; role=\&quot;tabpanel\&quot; &gt; Ci-dessous, un exemple fréquent d’une icône qu’on couple avec du texte (infobulle) pour ajouter de l’information&amp;nbsp;: dans notre cas, l’icône «&amp;nbsp;mail&amp;nbsp;» couplée à l’infobulle de valeur «&amp;nbsp;3&amp;nbsp;» nous fait comprendre que nous avons «&amp;nbsp;3 mails non lus&amp;nbsp;». &lt;/br&gt;&lt;/br&gt;Si aucune alternative textuelle n’est ajoutée, 2 vocalisations seront lues «&amp;nbsp;bouton sans libellé&amp;nbsp;» et «&amp;nbsp;3&amp;nbsp;»: on comprend bien ici l’importance d’ajouter des alternatives textuelles.   &lt;/br&gt;&lt;img src=\&quot;./images/alt.png\&quot; alt=\&quot;exemple d’icône couplée à du texte qui nécessite une alternative textuelle\&quot; width=\&quot;80\&quot; class=\&quot;pull-left\&quot;&gt; &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;alternativeText-Check\&quot; role=\&quot;tabpanel\&quot; &gt; - Les éléments de l’application qui nécessitent une alternative en possède bien une. - Les alternatives textuelles de l’application sont explicites et compréhensibles. &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt;  "
});

documentTitles["criteria-ios-conception.html#titre-et-en-tete"] = "Titre et en-tête";
index.add({
    url: "criteria-ios-conception.html#titre-et-en-tete",
    title: "Titre et en-tête",    
    body: "## Titre et en-tête &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#titleAndHeaders-Objectives\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Objectif&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#titleAndHeaders-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#titleAndHeaders-Examples\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Exemple&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#titleAndHeaders-Check\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;À vérifier&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;titleAndHeaders-Objectives\&quot;      role=\&quot;tabpanel\&quot;&gt; Favoriser une navigation plus aisée en permettant aux utilisateurs d’identifier le sujet d’une page, de se repérer et se faire une idée précise du contenu de la page sans avoir à le lire. &lt;/br&gt;&lt;/br&gt;**Cible&amp;nbsp;:** tout le monde   **Quand&amp;nbsp;:** dès la conception et à la rédaction du contenu. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;titleAndHeaders-Description\&quot; role=\&quot;tabpanel\&quot; &gt; Le titre de la page est le premier élément qui est vocalisé ou vu sur un écran mobile. &lt;/br&gt;Il facilite la navigation pour tout le monde&amp;nbsp;: à tout moment, on sait où on se trouve dans l’application. &lt;/br&gt;&lt;/br&gt;Une erreur commune est de mettre un titre unique pour toutes les pages d’une application *(ou même pas de titre du tout)*. &lt;/br&gt;Les en-tête iOS permettent de structurer les pages en apportant une information supplémentaire utile à l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité car &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; est capable de naviguer d’en-tête en en-tête *(molette de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;, mode en-tête)* permettant de se déplacer plus rapidement dans la page. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;titleAndHeaders-Examples\&quot; role=\&quot;tabpanel\&quot; &gt; **Exemple non valide&amp;nbsp;:**       &lt;/br&gt;&lt;img src=\&quot;./images/header_ios.png\&quot; alt=\&quot;exemple de titre non pertinent (absence de titre)\&quot; width=\&quot;300\&quot;&gt;  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;titleAndHeaders-Check\&quot; role=\&quot;tabpanel\&quot; &gt; - Chaque écran doit avoir un titre qui lui est propre ou qui permet de se repérer dans la navigation *(couplé avec le bouton de retour)*. - Les éléments identifiés visuellement comme des en-têtes doivent être déclarés à l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité comme tels. &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt;  "
});

documentTitles["criteria-ios-conception.html#etat-des-elements"] = "État des éléments";
index.add({
    url: "criteria-ios-conception.html#etat-des-elements",
    title: "État des éléments",    
    body: "## État des éléments &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#eltStates-Objectives\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Objectif&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#eltStates-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#eltStates-Examples\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Exemple&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;eltStates-Objectives\&quot;      role=\&quot;tabpanel\&quot;&gt; Permettre aux utilisateurs de lecteurs d’écran d’avoir accès aux informations des composants, à leur état et leur nature afin qu’ils puissent les utiliser sans difficultés. &lt;/br&gt;&lt;/br&gt;**Cible&amp;nbsp;:** tout le monde et en particulier les personnes déficientes visuelles.   **Quand&amp;nbsp;:** lors du développement. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;eltStates-Description\&quot; role=\&quot;tabpanel\&quot; &gt; Si un élément ne restitue pas à la vocalisation son statut, sa nature ou son état, l’utilisateur &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; est dans l’impossibilité de comprendre ce qui se passe à l’écran. &lt;/br&gt;&lt;/br&gt;Ne pas préciser qu’une zone est dépliée ou que l’on se trouve face à un système d’onglets sont des exemples très fréquents. &lt;/br&gt;&lt;/br&gt;Par défaut, les onglets proposés dans iOS sont parfaitement accessibles. &lt;/br&gt;Cependant, il est fréquent de proposer des onglets personnalisés afin d’avoir un rendu différent : il est donc à la charge du développeur de donner les informations de nature et d’états des onglets à l’utilisateur via les attributs d’accessibilité correspondants. &lt;/br&gt;Notons toutefois qu’il serait possible de rendre accessibles ces onglets personnalisés comme cela est montré avec l’exemple de la section «&amp;nbsp;composants standards&amp;nbsp;». &lt;/br&gt;&lt;/br&gt;Autres éléments classiques qui ne restituent pas par défaut leur état&amp;nbsp;: les zones dépliables. &lt;/br&gt;Encore une fois, c’est grâce à l’alternative textuelle du titre de la zone dépliable que l’on peut donner à l’utilisateur de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; le statut de celle-ci. &lt;/br&gt;&lt;/br&gt;Pour renseigner ce genre d’information, il faut utiliser les attributs `accessibilityLabel` et `accessibilityTrait`. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;eltStates-Examples\&quot; role=\&quot;tabpanel\&quot; &gt; Tout élément dont le statut est modifié durant l’utilisation de l’application doit restituer son état à travers son alternative textuelle. &lt;/br&gt;&lt;/br&gt;&lt;img src=\&quot;./images/expandable_list.png\&quot; alt=\&quot;exemple de liste dépliable qui nécessite une alternative textuelle\&quot; width=\&quot;250\&quot; class=\&quot;pull-left\&quot;&gt; &lt;/br&gt;&lt;/br&gt;Par exemple, un élément qui peut être sélectionné/non sélectionné doit restituer son état à travers une alternative textuelle. &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt;  "
});

documentTitles["criteria-ios-conception.html#composant-standard"] = "Composant standard";
index.add({
    url: "criteria-ios-conception.html#composant-standard",
    title: "Composant standard",    
    body: "## Composant standard &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#stdComponent-Objectives\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Objectif&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#stdComponent-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;stdComponent-Objectives\&quot;      role=\&quot;tabpanel\&quot;&gt; Utilisateur ⟹ permet à tous les utilisateurs d’interagir plus intuitivement avec l’interface. &lt;/br&gt;Technique ⟹ améliore globalement la maintenabilité et réduit les temps de développement. &lt;/br&gt;&lt;/br&gt;**Cible&amp;nbsp;:** tout le monde.   **Quand&amp;nbsp;:** en phase de sélection des briques logicielles et lors des développements. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;stdComponent-Description\&quot; role=\&quot;tabpanel\&quot; &gt; L’accessibilité est prise en compte dans les composants natifs la plupart du temps. &lt;/br&gt;De plus, l’utilisation de composants standards permet à l’utilisateur de se retrouver dans une situation et un comportement habituels : la navigation dans une interface standard est donc plus confortable. &lt;/br&gt;&lt;/br&gt;Utiliser au maximum les composants natifs en modifiant leur apparence. &lt;/br&gt;Si aucun composant standard ne permet de répondre au besoin, créer un composant dédié basé sur un composant standard en veillant à conserver la cohérence de navigation et l’accessibilité. &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt;  "
});

documentTitles["criteria-ios-conception.html#zone-de-clic"] = "Zone de clic";
index.add({
    url: "criteria-ios-conception.html#zone-de-clic",
    title: "Zone de clic",    
    body: "## Zone de clic &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#touchTarget-Objectives\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Objectif&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#touchTarget-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#touchTarget-Examples\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Exemples&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#touchTarget-Check\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;À vérifier&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;touchTarget-Objectives\&quot;      role=\&quot;tabpanel\&quot;&gt; Améliorer le confort de navigation au toucher *(&lt;i lang=\&quot;en\&quot;&gt;touch&lt;/i&gt;)*. &lt;/br&gt;&lt;/br&gt;**Cible&amp;nbsp;:** tout le monde et en particulier les personnes avec des déficiences motrices.   **Quand&amp;nbsp;:** dès la phase de conception et lors du développement. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;touchTarget-Description\&quot; role=\&quot;tabpanel\&quot; &gt; Une taille insuffisante pour la zone d’action d’un composant peut empêcher certains utilisateurs de profiter pleinement de l’application. &lt;/br&gt;Cela peut engendrer des frustrations qui peuvent conduire à la désinstallation de l’application. &lt;/br&gt;&lt;/br&gt;Chaque élément cliquable de l’application doit donner à l’utilisateur une taille suffisante pour sa zone d’action. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;touchTarget-Examples\&quot; role=\&quot;tabpanel\&quot; &gt; **Exemple valide&amp;nbsp;:**  &lt;/br&gt;&lt;img src=\&quot;./images/clic_ok.png\&quot; alt=\&quot;exemple de composant interactif avec une zone d’interaction assez large\&quot; width=\&quot;300\&quot;&gt; &lt;/br&gt;&lt;/br&gt;**Exemple non-valide&amp;nbsp;:** &lt;/br&gt;&lt;img src=\&quot;./images/clic_ko.png\&quot; alt=\&quot;exemple de composant interactif avec une zone d’interaction trop petite\&quot; width=\&quot;300\&quot;&gt; &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;touchTarget-Check\&quot; role=\&quot;tabpanel\&quot; &gt; Apple définit pour son système une taille de zone de clic minimum de 44pt *(hauteur ET largeur)*. &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt;  "
});

documentTitles["criteria-ios-conception.html#element-fantome"] = "Elément fantôme";
index.add({
    url: "criteria-ios-conception.html#element-fantome",
    title: "Elément fantôme",    
    body: "## Elément fantôme &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#ghostElt-Objectives\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Objectif&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#ghostElt-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#ghostElt-Examples\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Exemple&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#ghostElt-Check\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;À vérifier&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;ghostElt-Objectives\&quot;      role=\&quot;tabpanel\&quot;&gt; Permettre la navigation dans l’application sans avoir d’éléments perturbants, non utilisables sur la vue courante. &lt;/br&gt;&lt;/br&gt;**Cible&amp;nbsp;:** les personnes déficientes visuelles.   **Quand&amp;nbsp;:** lors du développement. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;ghostElt-Description\&quot; role=\&quot;tabpanel\&quot; &gt; Bien qu’invisibles à l’écran, certains éléments peuvent être lus par le lecteur d’écran *(éléments positionnés en dehors de la zone visible ou masqués par d’autres éléments)*. &lt;/br&gt;La superposition d’écrans est quelque chose de courant sur mobile mais cela engendre des problèmes d’accessibilité très lourds à corriger si elle n’est pas faite correctement dès le départ. &lt;/br&gt;&lt;/br&gt;Un lecteur d’écran tel que &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; est capable de lire les informations d’une vue qui est placée «&amp;nbsp;sous&amp;nbsp;» une autre mais si l’utilisateur n’est plus capable d’interagir avec cette vue, cela perturbe totalement sa navigation et celle-ci devient vite impossible. &lt;/br&gt;&lt;/br&gt;Un exemple fréquent d’élément fantôme survient lors de la création de composant personnalisé tel que des «&amp;nbsp;&lt;span lang=\&quot;en\&quot;&gt;alert dialog&lt;/span&gt;&amp;nbsp;» *(notification utilisateur)*. &lt;/br&gt;Notons toutefois que ce genre de composant personnalisé est tout à fait susceptible d’être accessible. &lt;/br&gt;&lt;/br&gt;Nous vous invitons à lire la section 'vue modale' dans la &lt;a href=\&quot;./criteria-ios-dev.html#vue-modale\&quot; style=\&quot;text-decoration: underline;\&quot;&gt;partie développeur&lt;/a&gt;. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;ghostElt-Examples\&quot; role=\&quot;tabpanel\&quot; &gt; Dans l’exemple ci-dessous, l’alerte personnalisée présente le problème de vue fantôme.  &lt;/br&gt;&lt;img src=\&quot;./images/ghost_ios.png\&quot; alt=\&quot;exemple d’élément fantôme\&quot; width=\&quot;300\&quot;&gt; &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;ghostElt-Check\&quot; role=\&quot;tabpanel\&quot; &gt; &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; ne doit pas vocaliser d’éléments indésirables appartenant à un autre écran que celui en cours de consultation. &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt;  "
});

documentTitles["criteria-ios-conception.html#controle-de-contenu"] = "Contrôle de contenu";
index.add({
    url: "criteria-ios-conception.html#controle-de-contenu",
    title: "Contrôle de contenu",    
    body: "## Contrôle de contenu &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#contentControl-Objectives\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Objectif&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#contentControl-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#contentControl-Check\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;À vérifier&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;contentControl-Objectives\&quot;      role=\&quot;tabpanel\&quot;&gt; Utilisateur ⟹ permettre aux utilisateurs de rester maître de l’application et d’éviter une pollution sonore qui peut nuire à la navigation.  &lt;/br&gt;Technique ⟹ améliorer le référencement naturel. &lt;/br&gt;&lt;/br&gt;**Cible&amp;nbsp;:** tout le monde et en particulier les personnes déficientes visuelles et cognitives.   **Quand&amp;nbsp;:** lors de la conception et lors du développement. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;contentControl-Description\&quot; role=\&quot;tabpanel\&quot; &gt; Sur mobile, les lecteurs d’écran essaient de transmettre au maximum à l’utilisateur les changements de contexte. &lt;/br&gt;Dans certains cas, cela peut donner des vocalisations permanentes et donc inaudibles ou empêcher toute action de l’utilisateur. &lt;/br&gt;&lt;/br&gt;L’utilisateur doit rester maître du contenu à tout instant. &lt;/br&gt;C’est particulièrement vrai avec le contenu interactif : il faut donc éviter par exemple qu’une vidéo ne se lance directement en plein écran sans une action au préalable de l’utilisateur ou encore qu’un carrousel défile de manière automatique par exemple. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;contentControl-Check\&quot; role=\&quot;tabpanel\&quot; &gt; Les contenus interactifs peuvent être maîtrisés par l’utilisateur *(bouton accessible pour sortir du mode plein-écran par exemple)*. &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt;  "
});

documentTitles["criteria-ios-conception.html#changement-de-contenu"] = "Changement de contenu";
index.add({
    url: "criteria-ios-conception.html#changement-de-contenu",
    title: "Changement de contenu",    
    body: "## Changement de contenu &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#changingContent-Objectives\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Objectif&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#changingContent-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#changingContent-Check\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;À vérifier&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;changingContent-Objectives\&quot;      role=\&quot;tabpanel\&quot;&gt; Donner accès aux modifications des informations de l’application aux utilisateurs de lecteur d’écran. &lt;/br&gt;&lt;/br&gt;**Cible&amp;nbsp;:** tout le monde et en particulier les personnes déficientes visuelles.   **Quand&amp;nbsp;:** lors du développement. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;changingContent-Description\&quot; role=\&quot;tabpanel\&quot; &gt; Lorsque du contenu est modifié dynamiquement à la suite d’une action de l’utilisateur, il faut le notifier à la synthèse vocale. &lt;/br&gt;Sans retour vocal, l’utilisateur ne sait pas qu’une action a été déclenchée. &lt;/br&gt;&lt;/br&gt;Sur une page, si du contenu est modifié dynamiquement suite à une action utilisateur, il est important que le lecteur d’écran soit notifié afin qu’il déclenche une vocalisation. &lt;/br&gt;Par exemple pour les listes qui se rafraîchissent ou pour un compteur de temps. &lt;/br&gt;&lt;/br&gt;Pour déclencher une vocalisation, il faut envoyer une notification à l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité via la méthode `UIAccessibilityPostNotification` avec en paramètre la notification permettant de déclencher une vocalisation `UIAccessibilityAnnouncementNotification` et la chaîne de caractère à vocaliser. &lt;/br&gt;&lt;/br&gt;Il est également conseillé de notifier l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité lorsqu’un changement de contexte survient. &lt;/br&gt;Pour ce faire, il faut envoyer une notification de modification à l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité via la méthode `UIAccessibilityPostNotification`. &lt;/br&gt;&lt;/br&gt;Il existe plusieurs notifications de modification, mais les deux plus utiles sont&amp;nbsp;:   - `UIAccessibilityLayoutChangedNotification`&amp;nbsp;: permet de spécifier à l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité qu’une partie de la page a été modifiée. - `UIAccessibilityScreenChangedNotification`&amp;nbsp;: permet d’annoncer un changement global de la page.  Pour plus d’information technique sur ces méthodes, nous vous invitons à regarder la section correspondante dans le [guide développeur pour iOS](./criteria-ios-dev.html#informer-d-une-modification-sur-la-page). &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;changingContent-Check\&quot; role=\&quot;tabpanel\&quot; &gt; Avec un lecteur d’écran, s’assurer que les modifications dynamiques dans les pages sont bien vocalisées. &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt;  "
});

documentTitles["criteria-ios-conception.html#i-langenscrolli-horizontal"] = "&lt;i lang=\&quot;en\&quot;&gt;Scroll&lt;/i&gt; horizontal";
index.add({
    url: "criteria-ios-conception.html#i-langenscrolli-horizontal",
    title: "&lt;i lang=\&quot;en\&quot;&gt;Scroll&lt;/i&gt; horizontal",    
    body: "## &lt;i lang=\&quot;en\&quot;&gt;Scroll&lt;/i&gt; horizontal &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#horizontalScroll-Objectives\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Objectif&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#horizontalScroll-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#horizontalScroll-Examples\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Exemple&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#horizontalScroll-Check\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;À vérifier&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;horizontalScroll-Objectives\&quot;      role=\&quot;tabpanel\&quot;&gt; Donner une indication visuelle aux utilisateurs lors de la présence de &lt;i lang=\&quot;en\&quot;&gt;scrolls&lt;/i&gt; horizontaux et leur permettre de les utiliser naturellement. &lt;/br&gt;&lt;/br&gt;**Cible&amp;nbsp;:** tout le monde et en particulier les personnes déficientes visuelles.   **Quand&amp;nbsp;:** dès la phase de conception et lors du développement. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;horizontalScroll-Description\&quot; role=\&quot;tabpanel\&quot; &gt; Un &lt;i lang=\&quot;en\&quot;&gt;scroll&lt;/i&gt; horizontal peut être très difficile à détecter si aucun visuel n’aide l’utilisateur à comprendre qu’il existe plusieurs pages. &lt;/br&gt;&lt;/br&gt;Ne pas hésiter à afficher un élément pour indiquer un &lt;i lang=\&quot;en\&quot;&gt;scroll&lt;/i&gt; horizontal *(les \&quot;points\&quot; d’un `UIPageControl`)*. &lt;/br&gt;Quand cela est nécessaire, ajouter également des boutons «&amp;nbsp;suivant&amp;nbsp;» et «&amp;nbsp;précédent&amp;nbsp;». &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;horizontalScroll-Examples\&quot; role=\&quot;tabpanel\&quot; &gt; &lt;div class=\&quot;sideToSide row\&quot;&gt; &lt;div class=\&quot;col-sm-6 col-xs-12\&quot;&gt; **Exemple valide&amp;nbsp;:**  &lt;img src=\&quot;./images/scroll_ios_h1.png\&quot; alt=\&quot;exemple de scroll horizontal accessible\&quot; width=\&quot;300\&quot;&gt; &lt;/div&gt; &lt;div class=\&quot;col-sm-6 col-xs-12\&quot;&gt; **Exemple non-valide&amp;nbsp;:**  &lt;img src=\&quot;./images/scroll_ios_h2.png\&quot; alt=\&quot;exemple de scroll horizontal non accessible\&quot; width=\&quot;300\&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;horizontalScroll-Check\&quot; role=\&quot;tabpanel\&quot; &gt; - Les &lt;i lang=\&quot;en\&quot;&gt;scrolls&lt;/i&gt; horizontaux sont indiqués visuellement - Avec le lecteur d’écran activé, un mécanisme permet de passer de page en page lorsqu’un &lt;i lang=\&quot;en\&quot;&gt;scroll&lt;/i&gt; horizontal est présent. &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt;  "
});

documentTitles["criteria-ios-conception.html#formulaire"] = "Formulaire";
index.add({
    url: "criteria-ios-conception.html#formulaire",
    title: "Formulaire",    
    body: "## Formulaire &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#form-Objectives\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Objectif&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#form-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#form-Check\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;À vérifier&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;form-Objectives\&quot;      role=\&quot;tabpanel\&quot;&gt; Améliorer la navigation en améliorant la compréhension globale de la page, les champs de formulaires décrivant le contenu attendu. &lt;/br&gt;&lt;/br&gt;**Cible&amp;nbsp;:** tout le monde et en particulier les personnes déficientes visuelles.   **Quand&amp;nbsp;:** lors de la conception et lors du développement. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;form-Description\&quot; role=\&quot;tabpanel\&quot; &gt; Lier les champs de formulaires avec leurs labels apporte une vocalisation supplémentaire qui permet à l’utilisateur de comprendre quoi remplir lorsqu’il arrive sur un champ de formulaire. &lt;/br&gt;&lt;/br&gt;Sous iOS, on apporte une information supplémentaire sur les champs de formulaire via son alternative textuelle (`accessibilityLabel`). &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;form-Check\&quot; role=\&quot;tabpanel\&quot; &gt; Les champs de formulaire doivent restituer leurs labels. &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt;  "
});

documentTitles["criteria-ios-conception.html#ordre-de-lecture"] = "Ordre de lecture";
index.add({
    url: "criteria-ios-conception.html#ordre-de-lecture",
    title: "Ordre de lecture",    
    body: "## Ordre de lecture &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#readingOrder-Objectives\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Objectif&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#readingOrder-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#readingOrder-Examples\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Exemple&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#readingOrder-Check\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;À vérifier&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;readingOrder-Objectives\&quot;      role=\&quot;tabpanel\&quot;&gt; Assurer un ordre de lecture logique et cohérent aux utilisateurs de lecteur d’écran  pour leur assurer une complète compréhension du contenu. &lt;/br&gt;&lt;/br&gt;**Cible&amp;nbsp;:** les personnes déficientes visuelles.   **Quand&amp;nbsp;:** lors du développement. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;readingOrder-Description\&quot; role=\&quot;tabpanel\&quot; &gt; L’ordre de lecture permet à l’utilisateur de lecteur d’écran de se repérer dans la navigation et d’assurer une cohérence fonctionnelle&amp;nbsp;: il est donc important d’y faire attention. &lt;/br&gt;&lt;/br&gt;Par défaut, l’ordre de lecture de la synthèse vocale commence par le permier élément de la hiérarchie des vues en haut à gauche de l'écran pour finir au dernier élément situé le plus en bas à droite, le sens de lecture allant de la gauche vers la droite. &lt;/br&gt;&lt;/br&gt;Pour implémenter une définition personnalisée de l’ordre de lecture dans &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;, consultez la section appropriée dans la &lt;a href=\&quot;./criteria-ios-dev.html#ordre-de-lecture\&quot; style=\&quot;text-decoration: underline;\&quot;&gt;partie développeur&lt;/a&gt;. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;readingOrder-Examples\&quot; role=\&quot;tabpanel\&quot; &gt; L’ordre de lecture par défaut dépend complètement de l’implémentation et de l’ordre de déclaration des éléments. &lt;/br&gt;Dans ce cas-ci&amp;nbsp;: `1, 2, 3,  vol+, 4, 5, 6, p+, vol-, 7, 8, 9, p-, 0`. &lt;/br&gt;&lt;img src=\&quot;./images/order.png\&quot; alt=\&quot;exemple de scroll horizontal accessible\&quot; width=\&quot;300\&quot;&gt; &lt;/br&gt;Un ordre de lecture plus cohérent serait `1, 2, 3, 4, 5, 6, 7, 8, 9, 0, vol+, vol-, p+, p-`. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;readingOrder-Check\&quot; role=\&quot;tabpanel\&quot; &gt; S'assurer que l’ordre de lecture de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; est logique et cohérent avec le parcours utilisateur souhaité. &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt;  "
});

documentTitles["criteria-ios-conception.html#langue"] = "Langue";
index.add({
    url: "criteria-ios-conception.html#langue",
    title: "Langue",    
    body: "## Langue &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#language-Objectives\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Objectif&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#language-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#language-Check\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;À vérifier&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;language-Objectives\&quot;      role=\&quot;tabpanel\&quot;&gt; Assurer une compréhension des textes de l’application. &lt;/br&gt;&lt;/br&gt;**Cible&amp;nbsp;:** les personnes déficientes visuelles.   **Quand&amp;nbsp;:** lors du développement. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;language-Description\&quot; role=\&quot;tabpanel\&quot; &gt; La vocalisation donnée par &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; s’effectue, par défaut, dans la langue du système du mobile. &lt;/br&gt;Il arrive parfois que certain mots/textes d’une application soient dans une langue différente. &lt;/br&gt;&lt;/br&gt;Afin que la vocalisation soit audible, il faut déclarer ces textes dans la langue correspondante à l'aide de l’attribut `accessibilityLanguage` disponible via le protocole `UIAccessibility` (voir la &lt;a href=\&quot;./criteria-ios-dev.html#modifier-la-langue-de-vocalisation\&quot; style=\&quot;text-decoration: underline;\&quot;&gt;partie développeur&lt;/a&gt;).  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;language-Check\&quot; role=\&quot;tabpanel\&quot; &gt; Les mots/textes dans une langue différente de celle du reste de l’application sont bien vocalisés dans leur langue. &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt;  "
});

documentTitles["criteria-ios-conception.html#orientation-de-lecran"] = "Orientation de l’écran";
index.add({
    url: "criteria-ios-conception.html#orientation-de-lecran",
    title: "Orientation de l’écran",    
    body: "## Orientation de l’écran &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#screenOrientation-Objectives\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Objectif&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#screenOrientation-Description\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#screenOrientation-Check\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;À vérifier&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;screenOrientation-Objectives\&quot;      role=\&quot;tabpanel\&quot;&gt; Assurer une meilleure lisibilité du contenu tout en permettant aux personnes déficientes motrices qui utilisent leur terminal en mode paysage de pouvoir utiliser l’application sans contraintes. &lt;/br&gt;&lt;/br&gt;**Cible&amp;nbsp;:** tout le monde et en particulier les personnes avec des déficiences visuelles et/ou motrices.   **Quand&amp;nbsp;:** lors de la conception et lors du développement. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;screenOrientation-Description\&quot; role=\&quot;tabpanel\&quot; &gt; L’accès au contenu d’une application ne doit absolument pas dépendre de l’orientation de l’écran, c’est pourquoi il est très fortement recommandé de mettre en place un **passage sans contraintes entre les modes portrait et paysage** dès le début du projet. &lt;/br&gt;&lt;/br&gt;Bien évidemment, ceci n’est valable que si des contraintes fonctionnelles ne viennent pas à l’encontre d’un de ces deux modes *(projection, tableau…)*. &lt;/br&gt;&lt;/br&gt;L’idéal est de pouvoir aussi déployer l’application sur des écrans de type iPad de façon à favoriser la lecture et la gestuelle pour l’utilisateur. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;screenOrientation-Check\&quot; role=\&quot;tabpanel\&quot; &gt; - Le cahier des charges `design` parfaitement détaillé et comprenant l’ensemble des écrans à implémenter selon leur orientation. - La définition très précise de la façon dont les transitions entre les modes doivent être réalisées. - La parfaite adaptation du contenu aux modes portrait et paysage par le biais d’une batterie de tests graphiques sur tous les mobiles compatibles avec la version iOS déployée *(très important pour le grossissement de texte)*. - Le paramétrage approprié dans l’éditeur de code. &lt;/div&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt;  "
});

documentTitles["criteria-ios-conception.html#options-daccessibilite"] = "Options d'accessibilité";
index.add({
    url: "criteria-ios-conception.html#options-daccessibilite",
    title: "Options d'accessibilité",    
    body: "## Options d'accessibilité  &lt;a id=\&quot;a11yOptions\&quot;&gt;&lt;/a&gt; &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#a11yOptions-Objectives\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Objectifs&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#a11yOptions-Description\&quot;            id=\&quot;a11yOptions-Description_tab\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Description&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#a11yOptions-Check\&quot;             role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;À vérifier&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;a11yOptions-Objectives\&quot;      role=\&quot;tabpanel\&quot;&gt; Les options d'accessibilité présentes dans les réglages du terminal sont toutes susceptibles d'améliorer de façon conséquente le parcours d'un utilisateur souffrant d'un trouble que l'option peut fortement aider à surmonter. &lt;/br&gt;&lt;/br&gt;Il est donc primordial de : - **Comprendre** comment chacune de ces options peut impacter la conception et la réalisation d'une application. - **Tester** chacune des options appropriées afin de s'assurer que son effet est bien pris en compte au sein de l'application proposée.  **Cible&amp;nbsp;:** tout le monde.   **Quand&amp;nbsp;:** lors de la conception et lors du développement. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;a11yOptions-Description\&quot; role=\&quot;tabpanel\&quot; &gt; La liste exhaustive de ces options est fournie ci-dessous en détaillant leur action et leur correspondance programmatique une fois sélectionnées&amp;nbsp;:      1. [Augmenter le contraste](#optionA11Y_contraste). 2. [Activer l'AssistiveTouch](#optionA11Y_assistiveTouch). 3. [Mettre le texte en gras](#optionA11Y_bold). 4. [Afficher les sous-titres](#optionA11Y_closedCaption). 5. [Modifier les couleurs en échelle de gris](#optionA11Y_grayScale). 6. [Activer l'Accès Guidé](#optionA11Y_guidedAccess). 7. [Inverser les couleurs](#optionA11Y_inverserLesCouleurs). 8. [Passer l'audio en mono](#optionA11Y_audioEnMono). 9. [Limiter les animations visuelles](#optionA11Y_limiteVisuel). 10. [Réduire le floutage et la transparence](#optionA11Y_reductionTransparence). 11. [Secouer pour annuler](#optionA11Y_secouerPourAnnuler). 12. [Énoncer le contenu de l'écran](#optionA11Y_lecturePage). 13. [Énoncer la sélection](#optionA11Y_speakSelection). 14. [Activer le Contrôle de Sélection](#optionA11Y_switchControl). 15. [Activer VoiceOver](#optionA11Y_voiceOver). 16. [Prévisualisation vidéo](#optionA11Y_autoPlayVideoPreviews) ⟹ **nouveauté iOS 13** 17. [Différencier sans couleur](#optionA11Y_differentiateWithoutColour) ⟹ **nouveauté iOS 13** 18. [Boutons avec I/O](#optionA11Y_onOffSwitchLabels) ⟹ **nouveau dans iOS 13**  &lt;a name=\&quot;optionA11Y_contraste\&quot;&gt;&lt;/a&gt; - **Augmenter le contraste** *(UIAccessibilityDarkerSystemColorsEnabled)* : voir [WWDC 2018](./criteria-ios-wwdc-18230.html#Contrast) pour un descriptif de la fonctionnalité.  &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#Contrast-iOS13\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;iOS 13&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#Contrast-iOS12\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;iOS 12&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;Contrast-iOS13\&quot;      role=\&quot;tabpanel\&quot;&gt; &lt;img style=\&quot;max-width: 1000px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Accessibilité - Affichage et taille du texte - Augmenter le contraste.\&quot; src=\&quot;./images/optionA11Y_iOS13_contraste.png\&quot; /&gt; &lt;/br&gt;Depuis **iOS 13**, cette option d'accessibilité est désormais une **&lt;a href=\&quot;https://developer.apple.com/documentation/uikit/uitraitcollection/3238079-accessibilitycontrast\&quot; style=\&quot;text-decoration: underline;\&quot;&gt;variable d'instance&lt;/a&gt;** `traitCollection`. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;Contrast-iOS12\&quot; role=\&quot;tabpanel\&quot; &gt; &lt;img style=\&quot;max-width: 600px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Général - Accessibilité - Augmenter le contraste.\&quot; src=\&quot;./images/optionA11Y_iOS12_contraste.png\&quot; /&gt; &lt;/div&gt;&lt;/div&gt;&lt;/br&gt; &lt;a name=\&quot;optionA11Y_assistiveTouch\&quot;&gt;&lt;/a&gt; - **Activer l'AssistiveTouch** *(UIAccessibilityIsAssistiveTouchRunning)* : affiche le menu homonyme au premier plan quelle que soit l'application lancée.  &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#AssistiveTouch-iOS13\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;iOS 13&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#AssistiveTouch-iOS12\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;iOS 12&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;AssistiveTouch-iOS13\&quot;      role=\&quot;tabpanel\&quot;&gt; &lt;img style=\&quot;max-width: 1100px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Accessibilité - Toucher - AssistiveTouch - AssistiveTouch.\&quot; src=\&quot;./images/optionA11Y_iOS13_assistiveTouch.png\&quot; /&gt; &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;AssistiveTouch-iOS12\&quot; role=\&quot;tabpanel\&quot; &gt; &lt;img style=\&quot;max-width: 600px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Général - Accessibilité - AssistiveTouch\&quot; src=\&quot;./images/optionA11Y_iOS12_assistiveTouch.png\&quot; /&gt; &lt;/div&gt;&lt;/div&gt;&lt;/br&gt; &lt;a name=\&quot;optionA11Y_bold\&quot;&gt;&lt;/a&gt; - **Mettre le texte en gras** *(UIAccessibilityIsBoldTextEnabled)* : voir [WWDC 2018](./criteria-ios-wwdc-18230.html#Sizing) pour un descriptif de la fonctionnalité.  &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#Bold-iOS13\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;iOS 13&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#Bold-iOS12\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;iOS 12&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;Bold-iOS13\&quot;      role=\&quot;tabpanel\&quot;&gt; &lt;img style=\&quot;max-width: 1000px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Accessibilité - Affichage et taille du texte - Texte en gras\&quot; src=\&quot;./images/optionA11Y_iOS13_bold.png\&quot; /&gt; &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;Bold-iOS12\&quot; role=\&quot;tabpanel\&quot; &gt; &lt;img style=\&quot;max-width: 600px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Général - Accessibilité - Texte en gras\&quot; src=\&quot;./images/optionA11Y_iOS12_bold.png\&quot; /&gt; &lt;/div&gt;&lt;/div&gt;&lt;/br&gt; &lt;a name=\&quot;optionA11Y_closedCaption\&quot;&gt;&lt;/a&gt; - **Afficher les sous-titres** *(UIAccessibilityIsClosedCaptioningEnabled)* : permet l'affichage de sous-titres codés (SC) ou pour sourds/malentendants selon leur disponibilité au visionnage dans l'`appTV` ou dans `Vidéos`.  &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#ClosedCaption-iOS13\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;iOS 13&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#ClosedCaption-iOS12\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;iOS 12&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;ClosedCaption-iOS13\&quot;      role=\&quot;tabpanel\&quot;&gt; &lt;img style=\&quot;max-width: 1000px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Accessibilité - Sous-titres codés et SM\&quot; src=\&quot;./images/optionA11Y_iOS13_closedCaptions.png\&quot; /&gt; &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;ClosedCaption-iOS12\&quot; role=\&quot;tabpanel\&quot; &gt; &lt;img style=\&quot;max-width: 950px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Général - Accessibilité - Sous-titres codés et SM\&quot; src=\&quot;./images/optionA11Y_iOS12_closedCaptions.png\&quot; /&gt; &lt;/div&gt;&lt;/div&gt;&lt;/br&gt; &lt;a name=\&quot;optionA11Y_grayScale\&quot;&gt;&lt;/a&gt; - **Modifier les couleurs en échelle de gris** *(UIAccessibilityIsGrayscaleEnabled)* : permet aux personnes ne distinguant pas les couleurs de pouvoir cerner sans problèmes les écrans particulièrement bigarrés.  &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#GrayScale-iOS13\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;iOS 13&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#GrayScale-iOS12\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;iOS 12&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;GrayScale-iOS13\&quot;      role=\&quot;tabpanel\&quot;&gt; &lt;img style=\&quot;max-width: 1000px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Accessibilité - Affichage et taille du texte - Filtres de couleur\&quot; src=\&quot;./images/optionA11Y_iOS13_grayScale.png\&quot; /&gt; &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;GrayScale-iOS12\&quot; role=\&quot;tabpanel\&quot; &gt; &lt;img style=\&quot;max-width: 950px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Général - Accessibilité - Adapter l'affichage - Filtres de couleur\&quot; src=\&quot;./images/optionA11Y_iOS12_grayScale.png\&quot; /&gt; &lt;/div&gt;&lt;/div&gt;&lt;/br&gt; &lt;/br&gt; &lt;a name=\&quot;optionA11Y_guidedAccess\&quot;&gt;&lt;/a&gt; - **Activer l'Accès Guidé** *(UIAccessibilityIsGuidedAccessEnabled)* : limite l'utilisation du terminal à une seule et unique application.  &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#GuidedAccess-iOS13\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;iOS 13&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#GuidedAccess-iOS12\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;iOS 12&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;GuidedAccess-iOS13\&quot;      role=\&quot;tabpanel\&quot;&gt; &lt;img style=\&quot;max-width: 1000px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Accessibilité - Accès guidé - Accès guidé\&quot; src=\&quot;./images/optionA11Y_iOS13_guidedAccess.png\&quot; /&gt; &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;GuidedAccess-iOS12\&quot; role=\&quot;tabpanel\&quot; &gt; &lt;img style=\&quot;max-width: 950px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Général - Accessibilité - Accès guidé - Accès guidé\&quot; src=\&quot;./images/optionA11Y_iOS12_guidedAccess.png\&quot; /&gt; &lt;/div&gt;&lt;/div&gt;&lt;/br&gt; &lt;a name=\&quot;optionA11Y_inverserLesCouleurs\&quot;&gt;&lt;/a&gt; - **Inverser les couleurs** *(UIAccessibilityIsInvertColorsEnabled)* : limite l'éblouissement tout en atténuant fortement les contraintes et la fatigue occulaires en passant le terminal en `mode sombre`.  &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#invertColors-iOS13\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;iOS 13&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#invertColors-iOS12\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;iOS 12&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;invertColors-iOS13\&quot;      role=\&quot;tabpanel\&quot;&gt; &lt;img style=\&quot;max-width: 600px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Accessibilité - Affichage et taille du texte - Inversion intelligente\&quot; src=\&quot;./images/optionA11Y_iOS13_invertColors.png\&quot; /&gt; &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;invertColors-iOS12\&quot; role=\&quot;tabpanel\&quot; &gt; &lt;img style=\&quot;max-width: 950px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Général - Accessibilité - Adapter l'affichage - Inverser les couleurs - Inversion intelligente\&quot; src=\&quot;./images/optionA11Y_iOS12_invertColors.png\&quot; /&gt; &lt;/div&gt;&lt;/div&gt;&lt;/br&gt; &lt;a name=\&quot;optionA11Y_audioEnMono\&quot;&gt;&lt;/a&gt; - **Passer l'audio en mono** *(UIAccessibilityIsMonoAudioEnabled)* : aide les personnes malentendantes ou sourdes d'une oreille par exemple.  &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#AudioMono-iOS13\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;iOS 13&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#AudioMono-iOS12\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;iOS 12&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;AudioMono-iOS13\&quot;      role=\&quot;tabpanel\&quot;&gt; &lt;img style=\&quot;max-width: 1000px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Accessibilité - Audio Visuel - Mono Audio\&quot; src=\&quot;./images/optionA11Y_iOS13_audioEnMono.png\&quot; /&gt; &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;AudioMono-iOS12\&quot; role=\&quot;tabpanel\&quot; &gt; &lt;img style=\&quot;max-width: 590px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Général - Accessibilité - Audio mono\&quot; src=\&quot;./images/optionA11Y_iOS12_audioEnMono.png\&quot; /&gt; &lt;/div&gt;&lt;/div&gt;&lt;/br&gt; &lt;a name=\&quot;optionA11Y_limiteVisuel\&quot;&gt;&lt;/a&gt; - **Limiter les animations visuelles** *(UIAccessibilityIsReduceMotionEnabled)* : voir [WWDC 2018](./criteria-ios-wwdc-18230.html#Motion) pour un descriptif de la fonctionnalité.  &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#ReduceMotion-iOS13\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;iOS 13&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#ReduceMotion-iOS12\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;iOS 12&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;ReduceMotion-iOS13\&quot;      role=\&quot;tabpanel\&quot;&gt; &lt;img style=\&quot;max-width: 1000px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Accessibilité - Mouvement - Réduire les animations\&quot; src=\&quot;./images/optionA11Y_iOS13_reduceMotion.png\&quot; /&gt; &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;ReduceMotion-iOS12\&quot; role=\&quot;tabpanel\&quot; &gt; &lt;img style=\&quot;max-width: 950px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Général - Accessibilité - Réduire les animations\&quot; src=\&quot;./images/optionA11Y_iOS12_reduceMotion.png\&quot; /&gt; &lt;/div&gt;&lt;/div&gt;&lt;/br&gt; &lt;a name=\&quot;optionA11Y_reductionTransparence\&quot;&gt;&lt;/a&gt; - **Réduire le floutage et la transparence** *(UIAccessibilityIsReduceTransparencyEnabled)* : voir [WWDC 2018](./criteria-ios-wwdc-18230.html#TransparencyAndBlurring) pour un descriptif de la fonctionnalité.  &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#ReduceTransparency-iOS13\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;iOS 13&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#ReduceTransparency-iOS12\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;iOS 12&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;ReduceTransparency-iOS13\&quot;      role=\&quot;tabpanel\&quot;&gt; &lt;img style=\&quot;max-width: 1000px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Accessibilité - Affichage et taille du texte - Réduire la transparence\&quot; src=\&quot;./images/optionA11Y_iOS13_reduceTransparency.png\&quot; /&gt; &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;ReduceTransparency-iOS12\&quot; role=\&quot;tabpanel\&quot; &gt; &lt;img style=\&quot;max-width: 950px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Général - Accessibilité - Réduire la transparence\&quot; src=\&quot;./images/optionA11Y_iOS12_reduceTransparency.png\&quot; /&gt; &lt;/div&gt;&lt;/div&gt;&lt;/br&gt; &lt;a name=\&quot;optionA11Y_secouerPourAnnuler\&quot;&gt;&lt;/a&gt; - **Secouer pour annuler** *(UIAccessibilityIsShakeToUndoEnabled)* : affichage d'un menu par secousse du terminal qui permet de rétablir une action supprimée ou encore d'éviter de rester appuyé sur la touche d'effacement pour regarder les lettres s'effacer l'une après l'autre.  &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#ShakeToUndo-iOS13\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;iOS 13&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#ShakeToUndo-iOS12\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;iOS 12&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;ShakeToUndo-iOS13\&quot;      role=\&quot;tabpanel\&quot;&gt; &lt;img style=\&quot;max-width: 1000px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Accessibilité - Toucher - Secouer pour annuler\&quot; src=\&quot;./images/optionA11Y_iOS13_shakeToUndo.png\&quot; /&gt; &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;ShakeToUndo-iOS12\&quot; role=\&quot;tabpanel\&quot; &gt; &lt;img style=\&quot;max-width: 950px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Général - Accessibilité - Secouer pour annuler\&quot; src=\&quot;./images/optionA11Y_iOS12_shakeToUndo.png\&quot; /&gt; &lt;/div&gt;&lt;/div&gt;&lt;/br&gt; &lt;a name=\&quot;optionA11Y_lecturePage\&quot;&gt;&lt;/a&gt; - **Énoncer le contenu de l'écran** *(UIAccessibilityIsSpeakScreenEnabled)* : permet l'accès au player natif pour lire automatiquement une page web par exemple.  &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#SpeakScreen-iOS13\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;iOS 13&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#SpeakScreen-iOS12\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;iOS 12&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;SpeakScreen-iOS13\&quot;      role=\&quot;tabpanel\&quot;&gt; &lt;img style=\&quot;max-width: 1000px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Accessibilité - Contenu énoncé - Énoncer lecontenu de l'écran\&quot; src=\&quot;./images/optionA11Y_iOS13_speakScreen.png\&quot; /&gt; &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;SpeakScreen-iOS12\&quot; role=\&quot;tabpanel\&quot; &gt; &lt;img style=\&quot;max-width: 950px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Général - Accessibilité - Parole - Énoncer le contenu de l'écran\&quot; src=\&quot;./images/optionA11Y_iOS12_speakScreen.png\&quot; /&gt; &lt;/div&gt;&lt;/div&gt;&lt;/br&gt; &lt;a name=\&quot;optionA11Y_speakSelection\&quot;&gt;&lt;/a&gt; - **Énoncer la sélection** *(UIAccessibilityIsSpeakSelectionEnabled)* : donne accès à l'affichage d'un menu qui propose d'énoncer la sélection qui a déclenché son apparition.  &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#SpeakSelection-iOS13\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;iOS 13&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#SpeakSelection-iOS12\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;iOS 12&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;SpeakSelection-iOS13\&quot;      role=\&quot;tabpanel\&quot;&gt; &lt;img style=\&quot;max-width: 1000px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Accessibilité - Contenu énoncé - Énoncer la sélection\&quot; src=\&quot;./images/optionA11Y_iOS13_speakSelection.png\&quot; /&gt; &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;SpeakSelection-iOS12\&quot; role=\&quot;tabpanel\&quot; &gt; &lt;img style=\&quot;max-width: 950px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Général - Accessibilité - Parole - Énoncer la sélection\&quot; src=\&quot;./images/optionA11Y_iOS12_speakSelection.png\&quot; /&gt; &lt;/div&gt;&lt;/div&gt;&lt;/br&gt; &lt;a name=\&quot;optionA11Y_switchControl\&quot;&gt;&lt;/a&gt; - **Activer le Contrôle de Sélection** *(UIAccessibilityIsSwitchControlRunning)* : active la fonctionnalité en `mode point` ou en `mode élément`.  &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#SwitchControl-iOS13\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;iOS 13&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#SwitchControl-iOS12\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;iOS 12&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;SwitchControl-iOS13\&quot;      role=\&quot;tabpanel\&quot;&gt; &lt;img style=\&quot;max-width: 1000px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Accessibilité - Switch Control - Switch Control\&quot; src=\&quot;./images/optionA11Y_iOS13_switchControl.png\&quot; /&gt; &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;SwitchControl-iOS12\&quot; role=\&quot;tabpanel\&quot; &gt; &lt;img style=\&quot;max-width: 950px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Général - Accessibilité - Contrôle de sélection\&quot; src=\&quot;./images/optionA11Y_iOS12_switchControl.png\&quot; /&gt; &lt;/div&gt;&lt;/div&gt;&lt;/br&gt; &lt;a name=\&quot;optionA11Y_voiceOver\&quot;&gt;&lt;/a&gt; - **Activer VoiceOver** *(UIAccessibilityIsVoiceOverRunning)* : active le lecteur d'écran.  &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#VoiceOver-iOS13\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;iOS 13&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#VoiceOver-iOS12\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;iOS 12&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;VoiceOver-iOS13\&quot;      role=\&quot;tabpanel\&quot;&gt; &lt;img style=\&quot;max-width: 1000px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Accessibilité - VoiceOver - VoiceOver\&quot; src=\&quot;./images/optionA11Y_iOS13_voiceOver.png\&quot; /&gt; &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;VoiceOver-iOS12\&quot; role=\&quot;tabpanel\&quot; &gt; &lt;img style=\&quot;max-width: 950px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Général - Accessibilité - VoiceOver - VoiceOver\&quot; src=\&quot;./images/optionA11Y_iOS12_voiceOver.png\&quot; /&gt; &lt;/div&gt;&lt;/div&gt;&lt;/br&gt; &lt;a name=\&quot;optionA11Y_autoPlayVideoPreviews\&quot;&gt;&lt;/a&gt; - **Prévisualisation vidéo** *(UIAccessibilityIsVideoAutoplayEnabled)* : voir [WWDC 2019](./criteria-ios-wwdc-19000.html#nouveaut-s-ios-13-pour-l-accessibilit-visuelle) pour un descriptif de cette **nouvelle fonctionnalité iOS 13**. &lt;/br&gt;&lt;img style=\&quot;max-width: 375px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Accessibilité - Mouvement - Lire automatiquement les aperçus\&quot; src=\&quot;./images/iOSdev/wwdc19-244-TextStyles_6.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;optionA11Y_differentiateWithoutColour\&quot;&gt;&lt;/a&gt; - **Différencier sans couleur** *(UIAccessibilityShouldDifferentiateWithoutColour)* : voir [WWDC 2019](./criteria-ios-wwdc-19000.html#nouveaut-s-ios-13-pour-l-accessibilit-visuelle) pour un descriptif de cette **nouvelle fonctionnalité iOS 13**. &lt;/br&gt;&lt;img style=\&quot;max-width: 1000px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Accessibilité - Affichage et taille du texte - Différencier sans couleur\&quot; src=\&quot;./images/optionA11Y_iOS13_differentiateWithoutColour.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;optionA11Y_onOffSwitchLabels\&quot;&gt;&lt;/a&gt; - **Boutons avec I/O** *(UIAccessibilityIsOnOffSwitchLabelsEnabled)* : une fois activée, cette option dont l'**accès programmatique est une nouveauté iOS 13** affiche directement l'état des boutons à bascule pour éviter que seule la couleur soit porteuse de l'information. &lt;/br&gt;&lt;img style=\&quot;max-width: 1000px; height: auto;\&quot; alt=\&quot;Illustration d'accès via le menu Réglages - Accessibilité - Affichage et taille du texte - Boutons avec I/O\&quot; src=\&quot;./images/optionA11Y_iOS13_onOffSwitchLabels.png\&quot; /&gt;  &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;a11yOptions-Check\&quot; role=\&quot;tabpanel\&quot; &gt; Une fois l'option activée, si l'action désirée n'est pas effective au sein de l'application, il est **très fortement recommandé** d'agir en conséquence en se tenant informé de l'état de l'option impactée pour fournir à l'utilisateur l'expérience à laquelle il s'attend. &lt;/br&gt;&lt;/br&gt;La liste complète des options d'accessibilité avec leur notification dédiée est présente dans la &lt;a href=\&quot;./criteria-ios-dev.html#options-d-accessibilit-\&quot; style=\&quot;text-decoration: underline;\&quot;&gt;partie développeur&lt;/a&gt;. &lt;/br&gt;&lt;/br&gt;Il peut être aussi particulièrement intéressant de suivre les (dés)activations de ces options sous forme d'indicateurs afin de mieux connaître les utilisateurs d'une application et d'affiner subséquemment sa mise en oeuvre. &lt;/div&gt;  &lt;/div&gt;&lt;/br&gt;&lt;/br&gt;  &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["criteria-android.html#les-criteres-incontournables-sous-android"] = "Les critères incontournables sous Android";
index.add({
    url: "criteria-android.html#les-criteres-incontournables-sous-android",
    title: "Les critères incontournables sous Android",    
    body: "# Les critères incontournables sous Android  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;Android\&quot;}]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Critères de conception\&quot;,\&quot;url\&quot;:\&quot;criteria-android-conception.html\&quot;},         {\&quot;label\&quot;:\&quot;Guide pour les développeurs\&quot;,\&quot;url\&quot;:\&quot;criteria-android-dev.html\&quot;},         {\&quot;label\&quot;:\&quot;TalkBack\&quot;,\&quot;url\&quot;:\&quot;screen-reader-talkback.html\&quot;},         {\&quot;label\&quot;:\&quot;Tests\&quot;,\&quot;url\&quot;:\&quot;criteria-android-test.html\&quot;}     ]); });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-android\&quot;&gt;&lt;/span&gt;  "
});

documentTitles["criteria-android.html#pour-la-conception"] = "Pour la conception";
index.add({
    url: "criteria-android.html#pour-la-conception",
    title: "Pour la conception",    
    body: "## Pour la conception  Ce socle de critères destiné aux applications mobiles Android Orange pose les fondations qui permettent de s’engager dans une démarche de mise en accessibilité.  Le respect de la charte Orange pour Android, document disponible sur [le site de la marque Orange](http://design.orange.com/) est un prérequis à l’utilisation de ce socle. Certains points déjà présents dans la charte Orange (utilisation des couleurs notamment) n’ont pas été repris dans cette liste de critères.  "
});

documentTitles["criteria-android.html#pour-le-developpement"] = "Pour le développement";
index.add({
    url: "criteria-android.html#pour-le-developpement",
    title: "Pour le développement",    
    body: "## Pour le développement  Les critères incontournables pour le développement ont pour vocation d’aider les développeurs avec les principales options d’accessibilité du &lt;abbr&gt;SDK&lt;/abbr&gt; Android. À travers différentes catégories, ce guide explique comment utiliser les attributs et méthodes d’accessibilité et propose des liens vers la documentation officielle de Google.  "
});

documentTitles["criteria-android.html#pour-le-test"] = "Pour le test";
index.add({
    url: "criteria-android.html#pour-le-test",
    title: "Pour le test",    
    body: "## Pour le test  Pour vérifier le respect des critères, un certain nombre d’outils sont disponibles sous Android. Certains sont des outils dédiés au test comme l’accessibility scanner, d’autres sont les outils permettant de palier à des déficiences comme Talkback.  &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["criteria-android-test.html#le-test-de-laccessibilite-sous-android"] = "Le test de l’accessibilité sous Android";
index.add({
    url: "criteria-android-test.html#le-test-de-laccessibilite-sous-android",
    title: "Le test de l’accessibilité sous Android",    
    body: "# Le test de l’accessibilité sous Android  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;Critères incontournables sous Android\&quot;, \&quot;url\&quot;: \&quot;./criteria-android.html\&quot;},         {\&quot;label\&quot;:\&quot;Pour le test\&quot;} 	]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Critères de conception\&quot;,\&quot;url\&quot;:\&quot;criteria-android-conception.html\&quot;},         {\&quot;label\&quot;:\&quot;Guide pour les développeurs\&quot;,\&quot;url\&quot;:\&quot;criteria-android-dev.html\&quot;},         {\&quot;label\&quot;:\&quot;TalkBack\&quot;,\&quot;url\&quot;:\&quot;screen-reader-talkback.html\&quot;},         {\&quot;label\&quot;:\&quot;Tests\&quot;,\&quot;url\&quot;:\&quot;criteria-android-test.html\&quot;, \&quot;expanded\&quot;: true}     ]); });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-android\&quot;&gt;&lt;/span&gt;  Pour le web, le niveau d’accessibilité demandé à toute interface &lt;abbr&gt;HTML&lt;/abbr&gt; par le groupe Orange est **le respect des critères du niveau AA des &lt;span lang=\&quot;en\&quot;&gt;Web Content Accessibility Guidelines&lt;/span&gt; (&lt;abbr&gt;WCAG&lt;/abbr&gt;) 2.1, sans point bloquant** suite à un test utilisateur d’aide technique pour les principaux scénarios d’utilisation des fonctionnalités du site ou de l’application. Pour les applications mobiles natives, une transposition de ces critères et le respect des recommandations de la plateforme Android en terme d’accessibilité est demandé.  Des recommandations pour le test de l’accessibilité sous Android sont décrites sur le site de la plateforme, voir ces [recommandations](https://developer.android.com/training/accessibility/testing).  L’objet de ces pages est de décrire les tests techniques et fonctionnels. Ces tests sont des pré-requis aux tests utilisateurs.   Les tests d’accessibilité doivent être effectués tout au long du cycle de vie des projets :  * Au démarrage du projet, lors du choix du Framework, du logiciel ou progiciel…  * Dès la phase de conception sur les maquettes ou les prototypes lors des développements et des tests en production, pour les nouveaux contenus.  Dans l’idéal, les tests doivent être effectués sur des mobiles Android sans surcouche constructeur comme le Pixel. Ils doivent ensuite être réalisés sur les mobiles avec surcouche constructeur les plus utilisés par l’application.  Dans les premières versions des outils, il n’était pas possible d’en activer plusieurs en même temps. Au fil des versions, les outils se sont stabilisés et il est possible de les combiner pour vérifier plus de critères à la fois.  Pour tester l’accessibilité sur Android, il faut commencer par télécharger sur le [&lt;span lang=\&quot;en\&quot;&gt;Google Play&lt;/span&gt;](https://play.google.com/store/apps?hl=fr), [&lt;span lang=\&quot;en\&quot;&gt;Android Accessibility Suite&lt;/span&gt;](https://play.google.com/store/apps/details?id=com.google.android.marvin.talkback) et [&lt;span lang=\&quot;en\&quot;&gt;Accessibility Scanner&lt;/span&gt;](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor).    "
});

documentTitles["criteria-android-test.html#accessibility-scanner"] = "Accessibility Scanner";
index.add({
    url: "criteria-android-test.html#accessibility-scanner",
    title: "Accessibility Scanner",    
    body: "## Accessibility Scanner  Le [scanner](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor) est téléchargeable sur le playstore.  Le scanner prend des captures d’écran de la page et vérifie : * que l’écran contient des “vocalisations ou label” pour le lecteur d’écran, * que les zones cliquables sont suffisamment grandes et qu’elles ont un label propre,  * Les contrastes de couleur.  Attention, c’est une aide à la vérification, l’outil remonte parfois des faux positifs.  Certaines de ces vérifications font doublon avec `lint`. En cas de doute sur les contrastes, [&lt;span lang=\&quot;en\&quot;&gt;Colour contrast analysor&lt;/span&gt;](https://developer.paciellogroup.com/resources/contrastanalyser/) permet de faire un diagnostic plus précis.  Mode opératoire : * Activer le scanner dans les **paramètres/accessibilité/Accessibility Scanner**. Cela affiche un bouton, “&lt;span lang=\&quot;en\&quot;&gt;floatting action button&lt;/span&gt;” sur l’écran. * Actioner le bouton sur les écrans à tester. Une capture d’écran est réalisée et la liste des suggestions de correction s’affiche.  "
});

documentTitles["criteria-android-test.html#agrandissement"] = "Agrandissement";
index.add({
    url: "criteria-android-test.html#agrandissement",
    title: "Agrandissement",    
    body: "## Agrandissement  Android propose plusieurs options d’agrandissement : * Taille de la police * Taille d’affichage * Agrandissement (zoom)  Lire les instructions lors de l’activation des outils.  Positionner **Taille de la police** et **Taille d’affichage** au maximum. Parcourir l’application et noter les textes qui ne sont plus lisibles car ils ont disparu ou se chevauchent.   Positionner **Agrandissement** sur **Utiliser le service**. Revenir à l’application, cliquer 3 fois sur l’écran. Vérifier que les écrans sont lisibles dans ce mode. Pour agrandir, placer 2 doigts sur l’écran puis écarter les, se déplacer avec deux doigts sur l’écran et un doigt dans certaines listes. Toutes les informations de l’écran doivent être lisibles en mode zoom.   "
});

documentTitles["criteria-android-test.html#lecteur-decran"] = "Lecteur d’écran";
index.add({
    url: "criteria-android-test.html#lecteur-decran",
    title: "Lecteur d’écran",    
    body: "## Lecteur d’écran  Le lecteur d’écran est un outil pour les personnes non voyantes et mal-voyantes. Il a deux fonctions, la vocalisation et la navigation dans l’écran. Tous les éléments signifiants doivent être vocalisés et dans un ordre logique.  Pour l’activation et l’utilisation du lecteur, voir la [section concernant &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;](./screen-reader-talkback.html).  La navigation peut être utilisée en : - lecture automatique de la page ou lecture élément par élément, balayage au doigt vers la droite pour l’élément suivant (obligatoire) - lecture par niveau : **Par défaut** (obligatoire), si l’application s’y prête, le mode **En-têtes** peut avoir de l’intérêt (page structurée à plusieurs niveaux), ou **Liens**, **Commandes**, **Mots**, **Paragraphes**.  Une option développeur (Paramètres / Accessibilité / Talkback / Paramètres / Paramètres du développeur / Afficher la sortie vocale) permet d’afficher à l’écran ce qui est vocalisé et ainsi de faire un rapport de bug plus facile. Lorsque Talkback est utilisé avec l’option activée, les vocalisations sont affichées en bas de l’écran (en sur-impression), il est donc possible d’en faire un screenshot. Il est néanmoins nécessaire d’écouter le rendu audible qui n’est pas toujours correct (comme certaines abréviations).  Parcourir l’application sur les scénarios utilisateurs et vérifier que toutes les informations sont vocalisées dans un ordre logique et compréhensible ainsi que : - les actions associées (bouton, case à cocher… Appuyer deux fois pour activer), - avec l’état des éléments (désactivé, coché…), - les messages d’erreurs, - les transitions entre les écrans, - Les images signifiantes vocalisées, les images décoratives ignorées, - Les titres des pages vocalisés, - Pas d’élément fantôme, - Les scrolls horizontaux vocalisés, - les contenus dynamiques et les erreurs, - les formulaires (compréhension des champs à remplir, des messages d’erreur), - dans les vidéos, les boutons de contrôles de la vidéo.   Idéalement, le test peut se faire sans regarder l’écran, ou en activant l’écran noir (**Assombrir l’écran**).  "
});

documentTitles["criteria-android-test.html#navigation-au-focus-au-clavier"] = "Navigation au focus (au clavier)";
index.add({
    url: "criteria-android-test.html#navigation-au-focus-au-clavier",
    title: "Navigation au focus (au clavier)",    
    body: "## Navigation au focus (au clavier)  Pour cela, connecter un clavier d’ordinateur sur votre smartphone soit avec un adaptateur (USB - USB C par exemple) soit si le clavier est bluetooth, en appairant le clavier et le téléphone. Le clavier bluetooth a l’avantage de faciliter le débuggage.  La navigation dans une application ou une page web doit être possible à l’aide du clavier seul, notamment pour les personnes qui ne peuvent pas utiliser l’écran tactile. Il est important de vérifier son fonctionnement, car certains développements peuvent entraîner des difficultés pour naviguer correctement dans la page.    Parcourir l’application à l’aide du clavier, toutes les fonctionnalités doivent être accessibles.    De plus le focus doit rester suffisamment visible sur chaque élément recevant ce focus (éléments activables, boutons, éléments cliquables, cases à cocher,…).  "
});

documentTitles["criteria-android-test.html#liste-des-raccourcis-clavier-principauxnbsp"] = "Liste des raccourcis clavier principaux&amp;nbsp;:";
index.add({
    url: "criteria-android-test.html#liste-des-raccourcis-clavier-principauxnbsp",
    title: "Liste des raccourcis clavier principaux&amp;nbsp;:",    
    body: "### Liste des raccourcis clavier principaux&amp;nbsp;:  * La touche **TAB :** pour faire avancer le focus. * Les touches **maj+TAB :** pour faire reculer le focus. * La touche entrée pour activer l’élément qui a le focus (lien, bouton, menu…). * La barre espace pour cocher/décocher une case à cocher. * Les flèches directionnelles pour modifier la sélection des boutons radio, pour se déplacer dans une liste déroulante, ou faire défiler les ascenseurs **scrollbar** ) lorsque ceux-ci sont présents.  Il s'agit des touches également utilisées pour tester l'accessibilité d'un site web, néanmoins un distingo moins strict est fait entre l’usage du Tab et des flèches ainsi qu’entre l’usage de la barre et la touche entrée : on considère le test comme réussi lorsqu’au moins l’un des deux permet de réaliser l’action.  Il est considéré comme bloquant l’impossibilité de sortir d’une fonctionnalité ou de l’application.  "
});

documentTitles["criteria-android-test.html#colour-contrast-analyser"] = "Colour Contrast Analyser";
index.add({
    url: "criteria-android-test.html#colour-contrast-analyser",
    title: "Colour Contrast Analyser",    
    body: "## Colour Contrast Analyser Les contrastes de couleurs se vérifient sur les maquettes de l’application, ou via &lt;span lang=\&quot;en\&quot;&gt;Accessibility Scanner&lt;/span&gt; sur un mobile Android. Si un doute subsiste, il est possible de faire un screenshot de l’application, puis de faire une vérification sur un ordinateur [Mesurer le niveau de contraste des couleurs](./methodes-outils-contrastes.html) via l'outil &lt;span lang=\&quot;en\&quot;&gt;Colour Contrast Analyser&lt;/span&gt;.  Pour les valeurs à respecter voir la [section concernant les couleurs](./criteria-android-conception.html#couleurs).  "
});

documentTitles["criteria-android-test.html#autres-outils-optionnels"] = "Autres outils - optionnels";
index.add({
    url: "criteria-android-test.html#autres-outils-optionnels",
    title: "Autres outils - optionnels",    
    body: "## Autres outils - optionnels  "
});

documentTitles["criteria-android-test.html#selectionner-pour-prononcer"] = "Sélectionner pour prononcer";
index.add({
    url: "criteria-android-test.html#selectionner-pour-prononcer",
    title: "Sélectionner pour prononcer",    
    body: "### Sélectionner pour prononcer **Sélectionner pour prononcer** est un outil intégré à l’[&lt;span lang=\&quot;en\&quot;&gt;Android Accessibility Suite&lt;/span&gt;](https://play.google.com/store/apps/details?id=com.google.android.marvin.talkback) qui permet de lire certaines parties de l’écran qui sont sélectionnées.   Lorsqu’un seul élément est sélectionné, il réalise la vocalisation de l’élément. Lorsque plusieurs éléments sont sélectionnés, il implémente un ordre logique de lecture comme **&lt;span lang=\&quot;en\&quot;&gt;Talkback&lt;/span&gt;** mais il n’implémente pas les actions ni l’état des éléments.  Il est utile pour les malvoyants, lorsque l’écran n’est pas lisible, pour l’apprentissage de la lecture (fonctionne comme un karaoké), pour l’apprentissage d’une langue étrangère.  Il peut être utilisé dans un but de démonstration mais est redondant avec Talkback pour des tests d’accessibilité, sans pouvoir le remplacer.  "
});

documentTitles["criteria-android-test.html#voice-access"] = "Voice Access";
index.add({
    url: "criteria-android-test.html#voice-access",
    title: "Voice Access",    
    body: "### Voice Access [Voice Access](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.voiceaccess) est une applicationl intégrée à [&lt;span lang=\&quot;en\&quot;&gt;Android Accessibility Suite&lt;/span&gt;](https://play.google.com/store/apps/details?id=com.google.android.marvin.talkback), à destination des personnes présentant des troubles moteur. Elle permet de commander à la voix l’application à la place de l’écran tactile.   "
});

documentTitles["criteria-android-test.html#switch-access"] = "Switch Access";
index.add({
    url: "criteria-android-test.html#switch-access",
    title: "Switch Access",    
    body: "### Switch Access **Switch Access** est une application à destination des personnes présentant des troubles moteur. Elle permet de contrôler le téléphone en programmant des touches. Elle pourrait remplacer la navigation clavier mais peut introduire des incompréhensions du fait de son paramétrage ou de l’application. Elle ne peut donc se substituer aux tests au clavier.    &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["criteria-ios.html#accessibilite-sous-ios"] = "Accessibilité sous iOS";
index.add({
    url: "criteria-ios.html#accessibilite-sous-ios",
    title: "Accessibilité sous iOS",    
    body: "# Accessibilité sous iOS  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;iOS\&quot;}]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Critères de conception\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-conception.html\&quot;},          {\&quot;label\&quot;:\&quot;Guide pour les développeurs\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-dev.html\&quot;},         {\&quot;label\&quot;:\&quot;VoiceOver\&quot;,\&quot;url\&quot;:\&quot;lecteur-ecran-voiceover.html\&quot;},         {\&quot;label\&quot;:\&quot;WWDC\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-wwdc.html\&quot;},         {\&quot;label\&quot;:\&quot;Tests\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-test.html\&quot;}     ]);     });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-ios\&quot;&gt;&lt;/span&gt;  De façon à pouvoir implémenter au mieux l'accessibilité au sein d'applications iOS, la parfaite compréhension d'un ensemble de notions est nécessaire pour apporter la meilleure expérience utilisateur possible. &lt;/br&gt;Toutes ces notions élémentaires et avancées sont illustrées et développées dans les différentes rubriques ci-dessous : &lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios.html#criteres-de-conceptioncriteria-ios-conceptionhtml"] = "[Critères de conception](./criteria-ios-conception.html)";
index.add({
    url: "criteria-ios.html#criteres-de-conceptioncriteria-ios-conceptionhtml",
    title: "[Critères de conception](./criteria-ios-conception.html)",    
    body: "## [Critères de conception](./criteria-ios-conception.html) Ce socle de critères pose les fondations qui permettent de s’engager dans une démarche de mise en accessibilité. &lt;/br&gt;Le respect de la charte Orange pour iOS, document disponible sur le site de la marque [Orange](http://design.orange.com/), est un prérequis à l’utilisation de ce socle. &lt;/br&gt;Certains points déjà présents dans cette charte *(utilisation des couleurs notamment)* n’ont pas été repris dans cette liste de critères. &lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios.html#guide-pour-les-developpeurscriteria-ios-devhtml"] = "[Guide pour les développeurs](./criteria-ios-dev.html)";
index.add({
    url: "criteria-ios.html#guide-pour-les-developpeurscriteria-ios-devhtml",
    title: "[Guide pour les développeurs](./criteria-ios-dev.html)",    
    body: "## [Guide pour les développeurs](./criteria-ios-dev.html) L'aide au développement a pour vocation d’aider les développeurs avec les éléments programmatiques d’accessibilité disponibles sous iOS. &lt;/br&gt;L'intérêt principal de cette partie réside dans tous les exemples concrets comprenant des illustrations et des exemples de code *(ObjC et Swift)* qui permettront aux développeurs de trouver rapidement une solution à leurs problèmes. &lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios.html#voiceoverlecteur-ecran-voiceoverhtml"] = "[VoiceOver](./lecteur-ecran-voiceover.html)";
index.add({
    url: "criteria-ios.html#voiceoverlecteur-ecran-voiceoverhtml",
    title: "[VoiceOver](./lecteur-ecran-voiceover.html)",    
    body: "## [VoiceOver](./lecteur-ecran-voiceover.html) Afin de comprendre parfaitement les problématiques liées au lecteur d'écran, toutes les gestuelles sont illustrées et expliquées de façon détaillée. &lt;/br&gt;La maîtrise parfaite de ces gestes permet de mettre en place une application qui colle au mieux aux attentes des utilisateurs, l'effort à fournir pour la pratique se faisant tant au niveau des concepteurs que des développeurs et des testeurs. &lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios.html#wwdccriteria-ios-wwdchtml"] = "[WWDC](./criteria-ios-wwdc.html)";
index.add({
    url: "criteria-ios.html#wwdccriteria-ios-wwdchtml",
    title: "[WWDC](./criteria-ios-wwdc.html)",    
    body: "## [WWDC](./criteria-ios-wwdc.html) Cette section regroupe des présentations concernant l'accessibilité faites par Apple à la World Wide Developers Conference présentée chaque année. &lt;/br&gt;Chacune de ces présentations est détaillée et chaque thème décrit fait référence à une indication temporelle au sein de la vidéo de façon à pouvoir le visualiser le plus rapidement possible. &lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios.html#testscriteria-ios-testhtml"] = "[Tests](./criteria-ios-test.html)";
index.add({
    url: "criteria-ios.html#testscriteria-ios-testhtml",
    title: "[Tests](./criteria-ios-test.html)",    
    body: "## [Tests](./criteria-ios-test.html) Cette partie contient l'ensemble des tests à réaliser afin de s'assurer que les recommandations iOS sont bien suivies.  &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["criteria-ios-test.html#tester-laccessibilite-dune-application-ios"] = "Tester l'accessibilité d'une application iOS";
index.add({
    url: "criteria-ios-test.html#tester-laccessibilite-dune-application-ios",
    title: "Tester l'accessibilité d'une application iOS",    
    body: "# Tester l'accessibilité d'une application iOS  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;iOS\&quot;, \&quot;url\&quot;: \&quot;./criteria-ios.html\&quot;},         {\&quot;label\&quot;:\&quot;Tests\&quot;} 	]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Critères de conception\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-conception.html\&quot;},          {\&quot;label\&quot;:\&quot;Guide pour les développeurs\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-dev.html\&quot;},         {\&quot;label\&quot;:\&quot;VoiceOver\&quot;,\&quot;url\&quot;:\&quot;lecteur-ecran-voiceover.html\&quot;},         {\&quot;label\&quot;:\&quot;WWDC\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-wwdc.html\&quot;},         {\&quot;label\&quot;:\&quot;Tests\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-test.html\&quot;, \&quot;expanded\&quot;: true}     ]);	 });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-ios\&quot;&gt;&lt;/span&gt;  Cette page décrit l'ensemble des tests nécessaires à l'évaluation d'une application iOS dans le cadre de l'accessibilité. &lt;/br&gt;&lt;/br&gt;Il est indispensable que **TOUS** les intervenants du projet connaissent les spécificités d'accessibilité iOS présentées sur ce site de façon à comprendre parfaitement le lien entre les besoins des utilisateurs et leur implémentation au sein de l'application à développer. &lt;/br&gt;&lt;/br&gt;Chacune des fonctionnalités doit être vue comme un élément impactant fortement le confort de l'utilisateur, comme une brique essentielle à connotation humaine et pas juste fonctionnelle. &lt;/br&gt;&lt;/br&gt;Que ce soit dans la conception, la réalisation ou la vérification, chaque décision se doit d'être particulièrement empathique de façon à fournir la meilleure expérience utilisateur possible.&lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios-test.html#pre-requis-fondamentaux"] = "Pré-requis fondamentaux";
index.add({
    url: "criteria-ios-test.html#pre-requis-fondamentaux",
    title: "Pré-requis fondamentaux",    
    body: "### Pré-requis fondamentaux - Consacrer le temps nécessaire à la maîtrise de la gestuelle ([VoiceOver](./lecteur-ecran-voiceover.html), contrôle de sélection). - Visionner les exemples d'utilisation fournis dans les [vidéos WWDC](./criteria-ios-wwdc.html). - Assimiler les [critères de conception](./criteria-ios-conception.html) pour s'asurer de la bonne voie sur laquelle on s'engage. - Pour les [développeurs](./criteria-ios-dev.html), ne pas hésiter à se créer des projets vierges en n'y incorporant que la partie impactant la fonctionnalité désirée afin de s'assurer qu'elle est parfaitement fonctionnelle et que seul l'environnement au sein de laquelle elle va être introduite risque éventuellement d'altérer son comportement. - Il faut absolument que les contenus web et les éléments tiers qui pourraient être utilisés au sein de l'application soient eux-mêmes déjà parfaitement accessibles.&lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios-test.html#environnement-de-travail"] = "Environnement de travail";
index.add({
    url: "criteria-ios-test.html#environnement-de-travail",
    title: "Environnement de travail",    
    body: "### Environnement de travail Quatre grandes familles peuvent être dépeintes au sein de chaque projet : - À l'initiative de tout ce qui va être créé, la **personne en charge de prioriser les fonctionnalités à implémenter** doit parfaitement comprendre les besoins utilisateurs et la façon de les décliner sous iOS. Cette personne doit s'assurer que des critères d'acceptations sont parfaitement définis pour chacune des fonctionnalités et que leur réalisation répond exactement à ce qui était demandé en vérifiant elle-même le fonctionnement souhaité. - L'équipe **DESIGN** doit réellement se mettre à la place de l'utilisateur de façon à fournir les préconisations les plus précises possibles en fonction des demandes projet en amont. - L'équipe **DÉVELOPPEMENT** doit grandement s'appuyer sur les [vidéos WWDC](./criteria-ios-wwdc.html) et sur le [guide pour les développeurs](./criteria-ios-dev.html) afin de trouver les solutions les plus appropriées aux différentes situations rencontrées. - L'équipe **TEST** doit parfaitement maîtriser la [gestuelle spécifique](./lecteur-ecran-voiceover.html) et comprendre toutes les possibilités offertes par iOS pour réaliser chacun des tests de façon optimum avant mise en production.  Quel que soit le mode de fonctionnement *(SCRUM, ...)*, les fonctions dévolues à chacune de ces équipes doivent être présentes au sein du projet. &lt;/br&gt;&lt;/br&gt;De façon à pouvoir s'assurer que les recommandations d'accessibilité iOS ont bien été prises en compte, deux modes d'évaluation sont à prévoir : - [**FONCTIONNEL**](#FunctionalMode) : on s'assure que l'utilisateur peut naviguer parmi tous les écrans sans soucis, en ayant accès à toute l'information visuelle mise à disposition et surtout sans avoir à se poser de questions. Le parcours utilisateur doit être fluide, simple et sans équivoque.  - [**TECHNIQUE**](#TechnicalMode) : on vérifie la conformité technique de certains éléments *(contraste des couleurs, taille d'icônes...)* tout en pouvant mettre en place des tests liés au code utilisé *(&lt;abbr&gt;TDD&lt;/abbr&gt;, &lt;abbr&gt;UI&lt;/abbr&gt;)*. Ce mode vient aussi souvent confirmer et solutionner certains problèmes fonctionnels rencontrés. &lt;/br&gt; &lt;a name=\&quot;FunctionalMode\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-test.html#evaluation-fonctionnelle"] = "Évaluation fonctionnelle";
index.add({
    url: "criteria-ios-test.html#evaluation-fonctionnelle",
    title: "Évaluation fonctionnelle",    
    body: "## Évaluation fonctionnelle La participation aux tests de cette partie ne nécessite aucune connaissance technique particulière si ce n'est savoir (dés)activer et utiliser des fonctionnalités d'accessibilité iOS. &lt;/br&gt;En plus des [critères de base](./criteria-ios-conception.html) à respecter, il est primordial de s'assurer que des [options d'accessibilité](./criteria-ios-conception.html#options-d-accessibilit-) activées par un utilisateur sont parfaitement opérationnelles dans toutes les pages de l'application développée. &lt;/br&gt;&lt;/br&gt;Ci-dessous, quelques critères importants à tester impérativement : - **Orientation de l'écran** : il est très fortement recommandé de pouvoir utiliser une application en mode portrait ou paysage. Cette [fonctionnalité](./criteria-ios-conception.html#orientation-de-l-cran) doit absolument être vérifiée pour tous les écrans d'une application. - **Limiter les animations visuelles** : lorsque des personnes sont susceptibles d'être plus ou moins gênées par les mouvements visuels, il faut absolument s'assurer que les éventuelles animations proposées répondent bien aux [souhaits de l'utilisateur](./criteria-ios-wwdc-18230.html#Motion). - **Réduire le floutage et la transparence** : victime de problèmes visuels, une personne peut rapidement trouver les effets de flou et de transparence très inconfortables. Il faut donc vérifier que l'[atténuation proposée par le système](./criteria-ios-wwdc-18230.html#TransparencyAndBlurring) est bien prise en compte sur les pages applicatives où ces effets sont implémentés. - **Mode sombre** : le résultat graphique de cette *nouvelle fonctionnalité iOS 13* doit absolument être vérifié pour s'assurer que les différents contrastes de couleurs utilisées sont conformes aux critères de conception, sans oublier l'option d'accessibilité [augmenter le contraste](./criteria-ios-conception.html#optionA11Y_contraste) qui est aussi un élément incontournable à vérifer dans ce contexte.  En plus de ces critères fondamentaux, il y a bien évidemment les incontournables iOS pour qualifer à minima une application d'accessible : - [Dynamic Type](#DynamicType) - [VoiceOver](#VoiceOver) - [Contrôle de sélection](#SwitchControl) &lt;/br&gt; &lt;a name=\&quot;DynamicType\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-test.html#dynamic-type"] = "Dynamic Type";
index.add({
    url: "criteria-ios-test.html#dynamic-type",
    title: "Dynamic Type",    
    body: "### Dynamic Type Pour bien comprendre comment le grossissement de texte fonctionne, il est fortement recommandé de visionner l'exemple proposé dans la [vidéo WWDC 2017](./criteria-ios-wwdc-17245.html#Demo) parfaitement résumée dans la partie WWDC de ce site. &lt;/br&gt;Afin de prendre en compte un panel conséquent de terminaux, il est conseillé de réaliser les tests avec trois terminaux de taille différente (**iPhone5SE**, **iPhoneX** et **iPhone8Plus** par exemple) avec lesquels **chaque page devra être visualisée**. &lt;/br&gt;&lt;/br&gt;Trois types de grossissement doivent être particulièrement étudiés de façon à déterminer le comportement visuel aux extrêmes : - Seuil le plus **bas SANS** accessibilité. - Seuil le plus **haut SANS** accessibilité. - Seuil le plus **haut AVEC** accessibilité.  &lt;img style=\&quot;max-width: 900px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/ios-test-DynamicType.png\&quot; /&gt; &lt;/br&gt;Enfin, les quelques points suivants sont à examiner minutieusement : - La **troncature '...' est à éviter** pour laisser place à la coupure du mot impacté identifiée par un trait d'union en fin de phrase. &lt;/br&gt;&lt;img style=\&quot;max-width: 200px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/ios-test-DynamicType_2.png\&quot; /&gt; - **Les illustrations comme les icônes doivent s'adapter au grossissement souhaité** : l'utilisation du [Large Content Viewer](./criteria-ios-wwdc-19261.html) après un appui long, l'implémentation d'un pinch à 2 doigts afin d’éviter à l’utilisateur d’avoir recours à la fonctionnalité `Zoom` ou encore le simple [grossissement d'un élément graphique](./criteria-ios-dev.html#taille-des-l-ments-graphiques) peuvent être des solutions selon les cas rencontrés. - Penser à **modifier le grossissement de texte au sein de chaque écran** pour s’assurer que tous ses éléments répondent parfaitement aux contraintes graphiques mises en place. - Dès que la **correction d’une anomalie** remontée sur un terminal est effective, elle **doit être vérifiée sur les autres terminaux utilisés en tests** afin de s'assurer que le problème est réellement éradiqué.  Les **tests** à réaliser pour le `Dynamic Type` sont **assez longs** car plusieurs terminaux sont à étudier et chaque écran est à vérifier avec une modification de la taille du texte à faire pour chacun des écrans. &lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;VoiceOver\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-test.html#voiceover"] = "VoiceOver";
index.add({
    url: "criteria-ios-test.html#voiceover",
    title: "VoiceOver",    
    body: "### VoiceOver L'activation du lecteur d'écran natif change radicalement les résultats obtenus par les gestes standards effectués sur l’écran tactile, c'est pourquoi son utilisation demande un certain temps d'adaptation pour une maîtrise de sa [gestuelle spécifique](./lecteur-ecran-voiceover.html). &lt;/br&gt;Il est donc **très fortement recommandé** de connaître au moins les gestes de base avant d'activer cette fonctionnalité à partir des réglages du terminal.  &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#VoiceOver-iOS13\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;iOS 13&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#VoiceOver-iOS12\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;iOS 12&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;VoiceOver-iOS13\&quot;      role=\&quot;tabpanel\&quot;&gt; &lt;img alt=\&quot;\&quot; style=\&quot;max-width: 950px; height: auto; \&quot; src=\&quot;./images/ios-test-VoiceOver_iOS13.png\&quot; /&gt; &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot;       id=\&quot;VoiceOver-iOS12\&quot;       role=\&quot;tabpanel\&quot; &gt; &lt;img style=\&quot;max-width: 900px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/ios-test-VoiceOver_iOS12.png\&quot; /&gt; &lt;/div&gt;&lt;/div&gt;  &lt;/br&gt;Pour aboutir à une parfaite implémentation de VoiceOver, il ne faut surtout pas croire que chaque élément doit absolument être vocalisé et se contenter de passer au suivant pour renouveler cette opération : ce type de réalisation est tout sauf productif ! &lt;/br&gt;&lt;/br&gt;Il faut bien avoir à l'esprit que l'**information** diffusée visuellement est assimilée en très peu de temps alors que celle fournie par le lecteur d'écran arrive de façon **séquentielle** à la vitesse de sélections successives d'éléments : un **effort énorme de mémorisation** est à fournir pour avoir une vision synoptique de l'écran et comprendre réellement ce qui est proposé. &lt;/br&gt;&lt;/br&gt;Pour mieux comprendre cette situation, il est recommandé de passer son écran en [mode \&quot;rideau\&quot;](./lecteur-ecran-voiceover.html#CurtainScreen) puis naviguer comme si on voyait l'écran. &lt;/br&gt;Cette opération est particulièrement utile lors de **premiers tests sur une application qu'on découvre** car on n'est pas influencé sur le parcours utilisateur qui serait déjà visionné inconsciemment. &lt;/br&gt;&lt;/br&gt;En plus des [critères de conception](./criteria-ios-conception.html) à respecter, quatre grands principes doivent rester à l'esprit lors de tests : - L'information visuelle doit être retranscrite vocalement. - L'utilisateur doit toujours savoir où il est et où il peut aller. - L'utilisateur ne doit pas se poser de questions, sa navigation doit se faire sans équivoque. - L'utilisateur doit réaliser un minimum de sélections au sein de l'écran.  Ici encore, les tests demandent beaucoup de temps et requièrent une forte empathie pour avancer des critiques constructives sur la façon dont l'information vocale doit être diffusée par VoiceOver. &lt;/br&gt;Maintenant, **si le lecteur d'écran n'est pas encore implémenté** sur une application déjà en diffusion publique, il est primordial d'en **informer l'utilisateur** dès [sélection de l'icône applicatif](./criteria-ios-dev.html#vocalisation-du-nom-de-l-application) en indiquant très clairement la situation de façon à en éviter une consultation catastrophique et décevante. &lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;SwitchControl\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-test.html#controle-de-selection"] = "Contrôle de sélection";
index.add({
    url: "criteria-ios-test.html#controle-de-selection",
    title: "Contrôle de sélection",    
    body: "### Contrôle de sélection L'utilisation du [contrôle de sélection](https://support.apple.com/fr-fr/HT201370) s'articule autour du mode point et du mode élément. &lt;/br&gt;&lt;img style=\&quot;max-width: 600px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/ios-test-SwitchControl.png\&quot; /&gt; &lt;/br&gt;La sélection des éléments avec le mode élément fonctionne globalement bien quand les éléments proposés sont natifs et que l'application n'est pas trop compliquée graphiquement. &lt;/br&gt;&lt;/br&gt;Il peut très bien arriver que ce mode de sélection ne suive pas la logique souhaitée et ne propose pas les éléments dans l'ordre désiré. &lt;/br&gt;Dans ce cas, les tests réalisés devront donc remonter toute amélioration nécessaire pour aboutir à la meilleure expérience utilisateur possible. &lt;/br&gt;&lt;/br&gt;*Remarque* : l'activation de cette fonctionnalité se fait elle aussi via les réglages du terminal.  &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#SwitchControl-iOS13\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;iOS 13&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#SwitchControl-iOS12\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;iOS 12&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;SwitchControl-iOS13\&quot;      role=\&quot;tabpanel\&quot;&gt; &lt;img alt=\&quot;\&quot; style=\&quot;max-width: 950px; height: auto; \&quot; src=\&quot;./images/ios-test-SwitchControl_iOS13.png\&quot; /&gt; &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot;       id=\&quot;SwitchControl-iOS12\&quot;       role=\&quot;tabpanel\&quot; &gt; &lt;img style=\&quot;max-width: 900px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/ios-test-SwitchControl_iOS12.png\&quot; /&gt; &lt;/div&gt;&lt;/div&gt;  &lt;/br&gt; &lt;a name=\&quot;TechnicalMode\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-test.html#evaluation-technique"] = "Évaluation technique";
index.add({
    url: "criteria-ios-test.html#evaluation-technique",
    title: "Évaluation technique",    
    body: "## Évaluation technique Comme son nom l'indique, cette partie requiert des connaissances plus ou moins pointues selon ce que l'on souhaite vérifer. &lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios-test.html#contraste-des-couleurs"] = "Contraste des couleurs";
index.add({
    url: "criteria-ios-test.html#contraste-des-couleurs",
    title: "Contraste des couleurs",    
    body: "### Contraste des couleurs Graphiquement, [ce point](./criteria-ios-conception.html#couleurs) est très certainement le plus facilement vérifiable grâce à certains logiciels à installer en local *(Colour Contrast Analyzer...)* ou à des sites web publics *(WebAIM...)*. &lt;/br&gt;L'outil &lt;span lang=\&quot;en\&quot;&gt;Accessibility Inspector&lt;/span&gt; dispose d'une fonctionnalité [&lt;span lang=\&quot;en\&quot;&gt;Color Contrast Calculator&lt;/span&gt;](./criteria-ios-wwdc-19000.html#ColorContrast) depuis Xcode 11 qui permet aussi de réaliser le même type de vérifications. &lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios-test.html#inspection-de-code"] = "Inspection de code";
index.add({
    url: "criteria-ios-test.html#inspection-de-code",
    title: "Inspection de code",    
    body: "### Inspection de code L'interface de développement Apple *(Xcode)* fournit un outil particulièrement intéressant intitulé **Accessibility Inspector**. &lt;/br&gt;L'intérêt et l'utilisation de cet outil ne seront pas développés ici car ils sont très bien expliqués dans les vidéos parfaitement détaillées [`Audit d'une app en accessibilité`](./criteria-ios-wwdc-16407.html) et [`Découvrir Accessibility Inspector`](./criteria-ios-wwdc-19000.html#AccessibilityInspector) dont le visionnage est très fortement recommandé. &lt;/br&gt;&lt;/br&gt; "
});

documentTitles["criteria-ios-test.html#tests-lies-au-code"] = "Tests liés au code";
index.add({
    url: "criteria-ios-test.html#tests-lies-au-code",
    title: "Tests liés au code",    
    body: "### Tests liés au code De façon à assurer une stabilité temporelle au niveau du code, des tests unitaires *(&lt;abbr&gt;TDD&lt;/abbr&gt;)* et graphiques *(&lt;abbr&gt;UI&lt;/abbr&gt;)* sont à mettre en place par les développeurs. &lt;/br&gt;Ces bonnes pratiques permettent de garantir une pérennité fonctionnelle en étant informé d'un éventuel écart introduit lors de développements ultérieurs.  &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["criteria-ios-wwdc.html#wwdc-world-wide-developers-conference"] = "WWDC : World Wide Developers Conference";
index.add({
    url: "criteria-ios-wwdc.html#wwdc-world-wide-developers-conference",
    title: "WWDC : World Wide Developers Conference",    
    body: "# WWDC : World Wide Developers Conference  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;iOS\&quot;, \&quot;url\&quot;: \&quot;./criteria-ios.html\&quot;},         {\&quot;label\&quot;:\&quot;WWDC\&quot;} 	]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Critères de conception\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-conception.html\&quot;},          {\&quot;label\&quot;:\&quot;Guide pour les développeurs\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-dev.html\&quot;},         {\&quot;label\&quot;:\&quot;VoiceOver\&quot;,\&quot;url\&quot;:\&quot;lecteur-ecran-voiceover.html\&quot;},         {\&quot;label\&quot;:\&quot;WWDC\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-wwdc.html\&quot;, \&quot;expanded\&quot;: true},         {\&quot;label\&quot;:\&quot;Tests\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-test.html\&quot;}     ]); });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-ios\&quot;&gt;&lt;/span&gt;  Cette partie regroupe des [présentations faites à la WWDC](https://developer.apple.com/videos/) et liées à l'accessibilité. &lt;/br&gt;Chacune de ces présentations est détaillée et comprend une description de chaque thème qui fait référence à une indication temporelle au sein de la vidéo. &lt;/br&gt;&lt;/br&gt;La plupart des illustrations proviennent des supports de présentations fournies par Apple et sont disponibles dans la partie `Resources` de l'onglet `Overview` propre à chaque vidéo. &lt;/br&gt;**L'accès au résumé de chacune de ces vidéos se fait en cliquant sur le titre ou directement sur l'image de présentation**.&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;  "
});

documentTitles["criteria-ios-wwdc.html#2019-large-content-viewercriteria-ios-wwdc-19261html"] = "[2019 - Large Content Viewer](./criteria-ios-wwdc-19261.html)";
index.add({
    url: "criteria-ios-wwdc.html#2019-large-content-viewercriteria-ios-wwdc-19261html",
    title: "[2019 - Large Content Viewer](./criteria-ios-wwdc-19261.html)",    
    body: "## [2019 - Large Content Viewer](./criteria-ios-wwdc-19261.html) Cette courte vidéo concerne la fonctionnalité **Large Content Viewer** apparue avec iOS 11 et les nouveautés iOS 13 associées. &lt;/br&gt;&lt;a href=\&quot;./criteria-ios-wwdc-19261.html\&quot;&gt;&lt;img style=\&quot;max-width: 700px; height: auto;\&quot; alt=\&quot;Accès aux quelques enseignements en accessibilité.\&quot; src=\&quot;./images/iOSdev/wwdc19-261.png\&quot; /&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;  "
});

documentTitles["criteria-ios-wwdc.html#2019-quelques-enseignements-en-accessibilitecriteria-ios-wwdc-19000html"] = "[2019 - Quelques enseignements en accessibilité](./criteria-ios-wwdc-19000.html)";
index.add({
    url: "criteria-ios-wwdc.html#2019-quelques-enseignements-en-accessibilitecriteria-ios-wwdc-19000html",
    title: "[2019 - Quelques enseignements en accessibilité](./criteria-ios-wwdc-19000.html)",    
    body: "## [2019 - Quelques enseignements en accessibilité](./criteria-ios-wwdc-19000.html) Cette session regroupe quatre courtes interventions toutes liées à l'accessibilité. &lt;/br&gt;&lt;a href=\&quot;./criteria-ios-wwdc-19000.html\&quot;&gt;&lt;img style=\&quot;max-width: 800px; height: auto;\&quot; alt=\&quot;Accès aux quelques enseignements en accessibilité.\&quot; src=\&quot;./images/iOSdev/wwdc19-000.png\&quot; /&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;  "
});

documentTitles["criteria-ios-wwdc.html#2018-fournir-une-experience-exceptionnelle-en-accessibilitecriteria-ios-wwdc-18230html"] = "[2018 - Fournir une expérience exceptionnelle en accessibilité](./criteria-ios-wwdc-18230.html)";
index.add({
    url: "criteria-ios-wwdc.html#2018-fournir-une-experience-exceptionnelle-en-accessibilitecriteria-ios-wwdc-18230html",
    title: "[2018 - Fournir une expérience exceptionnelle en accessibilité](./criteria-ios-wwdc-18230.html)",    
    body: "## [2018 - Fournir une expérience exceptionnelle en accessibilité](./criteria-ios-wwdc-18230.html) Présentation de toutes les fonctionnalités qui vont permettre de créer une application accessible répondant parfaitement aux attentes des utilisateurs. &lt;/br&gt;Le détail de leurs mises en oeuvre est exposé aux développeurs par le biais d'une démonstration de façon à saisir la logique à suivre quel que soit le contexte. &lt;/br&gt;&lt;a href=\&quot;./criteria-ios-wwdc-18230.html\&quot;&gt;&lt;img style=\&quot;max-width: 700px; height: auto;\&quot; alt=\&quot;Accès à fournir une expérience exceptionnelle en accessibilité.\&quot; src=\&quot;./images/iOSdev/wwdc18-230.png\&quot; /&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;      "
});

documentTitles["criteria-ios-wwdc.html#2018-utiliser-une-voix-synthetiseecriteria-ios-wwdc-18236html"] = "[2018 - Utiliser une voix synthétisée](./criteria-ios-wwdc-18236.html)";
index.add({
    url: "criteria-ios-wwdc.html#2018-utiliser-une-voix-synthetiseecriteria-ios-wwdc-18236html",
    title: "[2018 - Utiliser une voix synthétisée](./criteria-ios-wwdc-18236.html)",    
    body: "## [2018 - Utiliser une voix synthétisée](./criteria-ios-wwdc-18236.html) Cette très courte vidéo présente les éléments principaux à mettre en oeuvre pour implémenter une vocalisation synthétisée. &lt;/br&gt;&lt;a href=\&quot;./criteria-ios-wwdc-18236.html\&quot;&gt;&lt;img style=\&quot;max-width: 466px; height: auto;\&quot; alt=\&quot;Accès à utiliser une voix synthétisée.\&quot; src=\&quot;./images/iOSdev/wwdc18-236.png\&quot; /&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;      "
});

documentTitles["criteria-ios-wwdc.html#2017-les-nouveautes-en-accessibilitecriteria-ios-wwdc-17215html"] = "[2017 - Les nouveautés en accessibilité](./criteria-ios-wwdc-17215.html)";
index.add({
    url: "criteria-ios-wwdc.html#2017-les-nouveautes-en-accessibilitecriteria-ios-wwdc-17215html",
    title: "[2017 - Les nouveautés en accessibilité](./criteria-ios-wwdc-17215.html)",    
    body: "## [2017 - Les nouveautés en accessibilité](./criteria-ios-wwdc-17215.html) Présentation des nouvelles fonctionnalités d'accessibilité iOS 11 en associant la pratique de l'utilisateur à la conception du développeur. &lt;/br&gt;&lt;a href=\&quot;./criteria-ios-wwdc-17215.html\&quot;&gt;&lt;img style=\&quot;max-width: 700px; height: auto;\&quot; alt=\&quot;Accès aux nouveautés en accessibilité 2017.\&quot; src=\&quot;./images/iOSdev/wwdc17-215.png\&quot; /&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;  "
});

documentTitles["criteria-ios-wwdc.html#2017-application-du-dynamic-typecriteria-ios-wwdc-17245html"] = "[2017 - Application du Dynamic Type](./criteria-ios-wwdc-17245.html)";
index.add({
    url: "criteria-ios-wwdc.html#2017-application-du-dynamic-typecriteria-ios-wwdc-17245html",
    title: "[2017 - Application du Dynamic Type](./criteria-ios-wwdc-17245.html)",    
    body: "## [2017 - Application du Dynamic Type](./criteria-ios-wwdc-17245.html) Permettre à l'utilisateur de déterminer la taille de texte nécessaire à son confort visuel et adapter son application à cette modification sont des éléments essentiels que le `Dynamic Type` met en avant. &lt;/br&gt;Cette vidéo propose à la fois une approche théorique pour bien comprendre les possibilités offertes par le `Dynamic Type` ainsi qu'une partie purement pratique au niveau développeur pour lui éviter de tomber dans les écueils classiques de programmation. &lt;/br&gt;&lt;a href=\&quot;./criteria-ios-wwdc-17245.html\&quot;&gt;&lt;img style=\&quot;max-width: 700px; height: auto;\&quot; alt=\&quot;Accès à l'application du dynalic type.\&quot; src=\&quot;./images/iOSdev/wwdc17-245.png\&quot; /&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;  "
});

documentTitles["criteria-ios-wwdc.html#2016-les-nouveautes-en-accessibilitecriteria-ios-wwdc-16202html"] = "[2016 - Les nouveautés en accessibilité](./criteria-ios-wwdc-16202.html)";
index.add({
    url: "criteria-ios-wwdc.html#2016-les-nouveautes-en-accessibilitecriteria-ios-wwdc-16202html",
    title: "[2016 - Les nouveautés en accessibilité](./criteria-ios-wwdc-16202.html)",    
    body: "## [2016 - Les nouveautés en accessibilité](./criteria-ios-wwdc-16202.html) Présentation des nouvelles fonctionnalités d'accessibilité iOS, MacOS, tvOS et WatchOS en associant la pratique de l'utilisateur à la conception du développeur. &lt;/br&gt;&lt;a href=\&quot;./criteria-ios-wwdc-16202.html\&quot;&gt;&lt;img style=\&quot;max-width: 700px; height: auto;\&quot; alt=\&quot;Accès aux nouveautés en accessibilité 2016.\&quot; src=\&quot;./images/iOSdev/wwdc16-202.png\&quot; /&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;      "
});

documentTitles["criteria-ios-wwdc.html#2016-audit-dune-app-en-accessibilitecriteria-ios-wwdc-16407html"] = "[2016 - Audit d'une app en accessibilité](./criteria-ios-wwdc-16407.html)";
index.add({
    url: "criteria-ios-wwdc.html#2016-audit-dune-app-en-accessibilitecriteria-ios-wwdc-16407html",
    title: "[2016 - Audit d'une app en accessibilité](./criteria-ios-wwdc-16407.html)",    
    body: "## [2016 - Audit d'une app en accessibilité](./criteria-ios-wwdc-16407.html) Après un rappel sur le fonctionnement de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; au niveau programmatique, cette présentation va détailler les différentes fonctionnalités proposées par l'outil &lt;span lang=\&quot;en\&quot;&gt;Accessibility Inspector&lt;/span&gt; de Xcode en s'appuyant sur un exemple très simple pour une mise en situation concrète. &lt;/br&gt;&lt;a href=\&quot;./criteria-ios-wwdc-16407.html\&quot;&gt;&lt;img style=\&quot;max-width: 700px; height: auto;\&quot; alt=\&quot;Accès à l'audit d'une app en accessibilité\&quot; src=\&quot;./images/iOSdev/wwdc16-407.png\&quot; /&gt;      &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["criteria-ios-wwdc-16202.html#wwdc-2016-les-nouveautes-en-accessibilite"] = "WWDC 2016 : Les nouveautés en accessibilité";
index.add({
    url: "criteria-ios-wwdc-16202.html#wwdc-2016-les-nouveautes-en-accessibilite",
    title: "WWDC 2016 : Les nouveautés en accessibilité",    
    body: "# WWDC 2016 : Les nouveautés en accessibilité  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;iOS\&quot;, \&quot;url\&quot;: \&quot;./criteria-ios.html\&quot;},                    {\&quot;label\&quot;:\&quot;WWDC\&quot;, \&quot;url\&quot;: \&quot;./criteria-ios-wwdc.html\&quot;},                    {\&quot;label\&quot;:\&quot;2016 - Les nouveautés en accessibilité\&quot;} 	]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Critères de conception\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-conception.html\&quot;},          {\&quot;label\&quot;:\&quot;Guide pour les développeurs\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-dev.html\&quot;},         {\&quot;label\&quot;:\&quot;VoiceOver\&quot;,\&quot;url\&quot;:\&quot;lecteur-ecran-voiceover.html\&quot;},         {\&quot;label\&quot;:\&quot;WWDC\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-wwdc.html\&quot;},         {\&quot;label\&quot;:\&quot;Tests\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-test.html\&quot;}     ]); });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-ios\&quot;&gt;&lt;/span&gt;  Cette présentation visualisable sur le **site développeur officiel d'Apple** ([session 202](https://developer.apple.com/videos/play/wwdc2016/202/)) a pour buts de mettre en avant les principales nouveautés en terme d'accessibilité et de rappeler quelques fondamentaux avec une importance notable pour &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;. &lt;/br&gt;&lt;img style=\&quot;max-width: 700px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc16-202.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;Les thèmes abordés ainsi que leur référence temporelle au sein de la vidéo sont décrits ci-dessous :  - **Fonctionnalités**     - [MOTEUR - Switch Control](#SwitchControl) (02:29) ⟹ **nouveauté tvOS 10**     - [MOTEUR - Dwell Control](#DwellControl) (03:36)     - [VUE - Adaptation des couleurs](#DisplayAdjustments) (04:15) ⟹ **nouveauté tvOS 10**     - [VUE - Taptic time](#TapticTime) (04:53)     - [VUE - Loupe](#Magnifier) (05:17) ⟹ **nouveauté iOS 10**     - [OUÏE - TTY](#SoftwareTTY) (06:51) ⟹ **nouveauté iOS 10**     - [APPRENTISSAGE - Retour audio d'écriture](#EnhancedTypingFeedback) (07:51)  - **Programmation**     - [Découvrir le protocole UIAccessibility](#UIAccessibilityProtocol) (14:19)     - [accessibilityElements](#accessibilityElements) (18:00)     - [accessibilityFrameInContainerSpace](#accessibilityFrameInContainerSpace) (19:02) ⟹ **nouveauté iOS 10**     - [accessibilityCustomRotors](#accessibilityCustomRotors) (24:19) ⟹ **nouveauté iOS 10**     - [tvOS header elements](#tvOS) (31:20)  - **Exemple** : au cours de cette présentation, de nombreuses solutions sont proposées par le biais d'une application d'exemple pour répondre aux questions que se posent les développeurs face aux problèmes rencontrés en accessibilité avec &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;. Il est vivement conseillé de regarder l'[application d'exemple sans améliorations](https://developer.apple.com/videos/play/wwdc2016/202/?time=698) avant de consulter les solutions. Une fois tous les problèmes soulevés par ces questions solutionnés, l'accessibilité VoiceOver de l'application s'améliore nettement pour aboutir à la [démonstration](https://developer.apple.com/videos/play/wwdc2016/202/?time=1753) réalisée en séance.     - Rendre une `table view cell` activable [(19:58)](https://developer.apple.com/videos/play/wwdc2016/202/?time=1198).     - Mettre un `label` dynamique sur un bouton [(20:21)](https://developer.apple.com/videos/play/wwdc2016/202/?time=1221).     - Rendre accessibles des éléments `CALayer` utilisés pour créer un graphe par exemple [(20:45)](https://developer.apple.com/videos/play/wwdc2016/202/?time=1245).     - Comprendre la problématique de navigation sur un plan avec VoiceOver [(23:33)](https://developer.apple.com/videos/play/wwdc2016/202/?time=1413).     - Effectuer une recherche concernant les éléments d'une `table view` [(25:37)](https://developer.apple.com/videos/play/wwdc2016/202/?time=1537) et d'un plan [(27:45)](https://developer.apple.com/videos/play/wwdc2016/202/?time=1665) avec le `rotor`.  Par la suite, le fait de cliquer sur un titre permet d'ouvrir la vidéo de présentation &lt;span lang=\&quot;en\&quot;&gt;Apple&lt;/span&gt; directement au moment indiqué. &lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;SwitchControl\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-16202.html#moteur-switch-control-0229httpsdeveloperapplecomvideosplaywwdc2016202time149"] = "[MOTEUR - Switch Control (02:29)](https://developer.apple.com/videos/play/wwdc2016/202/?time=149)";
index.add({
    url: "criteria-ios-wwdc-16202.html#moteur-switch-control-0229httpsdeveloperapplecomvideosplaywwdc2016202time149",
    title: "[MOTEUR - Switch Control (02:29)](https://developer.apple.com/videos/play/wwdc2016/202/?time=149)",    
    body: "### [MOTEUR - Switch Control (02:29)](https://developer.apple.com/videos/play/wwdc2016/202/?time=149) Après un petit rappel sur l'utilisation iOS de cette fonctionnalité, un focus particulier est mis sur son **introduction avec tvOS**. &lt;/br&gt;&lt;img style=\&quot;max-width: 700px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc16-202-SwitchControl.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;DwellControl\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-16202.html#moteur-dwell-control-0336httpsdeveloperapplecomvideosplaywwdc2016202time216"] = "[MOTEUR - Dwell Control (03:36)](https://developer.apple.com/videos/play/wwdc2016/202/?time=216)";
index.add({
    url: "criteria-ios-wwdc-16202.html#moteur-dwell-control-0336httpsdeveloperapplecomvideosplaywwdc2016202time216",
    title: "[MOTEUR - Dwell Control (03:36)](https://developer.apple.com/videos/play/wwdc2016/202/?time=216)",    
    body: "### [MOTEUR - Dwell Control (03:36)](https://developer.apple.com/videos/play/wwdc2016/202/?time=216) Des appareils spécifiques connectés à l'ordinateur permettent de l'utiliser sans avoir à manipuler la souris en associant le mouvement de cette dernière à celui des yeux. &lt;/br&gt;Lorsque le curseur se stabilise, un timer est lancé à l'expiration duquel une action dédiée est déclenchée *(nouveauté MacOS)*.  &lt;/br&gt;&lt;img style=\&quot;max-width: 700px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc16-202-DwellControl.png\&quot; /&gt; &lt;a name=\&quot;DisplayAdjustments\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-16202.html#vue-adaptation-des-couleurs-0415httpsdeveloperapplecomvideosplaywwdc2016202time255"] = "[VUE - Adaptation des couleurs (04:15)](https://developer.apple.com/videos/play/wwdc2016/202/?time=255)";
index.add({
    url: "criteria-ios-wwdc-16202.html#vue-adaptation-des-couleurs-0415httpsdeveloperapplecomvideosplaywwdc2016202time255",
    title: "[VUE - Adaptation des couleurs (04:15)](https://developer.apple.com/videos/play/wwdc2016/202/?time=255)",    
    body: "### [VUE - Adaptation des couleurs (04:15)](https://developer.apple.com/videos/play/wwdc2016/202/?time=255) Toutes les facilités déjà présentes sur iOS et MacOS pour aider au maximum les personnes ayant des problèmes de reconnaissance de couleurs ou une forte sensibilité à la lumière sont désormais aussi **disponibles sur tvOS**. &lt;/br&gt;&lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;TapticTime\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-16202.html#vue-taptic-time-0453httpsdeveloperapplecomvideosplaywwdc2016202time293"] = "[VUE - Taptic time (04:53)](https://developer.apple.com/videos/play/wwdc2016/202/?time=293)";
index.add({
    url: "criteria-ios-wwdc-16202.html#vue-taptic-time-0453httpsdeveloperapplecomvideosplaywwdc2016202time293",
    title: "[VUE - Taptic time (04:53)](https://developer.apple.com/videos/play/wwdc2016/202/?time=293)",    
    body: "### [VUE - Taptic time (04:53)](https://developer.apple.com/videos/play/wwdc2016/202/?time=293) **WatchOS 3** introduit cette fonctionnalité qui permet via VoiceOver de mettre en oeuvre toute une **série de taps** spécifiques **pour donner l'heure** d'une façon très silencieuse et discrète. &lt;/br&gt;&lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;Magnifier\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-16202.html#vue-loupe-0517httpsdeveloperapplecomvideosplaywwdc2016202time317"] = "[VUE - Loupe (05:17)](https://developer.apple.com/videos/play/wwdc2016/202/?time=317)";
index.add({
    url: "criteria-ios-wwdc-16202.html#vue-loupe-0517httpsdeveloperapplecomvideosplaywwdc2016202time317",
    title: "[VUE - Loupe (05:17)](https://developer.apple.com/videos/play/wwdc2016/202/?time=317)",    
    body: "### [VUE - Loupe (05:17)](https://developer.apple.com/videos/play/wwdc2016/202/?time=317) Cette **nouveauté iOS 10** permet d'utiliser son appareil mobile comme une loupe en associant des fonctionnalités d'accessibilité *(stabilisateur d'écran, filtres de couleurs...)* mises en situation par une [démonstration](https://developer.apple.com/videos/play/wwdc2016/202/?time=344) au sein de cette présentation. &lt;/br&gt;&lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;SoftwareTTY\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-16202.html#ouie-tty-0651httpsdeveloperapplecomvideosplaywwdc2016202time411"] = "[OUÏE - TTY (06:51)](https://developer.apple.com/videos/play/wwdc2016/202/?time=411)";
index.add({
    url: "criteria-ios-wwdc-16202.html#ouie-tty-0651httpsdeveloperapplecomvideosplaywwdc2016202time411",
    title: "[OUÏE - TTY (06:51)](https://developer.apple.com/videos/play/wwdc2016/202/?time=411)",    
    body: "### [OUÏE - TTY (06:51)](https://developer.apple.com/videos/play/wwdc2016/202/?time=411) L'utilisation du **TTY** *(Typewriter)* qui permet de faire passer du texte sur une ligne téléphonique grâce des appareils dédiés est désormais possible sur iOS. &lt;/br&gt;Cette **nouveauté iOS 10** sous forme d'**implémentation software** permet donc de réaliser ce type de conversation directement sur son appareil mobile sans avoir à ajouter quelque complément matériel que ce soit.  &lt;/br&gt;&lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;EnhancedTypingFeedback\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-16202.html#apprentissage-retour-audio-decriture-0751httpsdeveloperapplecomvideosplaywwdc2016202time471"] = "[APPRENTISSAGE - Retour audio d'écriture (07:51)](https://developer.apple.com/videos/play/wwdc2016/202/?time=471)";
index.add({
    url: "criteria-ios-wwdc-16202.html#apprentissage-retour-audio-decriture-0751httpsdeveloperapplecomvideosplaywwdc2016202time471",
    title: "[APPRENTISSAGE - Retour audio d'écriture (07:51)](https://developer.apple.com/videos/play/wwdc2016/202/?time=471)",    
    body: "### [APPRENTISSAGE - Retour audio d'écriture (07:51)](https://developer.apple.com/videos/play/wwdc2016/202/?time=471) Outre les améliorations réalisées sur `Énoncer la sélection` et `Énoncer le contenu de l'écran` dans la partie `Accessibilité - Parole` des réglages, un retour audio sur ce qui est tapé à l'écran par l'utilisateur a aussi été implémenté. &lt;/br&gt;Cette **nouveauté iOS 10** permet à des personnes dyslexiques par exemple de vérifier directement leurs écrits qu'une [démonstration](https://developer.apple.com/videos/play/wwdc2016/202/?time=496) au sein de cette présentation met en évidence. &lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;UIAccessibilityProtocol\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-16202.html#decouvrir-le-protocole-uiaccessibility-1419httpsdeveloperapplecomvideosplaywwdc2016202time859"] = "[Découvrir le protocole UIAccessibility (14:19)](https://developer.apple.com/videos/play/wwdc2016/202/?time=859)";
index.add({
    url: "criteria-ios-wwdc-16202.html#decouvrir-le-protocole-uiaccessibility-1419httpsdeveloperapplecomvideosplaywwdc2016202time859",
    title: "[Découvrir le protocole UIAccessibility (14:19)](https://developer.apple.com/videos/play/wwdc2016/202/?time=859)",    
    body: "### [Découvrir le protocole UIAccessibility (14:19)](https://developer.apple.com/videos/play/wwdc2016/202/?time=859) Petit rappel sur les fondements du protocole informel `UIAccessibility` qui va être utilisé dans la suite de la présentation. &lt;/br&gt;&lt;img style=\&quot;max-width: 550px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc16-202-UIAccessibilityProtocol.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;accessibilityElements\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-16202.html#accessibilityelements-1800httpsdeveloperapplecomvideosplaywwdc2016202time1080"] = "[accessibilityElements (18:00)](https://developer.apple.com/videos/play/wwdc2016/202/?time=1080)";
index.add({
    url: "criteria-ios-wwdc-16202.html#accessibilityelements-1800httpsdeveloperapplecomvideosplaywwdc2016202time1080",
    title: "[accessibilityElements (18:00)](https://developer.apple.com/videos/play/wwdc2016/202/?time=1080)",    
    body: "### [accessibilityElements (18:00)](https://developer.apple.com/videos/play/wwdc2016/202/?time=1080) Rappel sur l'intérêt de créer ce type d'objets et le contexte au sein duquel ils évoluent. &lt;/br&gt;&lt;img style=\&quot;max-width: 575px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc16-202-accessibilityElements.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;accessibilityFrameInContainerSpace\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-16202.html#accessibilityframeincontainerspace-1902httpsdeveloperapplecomvideosplaywwdc2016202time1142"] = "[accessibilityFrameInContainerSpace (19:02)](https://developer.apple.com/videos/play/wwdc2016/202/?time=1142)";
index.add({
    url: "criteria-ios-wwdc-16202.html#accessibilityframeincontainerspace-1902httpsdeveloperapplecomvideosplaywwdc2016202time1142",
    title: "[accessibilityFrameInContainerSpace (19:02)](https://developer.apple.com/videos/play/wwdc2016/202/?time=1142)",    
    body: "### [accessibilityFrameInContainerSpace (19:02)](https://developer.apple.com/videos/play/wwdc2016/202/?time=1142) **Nouveauté iOS 10** qui permet la gestion automatique des coordonnées d'un élément accessible dans son `container`. &lt;/br&gt;&lt;img style=\&quot;max-width: 575px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc16-202-accessibilityFrameInContainerSpace.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;accessibilityCustomRotors\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-16202.html#accessibilitycustomrotors-2419httpsdeveloperapplecomvideosplaywwdc2016202time1459"] = "[accessibilityCustomRotors (24:19)](https://developer.apple.com/videos/play/wwdc2016/202/?time=1459)";
index.add({
    url: "criteria-ios-wwdc-16202.html#accessibilitycustomrotors-2419httpsdeveloperapplecomvideosplaywwdc2016202time1459",
    title: "[accessibilityCustomRotors (24:19)](https://developer.apple.com/videos/play/wwdc2016/202/?time=1459)",    
    body: "### [accessibilityCustomRotors (24:19)](https://developer.apple.com/videos/play/wwdc2016/202/?time=1459) **Nouveauté iOS 10** qui permet d'ajouter des éléments personnalisés sur le `rotor` natif d'un terminal. &lt;/br&gt;&lt;img style=\&quot;max-width: 775px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc16-202-accessibilityCustomRotors.png\&quot; /&gt; &lt;/br&gt;La mise en place programmatique de ce type de fonctionnement est aussi présentée dans la partie [développement](./criteria-ios-dev.html#rotor-personnalis-). &lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;tvOS\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-16202.html#tvos-header-elements-3120httpsdeveloperapplecomvideosplaywwdc2016202time1880"] = "[tvOS header elements (31:20)](https://developer.apple.com/videos/play/wwdc2016/202/?time=1880)";
index.add({
    url: "criteria-ios-wwdc-16202.html#tvos-header-elements-3120httpsdeveloperapplecomvideosplaywwdc2016202time1880",
    title: "[tvOS header elements (31:20)](https://developer.apple.com/videos/play/wwdc2016/202/?time=1880)",    
    body: "### [tvOS header elements (31:20)](https://developer.apple.com/videos/play/wwdc2016/202/?time=1880) Rappel sur l'implémentation des éléments cités en objet ainsi que sur leur intérêt avec une navigation VoiceOver au sein de l'univers tvOS. &lt;/br&gt;&lt;img style=\&quot;max-width: 500px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc16-202-tvOS_1.png\&quot; /&gt; &lt;/br&gt;&lt;img style=\&quot;max-width: 450px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc16-202-tvOS_2.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt; &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["criteria-ios-wwdc-16407.html#wwdc-2016-audit-dune-app-en-accessibilite"] = "WWDC 2016 : Audit d'une app en accessibilité";
index.add({
    url: "criteria-ios-wwdc-16407.html#wwdc-2016-audit-dune-app-en-accessibilite",
    title: "WWDC 2016 : Audit d'une app en accessibilité",    
    body: "# WWDC 2016 : Audit d'une app en accessibilité  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;iOS\&quot;, \&quot;url\&quot;: \&quot;./criteria-ios.html\&quot;},                    {\&quot;label\&quot;:\&quot;WWDC\&quot;, \&quot;url\&quot;: \&quot;./criteria-ios-wwdc.html\&quot;},                    {\&quot;label\&quot;:\&quot;2016 - Audit d'une app en accessibilité\&quot;} 	]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Critères de conception\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-conception.html\&quot;},          {\&quot;label\&quot;:\&quot;Guide pour les développeurs\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-dev.html\&quot;},         {\&quot;label\&quot;:\&quot;VoiceOver\&quot;,\&quot;url\&quot;:\&quot;lecteur-ecran-voiceover.html\&quot;},         {\&quot;label\&quot;:\&quot;WWDC\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-wwdc.html\&quot;},         {\&quot;label\&quot;:\&quot;Tests\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-test.html\&quot;}     ]); });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-ios\&quot;&gt;&lt;/span&gt;  Cette présentation visualisable sur le **site développeur officiel d'Apple** ([session 407](https://developer.apple.com/videos/play/wwdc2016/407/)) a pour but d'expliquer l'outil de développement &lt;span lang=\&quot;en\&quot;&gt;Accessibility Inspector&lt;/span&gt; et comment l'utiliser par le biais d'une application d'exemple très simple. &lt;/br&gt;&lt;img style=\&quot;max-width: 200px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc16-logo.png\&quot; /&gt; &lt;img style=\&quot;max-width: 700px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc16-407.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;Les thèmes abordés ainsi que leur référence temporelle au sein de la vidéo sont décrits ci-dessous : - [Accessibility Inspector](#AccessibilityInspector) (09:38) - [Audit](#Audit) (11:21) - [Inspection](#Inspection) (20:30) - [Settings](#Settings) (28:33)  À la fin de cette présentation, il est très fortement recommandé de consulter les [nouveautés Xcode 11 de l'outil Accessibilty Inspector](./criteria-ios-wwdc-19000.html#AccessibilityInspector) de façon à connaître parfaitement la toute dernière version. &lt;/br&gt;&lt;/br&gt;Par la suite, le fait de cliquer sur un titre permet d'ouvrir la vidéo de présentation &lt;span lang=\&quot;en\&quot;&gt;Apple&lt;/span&gt; directement au moment indiqué.  &lt;a name=\&quot;AccessibilityInspector\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-16407.html#accessibility-inspector-0938httpsdeveloperapplecomvideosplaywwdc2016407time578"] = "[Accessibility Inspector (09:38)](https://developer.apple.com/videos/play/wwdc2016/407/?time=578)";
index.add({
    url: "criteria-ios-wwdc-16407.html#accessibility-inspector-0938httpsdeveloperapplecomvideosplaywwdc2016407time578",
    title: "[Accessibility Inspector (09:38)](https://developer.apple.com/videos/play/wwdc2016/407/?time=578)",    
    body: "### [Accessibility Inspector (09:38)](https://developer.apple.com/videos/play/wwdc2016/407/?time=578) Présentation générale de l'outil en décrivant son contenu ainsi que les différents thèmes autour desquels va s'articuler cette présentation. &lt;/br&gt;&lt;img style=\&quot;max-width: 1000px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc16-407-AccessibilityInspector.png\&quot; /&gt; &lt;/br&gt;La suite va s'attacher à détailler spécifiquement les parties &lt;span lang=\&quot;en\&quot;&gt;audit&lt;/span&gt;, &lt;span lang=\&quot;en\&quot;&gt;inspection&lt;/span&gt; et &lt;span lang=\&quot;en\&quot;&gt;settings&lt;/span&gt;.  &lt;a name=\&quot;Audit\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-16407.html#audit-1121httpsdeveloperapplecomvideosplaywwdc2016407time681"] = "[Audit (11:21)](https://developer.apple.com/videos/play/wwdc2016/407/?time=681)";
index.add({
    url: "criteria-ios-wwdc-16407.html#audit-1121httpsdeveloperapplecomvideosplaywwdc2016407time681",
    title: "[Audit (11:21)](https://developer.apple.com/videos/play/wwdc2016/407/?time=681)",    
    body: "### [Audit (11:21)](https://developer.apple.com/videos/play/wwdc2016/407/?time=681) Explications fournies sur l'intérêt et l'utilisation de cette fonctionnalité avec une démonstration par un exemple pratique [(12:22)](https://developer.apple.com/videos/play/wwdc2016/407/?time=742) qui permet de mettre en avant la façon de trouver une solution au problème décelé par l'outil [(14:24)](https://developer.apple.com/videos/play/wwdc2016/407/?time=864) tout en pouvant remonter rapidement ce problème sous forme de rapport [(17:07)](https://developer.apple.com/videos/play/wwdc2016/407/?time=1027). &lt;/br&gt;&lt;img style=\&quot;max-width: 600px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc16-407-Audit.png\&quot; /&gt; &lt;/br&gt;Ce type d'audit automatique est très important mais un **audit manuel** complémentaire est **indispensable** car il permet d'éviter des écueils qui pourraient être dévastateurs dans l'utilisation de l'application [(18:55)](https://developer.apple.com/videos/play/wwdc2016/407/?time=1135).  &lt;a name=\&quot;Inspection\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-16407.html#inspection-2030httpsdeveloperapplecomvideosplaywwdc2016407time1230"] = "[Inspection (20:30)](https://developer.apple.com/videos/play/wwdc2016/407/?time=1230)";
index.add({
    url: "criteria-ios-wwdc-16407.html#inspection-2030httpsdeveloperapplecomvideosplaywwdc2016407time1230",
    title: "[Inspection (20:30)](https://developer.apple.com/videos/play/wwdc2016/407/?time=1230)",    
    body: "### [Inspection (20:30)](https://developer.apple.com/videos/play/wwdc2016/407/?time=1230) Seconde fonctionnalité expliquée en s'appuyant sur un exemple [(21:58)](https://developer.apple.com/videos/play/wwdc2016/407/?time=1318) qui peut permettre de déceler différents types de problèmes : - Ordonnancement chaotique d'éléments dans la navigation. [(23:11)](https://developer.apple.com/videos/play/wwdc2016/407/?time=1391) - Description absconse d'un élément. [(23:34)](https://developer.apple.com/videos/play/wwdc2016/407/?time=1414) - Action non souhaitée déclenchée par un élément. [(24:02)](https://developer.apple.com/videos/play/wwdc2016/407/?time=1442)  Lors de la visualisation de la hiérarchie des éléments par cette fonctionnalité [(24:40)](https://developer.apple.com/videos/play/wwdc2016/407/?time=1480), il est précisé que les composants gérés par &lt;span lang=\&quot;en\&quot;&gt;CALayer&lt;/span&gt; ne sont pas traités nativement par &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;. &lt;/br&gt;&lt;img style=\&quot;max-width: 600px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc16-407-Inspection.png\&quot; /&gt;  &lt;a name=\&quot;Settings\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-16407.html#settings-2833httpsdeveloperapplecomvideosplaywwdc2016407time1713"] = "[Settings (28:33)](https://developer.apple.com/videos/play/wwdc2016/407/?time=1713)";
index.add({
    url: "criteria-ios-wwdc-16407.html#settings-2833httpsdeveloperapplecomvideosplaywwdc2016407time1713",
    title: "[Settings (28:33)](https://developer.apple.com/videos/play/wwdc2016/407/?time=1713)",    
    body: "### [Settings (28:33)](https://developer.apple.com/videos/play/wwdc2016/407/?time=1713) Dernière fonctionnalité de l'outil qui permet d'éviter des allers-retours entre l'application testée et les modifications des principaux réglages d'accessibilité qu'une démonstration met en évidence [(30:25)](https://developer.apple.com/videos/play/wwdc2016/407/?time=1825). &lt;/br&gt;&lt;img style=\&quot;max-width: 600px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc16-407-Settings.png\&quot; /&gt;  &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["criteria-ios-wwdc-17215.html#wwdc-2017-les-nouveautes-en-accessibilite"] = "WWDC 2017 : les nouveautés en accessibilité";
index.add({
    url: "criteria-ios-wwdc-17215.html#wwdc-2017-les-nouveautes-en-accessibilite",
    title: "WWDC 2017 : les nouveautés en accessibilité",    
    body: "# WWDC 2017 : les nouveautés en accessibilité  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;iOS\&quot;, \&quot;url\&quot;: \&quot;./criteria-ios.html\&quot;},                    {\&quot;label\&quot;:\&quot;WWDC\&quot;, \&quot;url\&quot;: \&quot;./criteria-ios-wwdc.html\&quot;},                    {\&quot;label\&quot;:\&quot;2017 - Les nouveautés en accessibilité\&quot;} 	]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Critères de conception\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-conception.html\&quot;},          {\&quot;label\&quot;:\&quot;Guide pour les développeurs\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-dev.html\&quot;},         {\&quot;label\&quot;:\&quot;VoiceOver\&quot;,\&quot;url\&quot;:\&quot;lecteur-ecran-voiceover.html\&quot;},         {\&quot;label\&quot;:\&quot;WWDC\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-wwdc.html\&quot;},         {\&quot;label\&quot;:\&quot;Tests\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-test.html\&quot;}     ]); });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-ios\&quot;&gt;&lt;/span&gt;  Cette présentation visualisable sur le **site développeur officiel d'Apple** ([session 215](https://developer.apple.com/videos/play/wwdc2017/215/)) a pour but de mettre en avant les principales nouveautés iOS 11 en terme d'accessibilité avec une importance notable pour &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;. &lt;/br&gt;&lt;img style=\&quot;max-width: 200px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc17-logo.png\&quot; /&gt; &lt;img style=\&quot;max-width: 700px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc17-215.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;Les thèmes abordés ainsi que leur référence temporelle au sein de la vidéo sont décrits ci-dessous : - [Détection de texte dans une image](#ImageTextDetection) (07:07) ⟹ **nouveauté iOS 11** - [Amélioration de la description d'une photo](#ImprovedPhotoDescription) (08:01) ⟹ **nouveauté iOS 11** - [Ecrire des infos pour SIRI](#TypeToSIRI) (11:37) ⟹ **nouveauté iOS 11** - [Accessibility Inspector : cas pratique](#AccessibilityInspector) (15:35) - [Découvrir le protocole UIAccessibility](#UIAccessibilityProtocol) (21:14) - [Attributed Accessibility Properties](#AttributedProperties) (26:07) ⟹ **nouveauté iOS 11** - [Accessibility Container Type](#AccessibilityContainer) (27:20) ⟹ **nouveauté iOS 11** - [Les actions personnalisées](#CustomActions) (35:43) - [Action par défaut](#DefaultActivation) (37:38) - [Les valeurs continûment ajustables](#AdjustableValues) (38:22) - [Sélection en défilement continu](#PassThrough) (39:40) - [Défilement personnalisé](#CustomScrolling) (41:02) - [Drag &amp; Drop](#DragAndDrop) (42:54) ⟹ **nouveauté iOS 11**  &lt;/br&gt;Au cours de cette présentation, de nombreuses solutions sont proposées par le biais d'une application d'exemple pour répondre aux questions que se posent les développeurs face aux problèmes rencontrés en accessibilité avec &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; (regarder l'[application d'exemple](https://developer.apple.com/videos/play/wwdc2017/215/?time=1007) avant de lire la suite) : - Rendre un élément (in)accessible [(31:10)](https://developer.apple.com/videos/play/wwdc2017/215/?time=1870) - Remplir des propriétés `label` et `value` [(29:59)](https://developer.apple.com/videos/play/wwdc2017/215/?time=1799). - Rassembler plusieurs éléments pour n'en former qu'un seul [(31:50)](https://developer.apple.com/videos/play/wwdc2017/215/?time=1910).  Par la suite, le fait de cliquer sur un titre permet d'ouvrir la vidéo de présentation &lt;span lang=\&quot;en\&quot;&gt;Apple&lt;/span&gt; directement au moment indiqué.  &lt;a name=\&quot;ImageTextDetection\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-17215.html#detection-de-texte-dans-une-image-0707httpsdeveloperapplecomvideosplaywwdc2017215time427"] = "[Détection de texte dans une image (07:07)](https://developer.apple.com/videos/play/wwdc2017/215/?time=427)";
index.add({
    url: "criteria-ios-wwdc-17215.html#detection-de-texte-dans-une-image-0707httpsdeveloperapplecomvideosplaywwdc2017215time427",
    title: "[Détection de texte dans une image (07:07)](https://developer.apple.com/videos/play/wwdc2017/215/?time=427)",    
    body: "### [Détection de texte dans une image (07:07)](https://developer.apple.com/videos/play/wwdc2017/215/?time=427) Il est désormais possible de **déterminer si du texte est incrusté dans une image**. &lt;/br&gt;&lt;img style=\&quot;max-width: 1000px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc17-215-ImageTextDetection.png\&quot; /&gt; &lt;/br&gt;Cette détection très basique est obtenue en réalisant un **tap avec 3 doigts**. &lt;/br&gt;Elle permet ainsi de vocaliser cette inscription à une personne qui ne peut initialement pas la détecter.  &lt;a name=\&quot;ImprovedPhotoDescription\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-17215.html#amelioration-de-la-description-dune-photo-0801httpsdeveloperapplecomvideosplaywwdc2017215time481"] = "[Amélioration de la description d'une photo (08:01)](https://developer.apple.com/videos/play/wwdc2017/215/?time=481)";
index.add({
    url: "criteria-ios-wwdc-17215.html#amelioration-de-la-description-dune-photo-0801httpsdeveloperapplecomvideosplaywwdc2017215time481",
    title: "[Amélioration de la description d'une photo (08:01)](https://developer.apple.com/videos/play/wwdc2017/215/?time=481)",    
    body: "### [Amélioration de la description d'une photo (08:01)](https://developer.apple.com/videos/play/wwdc2017/215/?time=481) La **vocalisation de la description d'une photo** est une nouvelle fonctionnalité de Voice Over et est obtenue par un simple &lt;span lang=\&quot;en\&quot;&gt;tap&lt;/span&gt; à l'aide de 3 doigts. &lt;/br&gt;&lt;img style=\&quot;max-width: 1000px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc17-215-ImprovedPhotoDescription.png\&quot; /&gt; &lt;/br&gt;Une détection très simple du contexte, des visages et de leurs expressions est donc exposée à l'utilisateur pour qui ce type d'informations devient plus que jamais un lien fort avec son environnement.  &lt;a name=\&quot;TypeToSIRI\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-17215.html#ecrire-des-infos-pour-siri-1137httpsdeveloperapplecomvideosplaywwdc2017215time697"] = "[Ecrire des infos pour SIRI (11:37)](https://developer.apple.com/videos/play/wwdc2017/215/?time=697)";
index.add({
    url: "criteria-ios-wwdc-17215.html#ecrire-des-infos-pour-siri-1137httpsdeveloperapplecomvideosplaywwdc2017215time697",
    title: "[Ecrire des infos pour SIRI (11:37)](https://developer.apple.com/videos/play/wwdc2017/215/?time=697)",    
    body: "### [Ecrire des infos pour SIRI (11:37)](https://developer.apple.com/videos/play/wwdc2017/215/?time=697) Nouveauté très utile pour les **personnes ne pouvant pas utiliser SIRI vocalement** ou désirant simplement **effectuer des requêtes de façon discrète**. &lt;/br&gt;Pour utiliser cette fonctionnalité, il faut se rendre dans la partie `Accessibilité` des `Réglages` pour rendre l'activation effective. &lt;/br&gt;&lt;img style=\&quot;max-width: 600px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc17-215-TypeToSiri.png\&quot; /&gt;  &lt;a name=\&quot;AccessibilityInspector\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-17215.html#accessibility-inspector-cas-pratique-1535httpsdeveloperapplecomvideosplaywwdc2017215time935"] = "[Accessibility Inspector : cas pratique (15:35)](https://developer.apple.com/videos/play/wwdc2017/215/?time=935)";
index.add({
    url: "criteria-ios-wwdc-17215.html#accessibility-inspector-cas-pratique-1535httpsdeveloperapplecomvideosplaywwdc2017215time935",
    title: "[Accessibility Inspector : cas pratique (15:35)](https://developer.apple.com/videos/play/wwdc2017/215/?time=935)",    
    body: "### [Accessibility Inspector : cas pratique (15:35)](https://developer.apple.com/videos/play/wwdc2017/215/?time=935) Dans cette partie, l'outil &lt;span lang=\&quot;en\&quot;&gt;Accessibility Inspector&lt;/span&gt; de Xcode est utilisé pour une démonstration d'audit accessibilité d'une application. &lt;/br&gt;Des exemples sont fournis sans expliquer fondamentalement les notions propres à l'outil qui sont détaillées dans la session [407](https://developer.apple.com/videos/play/wwdc2016/407/) (2016).  &lt;a name=\&quot;UIAccessibilityProtocol\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-17215.html#decouvrir-le-protocole-uiaccessibility-2114httpsdeveloperapplecomvideosplaywwdc2017215time1274"] = "[Découvrir le protocole UIAccessibility (21:14)](https://developer.apple.com/videos/play/wwdc2017/215/?time=1274)";
index.add({
    url: "criteria-ios-wwdc-17215.html#decouvrir-le-protocole-uiaccessibility-2114httpsdeveloperapplecomvideosplaywwdc2017215time1274",
    title: "[Découvrir le protocole UIAccessibility (21:14)](https://developer.apple.com/videos/play/wwdc2017/215/?time=1274)",    
    body: "### [Découvrir le protocole UIAccessibility (21:14)](https://developer.apple.com/videos/play/wwdc2017/215/?time=1274) Petit rappel sur les fondements du protocole informel `UIAccessibility` qui vont être utilisés dans la suite de la présentation. &lt;/br&gt;&lt;img style=\&quot;max-width: 450px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc17-215-UIAccessibilityProtocol.png\&quot; /&gt;  &lt;a name=\&quot;AttributedProperties\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-17215.html#attributed-accessibility-properties-2607httpsdeveloperapplecomvideosplaywwdc2017215time1567"] = "[Attributed Accessibility Properties (26:07)](https://developer.apple.com/videos/play/wwdc2017/215/?time=1567)";
index.add({
    url: "criteria-ios-wwdc-17215.html#attributed-accessibility-properties-2607httpsdeveloperapplecomvideosplaywwdc2017215time1567",
    title: "[Attributed Accessibility Properties (26:07)](https://developer.apple.com/videos/play/wwdc2017/215/?time=1567)",    
    body: "### [Attributed Accessibility Properties (26:07)](https://developer.apple.com/videos/play/wwdc2017/215/?time=1567) iOS 11 permet de transformer les propriétés d'accessibilité `label`, `value` et `hint` de base en `NSAttributedString` de façon à pouvoir **agir sur la façon dont ils vont être vocalisés**. &lt;/br&gt;&lt;img style=\&quot;max-width: 550px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc17-215-AttributedStrings.png\&quot; /&gt; &lt;/br&gt;Parmi les exemples fournis, on trouve la possibilité de vocaliser en langue étrangère un élément accessible bien particulier. &lt;/br&gt;&lt;img style=\&quot;max-width: 600px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc17-215-AttributedStringsExample.png\&quot; /&gt; &lt;/br&gt;L'ensemble des clés utilisables se trouve sur la [documentation officielle Apple](https://developer.apple.com/documentation/uikit/accessibility/uiaccessibility/speech_attributes_for_attributed_strings).  &lt;a name=\&quot;AccessibilityContainer\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-17215.html#accessibility-container-type-2720httpsdeveloperapplecomvideosplaywwdc2017215time1640"] = "[Accessibility Container Type (27:20)](https://developer.apple.com/videos/play/wwdc2017/215/?time=1640)";
index.add({
    url: "criteria-ios-wwdc-17215.html#accessibility-container-type-2720httpsdeveloperapplecomvideosplaywwdc2017215time1640",
    title: "[Accessibility Container Type (27:20)](https://developer.apple.com/videos/play/wwdc2017/215/?time=1640)",    
    body: "### [Accessibility Container Type (27:20)](https://developer.apple.com/videos/play/wwdc2017/215/?time=1640) Une définition de **conteneur typé** au niveau accessibilité est disponible en **iOS 11**. &lt;/br&gt;&lt;img style=\&quot;max-width: 750px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc17-215-ContainerType.png\&quot; /&gt; &lt;/br&gt;La notion de conteneur existait déjà mais rien ne permettait à &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; de savoir ce qu'était réellement ce conteneur. &lt;/br&gt;Ce nouveau typage va donc permettre à &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; de faciliter et de mieux appréhender la façon dont l'utilisateur va pouvoir naviguer au sein de ce conteneur.  &lt;a name=\&quot;CustomActions\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-17215.html#les-actions-personnalisees-3543httpsdeveloperapplecomvideosplaywwdc2017215time2143"] = "[Les actions personnalisées (35:43)](https://developer.apple.com/videos/play/wwdc2017/215/?time=2143)";
index.add({
    url: "criteria-ios-wwdc-17215.html#les-actions-personnalisees-3543httpsdeveloperapplecomvideosplaywwdc2017215time2143",
    title: "[Les actions personnalisées (35:43)](https://developer.apple.com/videos/play/wwdc2017/215/?time=2143)",    
    body: "### [Les actions personnalisées (35:43)](https://developer.apple.com/videos/play/wwdc2017/215/?time=2143) Il est possible de définir sur une vue un ensemble constitué de `accessibilityCustomAction` de façon à lui **attribuer différentes actions possibles**. &lt;/br&gt;&lt;img style=\&quot;max-width: 600px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc17-215-CustomActions.png\&quot; /&gt; &lt;/br&gt;Dès que cette vue est sélectionnée avec &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;, un **swipe vertical avec un doigt** permet de déterminer l'action de son choix. &lt;/br&gt;La mise en place programmatique de ce type de fonctionnement est présentée dans la partie [développement](./criteria-ios-dev.html#actions-personnalis-es).  &lt;a name=\&quot;DefaultActivation\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-17215.html#action-par-defaut-3738httpsdeveloperapplecomvideosplaywwdc2017215time2258"] = "[Action par défaut (37:38)](https://developer.apple.com/videos/play/wwdc2017/215/?time=2258)";
index.add({
    url: "criteria-ios-wwdc-17215.html#action-par-defaut-3738httpsdeveloperapplecomvideosplaywwdc2017215time2258",
    title: "[Action par défaut (37:38)](https://developer.apple.com/videos/play/wwdc2017/215/?time=2258)",    
    body: "### [Action par défaut (37:38)](https://developer.apple.com/videos/play/wwdc2017/215/?time=2258) Afin de limiter ou de rendre plus faciles les manipulations à réaliser par les utilsateurs de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;, il est possible de déclencher des actions appropriées dès qu'un élément est activé par un double tap. &lt;/br&gt;&lt;img style=\&quot;max-width: 750px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc17-215-DefaultAction.png\&quot; /&gt;   &lt;a name=\&quot;AdjustableValues\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-17215.html#les-valeurs-continument-ajustables-3822httpsdeveloperapplecomvideosplaywwdc2017215time2302"] = "[Les valeurs continûment ajustables (38:22)](https://developer.apple.com/videos/play/wwdc2017/215/?time=2302)";
index.add({
    url: "criteria-ios-wwdc-17215.html#les-valeurs-continument-ajustables-3822httpsdeveloperapplecomvideosplaywwdc2017215time2302",
    title: "[Les valeurs continûment ajustables (38:22)](https://developer.apple.com/videos/play/wwdc2017/215/?time=2302)",    
    body: "### [Les valeurs continûment ajustables (38:22)](https://developer.apple.com/videos/play/wwdc2017/215/?time=2302) La **modification de valeur** pour des éléments tels que le `slider` ou le `picker` peut se faire de façon **très fluide** grâce à l'implémentation de deux fonctions : &lt;/br&gt;&lt;img style=\&quot;max-width: 470px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc17-215-AdjustableValues.png\&quot; /&gt; &lt;/br&gt;Dès que la vue est sélectionnée avec &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;, un **swipe vertical avec un doigt** permet d'augmenter (vers le haut) ou de diminuer (vers le bas) la valeur. &lt;/br&gt;La mise en place programmatique de ce type de fonctionnement est présentée dans la partie [développement](./criteria-ios-dev.html#valeurs-contin-ment-ajustables).  &lt;a name=\&quot;PassThrough\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-17215.html#selection-en-defilement-continu-3940httpsdeveloperapplecomvideosplaywwdc2017215time2380"] = "[Sélection en défilement continu (39:40)](https://developer.apple.com/videos/play/wwdc2017/215/?time=2380)";
index.add({
    url: "criteria-ios-wwdc-17215.html#selection-en-defilement-continu-3940httpsdeveloperapplecomvideosplaywwdc2017215time2380",
    title: "[Sélection en défilement continu (39:40)](https://developer.apple.com/videos/play/wwdc2017/215/?time=2380)",    
    body: "### [Sélection en défilement continu (39:40)](https://developer.apple.com/videos/play/wwdc2017/215/?time=2380) L'application d'une **double pression d'un doigt accompagnée d'un maintien à l'issue** sur un défilement panoramique permet de déclencher la fonctionnalité &lt;span lang=\&quot;en\&quot;&gt;pass-through&lt;/span&gt; de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;. &lt;/br&gt;&lt;img style=\&quot;max-width: 400px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc17-215-PassThrough_1.png\&quot; /&gt; &lt;/br&gt;Cette fonctionnalité permet d'obtenir une sélection beaucoup plus précise de la valeur remontée. &lt;/br&gt;Il est donc possible de préciser à &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; le focus de l'élément sélectionné grâce à l'attribut [accessibilityActivationPoint](./criteria-ios-dev.html#modifier-la-zone-de-focus-de-span-lang-en-voiceover-span-) de façon à indiquer finement à l'utilisateur où il se trouve au niveau du panoramique. &lt;/br&gt;&lt;img style=\&quot;max-width: 500px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc17-215-PassThrough_2.png\&quot; /&gt;  &lt;a name=\&quot;CustomScrolling\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-17215.html#defilement-personnalise-4102httpsdeveloperapplecomvideosplaywwdc2017215time2462"] = "[Défilement personnalisé (41:02)](https://developer.apple.com/videos/play/wwdc2017/215/?time=2462)";
index.add({
    url: "criteria-ios-wwdc-17215.html#defilement-personnalise-4102httpsdeveloperapplecomvideosplaywwdc2017215time2462",
    title: "[Défilement personnalisé (41:02)](https://developer.apple.com/videos/play/wwdc2017/215/?time=2462)",    
    body: "### [Défilement personnalisé (41:02)](https://developer.apple.com/videos/play/wwdc2017/215/?time=2462) Le défilement classique de pages proposé par &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; se fait avec un &lt;span lang=\&quot;en\&quot;&gt;swipe&lt;/span&gt; à l'aide de 3 doigts. &lt;/br&gt;Il est toutefois possible de personnaliser le résultat obtenu grâce à la méthode `accessibilityScroll` présente dans le protocole `UIAccessibilityAction`. &lt;/br&gt;&lt;img style=\&quot;max-width: 750px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc17-215-CustomScrolling.png\&quot; /&gt;  &lt;a name=\&quot;DragAndDrop\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-17215.html#drag-drop-4254httpsdeveloperapplecomvideosplaywwdc2017215time2574"] = "[Drag &amp; Drop (42:54)](https://developer.apple.com/videos/play/wwdc2017/215/?time=2574)";
index.add({
    url: "criteria-ios-wwdc-17215.html#drag-drop-4254httpsdeveloperapplecomvideosplaywwdc2017215time2574",
    title: "[Drag &amp; Drop (42:54)](https://developer.apple.com/videos/play/wwdc2017/215/?time=2574)",    
    body: "### [Drag &amp; Drop (42:54)](https://developer.apple.com/videos/play/wwdc2017/215/?time=2574) Nouveauté iOS11, le &lt;span lang=\&quot;en\&quot;&gt;drag-and-drop&lt;/span&gt; présenté en accessibilité ne décrit pas la nouvelle API mais rappelle les 2 principes primordiaux autour desquels s'appuie son fonctionnement : les &lt;span lang=\&quot;en\&quot;&gt;drag sources&lt;/span&gt; et les &lt;span lang=\&quot;en\&quot;&gt;drop points&lt;/span&gt;. &lt;/br&gt;&lt;img style=\&quot;max-width: 750px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc17-215-DragAndDrop.png\&quot; /&gt; &lt;/br&gt;Leur utilisation est ensuite succinctement proposée par le biais d'un [exemple](https://developer.apple.com/videos/play/wwdc2017/215/?time=2729).  &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["criteria-ios-wwdc-17245.html#wwdc-2017-application-du-dynamic-type"] = "WWDC 2017 : Application du Dynamic Type";
index.add({
    url: "criteria-ios-wwdc-17245.html#wwdc-2017-application-du-dynamic-type",
    title: "WWDC 2017 : Application du Dynamic Type",    
    body: "# WWDC 2017 : Application du Dynamic Type  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;iOS\&quot;, \&quot;url\&quot;: \&quot;./criteria-ios.html\&quot;},                    {\&quot;label\&quot;:\&quot;WWDC\&quot;, \&quot;url\&quot;: \&quot;./criteria-ios-wwdc.html\&quot;},                    {\&quot;label\&quot;:\&quot;2017 - Application du Dynamic Type\&quot;} 	]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Critères de conception\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-conception.html\&quot;},          {\&quot;label\&quot;:\&quot;Guide pour les développeurs\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-dev.html\&quot;},         {\&quot;label\&quot;:\&quot;VoiceOver\&quot;,\&quot;url\&quot;:\&quot;lecteur-ecran-voiceover.html\&quot;},         {\&quot;label\&quot;:\&quot;WWDC\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-wwdc.html\&quot;},         {\&quot;label\&quot;:\&quot;Tests\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-test.html\&quot;}     ]); });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-ios\&quot;&gt;&lt;/span&gt;  Cette présentation visualisable sur le **site développeur officiel d'Apple** ([session 245](https://developer.apple.com/videos/play/wwdc2017/245/)) a pour but d'expliquer ce qu'est le &lt;span lang=\&quot;en\&quot;&gt;Dynamic Type&lt;/span&gt; et comment le mettre en oeuvre par le biais de bonnes pratiques. &lt;/br&gt;&lt;img style=\&quot;max-width: 200px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc17-logo.png\&quot; /&gt; &lt;img style=\&quot;max-width: 700px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc17-245.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;Les thèmes abordés ainsi que leur référence temporelle au sein de la vidéo sont décrits ci-dessous : - [Styles de texte](#TextStyles) (06:06) ⟹ **amélioration iOS 11** - [Police personnalisée](#CustomFonts) (08:17) ⟹ **nouveauté iOS 11** - [Utilisation de pages web](#WebViews) (09:25) - [Affichage sur plusieurs lignes](#WrapToMultipleLines) (10:14) - [ConstraintEqualToSystemSpacingBelow](#AutoLayoutSystemSpacingConstraints) (11:31) - [ScaledValue](#ScaledValue) (12:56) ⟹ **nouveauté iOS 11** - [Grossissement d'éléments voisins](#SideBySideText) (13:36) - [PreferredContentSizeCategory](#PreferredContentSizeCategory) (15:23) - [Table view cells](#TableViewCells) (16:38) - [Images](#Images) (20:13) - [Exemple](#Demo) (24:32)  Par la suite, le fait de cliquer sur un titre permet d'ouvrir la vidéo de présentation &lt;span lang=\&quot;en\&quot;&gt;Apple&lt;/span&gt; directement au moment indiqué.  &lt;a name=\&quot;TextStyles\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-17245.html#styles-de-texte-0606httpsdeveloperapplecomvideosplaywwdc2017245time366"] = "[Styles de texte (06:06)](https://developer.apple.com/videos/play/wwdc2017/245/?time=366)";
index.add({
    url: "criteria-ios-wwdc-17245.html#styles-de-texte-0606httpsdeveloperapplecomvideosplaywwdc2017245time366",
    title: "[Styles de texte (06:06)](https://developer.apple.com/videos/play/wwdc2017/245/?time=366)",    
    body: "### [Styles de texte (06:06)](https://developer.apple.com/videos/play/wwdc2017/245/?time=366) Avec iOS 11, **tous les styles de texte s'adaptent aux 5 tailles de texte disponibles en accessibilité** ce qui n'était le cas que pour le style *body* auparavant. &lt;/br&gt;Dans l'&lt;span lang=\&quot;en\&quot;&gt;Interface Builder&lt;/span&gt; de Xcode, il suffit d'indiquer le style souhaité dans la partie &lt;span lang=\&quot;en\&quot;&gt;Attribute Inspector&lt;/span&gt; et de cocher la case &lt;span lang=\&quot;en\&quot;&gt;Dynamic Type&lt;/span&gt; qui permettra d'adapter automatiquement la taille selon les réglages. &lt;/br&gt;&lt;img style=\&quot;max-width: 1000px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc17-245-TextStyle_1.png\&quot; /&gt; &lt;/br&gt;Au niveau code, on obtient exactement le même résulat de la façon suivante : &lt;/br&gt;&lt;img style=\&quot;max-width: 500px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc17-245-TextStyle_2.png\&quot; /&gt;  &lt;a name=\&quot;CustomFonts\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-17245.html#police-personnalisee-0817httpsdeveloperapplecomvideosplaywwdc2017245time497"] = "[Police personnalisée (08:17)](https://developer.apple.com/videos/play/wwdc2017/245/?time=497)";
index.add({
    url: "criteria-ios-wwdc-17245.html#police-personnalisee-0817httpsdeveloperapplecomvideosplaywwdc2017245time497",
    title: "[Police personnalisée (08:17)](https://developer.apple.com/videos/play/wwdc2017/245/?time=497)",    
    body: "### [Police personnalisée (08:17)](https://developer.apple.com/videos/play/wwdc2017/245/?time=497) L'introduction de la classe `UIFontMetrics` en iOS 11 permet à une police personnalisée de respecter le comportement du grossissement de caractères. &lt;/br&gt;&lt;img style=\&quot;max-width: 750px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc17-245-CustomFonts.png\&quot; /&gt;  &lt;a name=\&quot;WebViews\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-17245.html#utilisation-de-pages-web-0925httpsdeveloperapplecomvideosplaywwdc2017245time565"] = "[Utilisation de pages web (09:25)](https://developer.apple.com/videos/play/wwdc2017/245/?time=565)";
index.add({
    url: "criteria-ios-wwdc-17245.html#utilisation-de-pages-web-0925httpsdeveloperapplecomvideosplaywwdc2017245time565",
    title: "[Utilisation de pages web (09:25)](https://developer.apple.com/videos/play/wwdc2017/245/?time=565)",    
    body: "### [Utilisation de pages web (09:25)](https://developer.apple.com/videos/play/wwdc2017/245/?time=565) Afin d'assurer une compatibilité entre le comportement attendu sur un **terminal iOS** utilisant le &lt;span lang=\&quot;en\&quot;&gt;Dynamic Type&lt;/span&gt; et l'**affichage de pages web** sur ce même type de terminal, il est possible d'indiquer le style de texte souhaité au niveau CSS : &lt;/br&gt;&lt;img style=\&quot;max-width: 600px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc17-245-WebViews.png\&quot; /&gt;  &lt;a name=\&quot;WrapToMultipleLines\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-17245.html#affichage-sur-plusieurs-lignes-1014httpsdeveloperapplecomvideosplaywwdc2017245time614"] = "[Affichage sur plusieurs lignes (10:14)](https://developer.apple.com/videos/play/wwdc2017/245/?time=614)";
index.add({
    url: "criteria-ios-wwdc-17245.html#affichage-sur-plusieurs-lignes-1014httpsdeveloperapplecomvideosplaywwdc2017245time614",
    title: "[Affichage sur plusieurs lignes (10:14)](https://developer.apple.com/videos/play/wwdc2017/245/?time=614)",    
    body: "### [Affichage sur plusieurs lignes (10:14)](https://developer.apple.com/videos/play/wwdc2017/245/?time=614) Afin d'éviter la troncature d'un texte trop long dans un `label` après grossissement, il est conseillé de mettre la valeur `0` dans le nombre de lignes à afficher, ce qui aura pour signification d'afficher l'ensemble des lignes. &lt;/br&gt;&lt;img style=\&quot;max-width: 1000px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc17-245-WrapToMultipleLines.png\&quot; /&gt;  &lt;a name=\&quot;AutoLayoutSystemSpacingConstraints\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-17245.html#constraintequaltosystemspacingbelow-1131httpsdeveloperapplecomvideosplaywwdc2017245time691"] = "[ConstraintEqualToSystemSpacingBelow (11:31)](https://developer.apple.com/videos/play/wwdc2017/245/?time=691)";
index.add({
    url: "criteria-ios-wwdc-17245.html#constraintequaltosystemspacingbelow-1131httpsdeveloperapplecomvideosplaywwdc2017245time691",
    title: "[ConstraintEqualToSystemSpacingBelow (11:31)](https://developer.apple.com/videos/play/wwdc2017/245/?time=691)",    
    body: "### [ConstraintEqualToSystemSpacingBelow (11:31)](https://developer.apple.com/videos/play/wwdc2017/245/?time=691) Dans la mise en place de contraintes graphiques entre deux éléments de type `label` s'appuyant sur leur 'baseline', il est préférable de ne pas mettre de valeur fixe pour ne pas rencontrer la situation ci-dessous lors de grossissement de caractères : &lt;/br&gt;&lt;img style=\&quot;max-width: 450px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc17-245-AutoLayoutsystemSpacingConstraints_1.png\&quot; /&gt; &lt;/br&gt;Une constante égale à 'Standard Value' dans l'&lt;span lang=\&quot;en\&quot;&gt;Interface Builder&lt;/span&gt; de Xcode ou une définition programmatique de la contrainte utilisant `constraintEqualToSystemSpacingBelow` (nouveauté iOS 11) permet de résoudre ce problème. &lt;/br&gt;&lt;img style=\&quot;max-width: 650px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc17-245-AutoLayoutsystemSpacingConstraints_2.png\&quot; /&gt;  &lt;a name=\&quot;ScaledValue\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-17245.html#scaledvalue-1256httpsdeveloperapplecomvideosplaywwdc2017245time776"] = "[ScaledValue (12:56)](https://developer.apple.com/videos/play/wwdc2017/245/?time=776)";
index.add({
    url: "criteria-ios-wwdc-17245.html#scaledvalue-1256httpsdeveloperapplecomvideosplaywwdc2017245time776",
    title: "[ScaledValue (12:56)](https://developer.apple.com/videos/play/wwdc2017/245/?time=776)",    
    body: "### [ScaledValue (12:56)](https://developer.apple.com/videos/play/wwdc2017/245/?time=776) Introduite en iOS 11, la méthode **scaledValue** permet de déterminer la hauteur d'un élement graphique contenant du texte selon le grossissement implémenté. &lt;/br&gt;&lt;img style=\&quot;max-width: 700px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc17-245-ScaledValue.png\&quot; /&gt; &lt;/br&gt;À utiliser par exemple pour un bouton contenant du texte dont la taille est liée au &lt;span lang=\&quot;en\&quot;&gt;Dynamic Type&lt;/span&gt; et dont on souhaite connaître la hauteur.  &lt;a name=\&quot;SideBySideText\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-17245.html#grossissement-delements-voisins-1336httpsdeveloperapplecomvideosplaywwdc2017245time816"] = "[Grossissement d'éléments voisins (13:36)](https://developer.apple.com/videos/play/wwdc2017/245/?time=816)";
index.add({
    url: "criteria-ios-wwdc-17245.html#grossissement-delements-voisins-1336httpsdeveloperapplecomvideosplaywwdc2017245time816",
    title: "[Grossissement d'éléments voisins (13:36)](https://developer.apple.com/videos/play/wwdc2017/245/?time=816)",    
    body: "### [Grossissement d'éléments voisins (13:36)](https://developer.apple.com/videos/play/wwdc2017/245/?time=816) Arrivé à un certain seuil de grossissement, des éléments verticalement voisins peuvent finir par devenir illisibles et même transformer une interface graphique initialement ergonomique en une juxtaposition grossière d'objets. &lt;/br&gt;Dans ce cas, il est recommandé de passer à un alignement horizontal lorsque le grossisement problématique est atteint. &lt;/br&gt;&lt;img style=\&quot;max-width: 700px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc17-245-SideBySideText.png\&quot; /&gt;  &lt;a name=\&quot;PreferredContentSizeCategory\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-17245.html#preferredcontentsizecategory-1523httpsdeveloperapplecomvideosplaywwdc2017245time923"] = "[PreferredContentSizeCategory (15:23)](https://developer.apple.com/videos/play/wwdc2017/245/?time=923)";
index.add({
    url: "criteria-ios-wwdc-17245.html#preferredcontentsizecategory-1523httpsdeveloperapplecomvideosplaywwdc2017245time923",
    title: "[PreferredContentSizeCategory (15:23)](https://developer.apple.com/videos/play/wwdc2017/245/?time=923)",    
    body: "### [PreferredContentSizeCategory (15:23)](https://developer.apple.com/videos/play/wwdc2017/245/?time=923) Il existe **2 familles** bien distinctes qui contiennent les paliers de grossissement souhaités : - La première comprend les **7 seuils** de base allant de `extraSmall` à `extraExtraExtraLarge`. - La seconde est **spécifique à l'accessibilité** et doit être activée pour être prise en compte : elle comprend **5 seuils** qui vont de `accessibilityMedium` à `accessibilityExtraExtraExtraLarge`.  Ces différents seuils sont accessibles depuis le `traitCollection` de la vue ou bien directement depuis l'application par le biais de la méthode **preferredContentSizeCategory**. &lt;/br&gt;&lt;img style=\&quot;max-width: 900px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc17-245-PreferredContentSizeCategory_1.png\&quot; /&gt; &lt;/br&gt;Il est possible de mettre en place des conditions pour savoir si un seuil de grossissement a été atteint de façon à faire un réarrangement graphique des éléments quand cela est nécessaire. &lt;/br&gt;&lt;img style=\&quot;max-width: 650px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc17-245-PreferredContentSizeCategory_2.png\&quot; /&gt;  &lt;a name=\&quot;TableViewCells\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-17245.html#table-view-cells-1638httpsdeveloperapplecomvideosplaywwdc2017245time998"] = "[Table view cells (16:38)](https://developer.apple.com/videos/play/wwdc2017/245/?time=998)";
index.add({
    url: "criteria-ios-wwdc-17245.html#table-view-cells-1638httpsdeveloperapplecomvideosplaywwdc2017245time998",
    title: "[Table view cells (16:38)](https://developer.apple.com/videos/play/wwdc2017/245/?time=998)",    
    body: "### [Table view cells (16:38)](https://developer.apple.com/videos/play/wwdc2017/245/?time=998) L'utilisation de &lt;span lang=\&quot;en\&quot;&gt;table view cells&lt;/span&gt; standards va permettre d'adapter automatiquement la disposition d'une cellule en fonction du &lt;span lang=\&quot;en\&quot;&gt;Dynamic Type&lt;/span&gt; grâce au [cell-sizing](https://developer.apple.com/videos/play/wwdc2017/245/?time=1058). &lt;/br&gt;&lt;img style=\&quot;max-width: 600px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc17-245-TableViews_1.png\&quot; /&gt; &lt;/br&gt;Dans le cadre de cellules personnalisées, il faut mettre en place les contraintes pour définir le rendu souhaité et laisser le &lt;span lang=\&quot;en\&quot;&gt;cell-sizing&lt;/span&gt; opérer. &lt;/br&gt;&lt;img style=\&quot;max-width: 750px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc17-245-TableViews_2.png\&quot; /&gt;  &lt;a name=\&quot;Images\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-17245.html#images-2013httpsdeveloperapplecomvideosplaywwdc2017245time1213"] = "[Images (20:13)](https://developer.apple.com/videos/play/wwdc2017/245/?time=1213)";
index.add({
    url: "criteria-ios-wwdc-17245.html#images-2013httpsdeveloperapplecomvideosplaywwdc2017245time1213",
    title: "[Images (20:13)](https://developer.apple.com/videos/play/wwdc2017/245/?time=1213)",    
    body: "### [Images (20:13)](https://developer.apple.com/videos/play/wwdc2017/245/?time=1213) Le &lt;span lang=\&quot;en\&quot;&gt;Dynamic Type&lt;/span&gt; permet aussi le grossissement des images à la fois sur les vues et les barres de tabulation. &lt;/br&gt;Les explications détaillées de ce point se trouvent dans la partie [développement](./criteria-ios-dev.html#taille-des-l-ments-graphiques).  &lt;a name=\&quot;Demo\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-17245.html#exemple-2432httpsdeveloperapplecomvideosplaywwdc2017245time1472"] = "[Exemple (24:32)](https://developer.apple.com/videos/play/wwdc2017/245/?time=1472)";
index.add({
    url: "criteria-ios-wwdc-17245.html#exemple-2432httpsdeveloperapplecomvideosplaywwdc2017245time1472",
    title: "[Exemple (24:32)](https://developer.apple.com/videos/play/wwdc2017/245/?time=1472)",    
    body: "### [Exemple (24:32)](https://developer.apple.com/videos/play/wwdc2017/245/?time=1472) Une application d'exemple est proposée pour répondre aux questions que se posent les développeurs face aux éventuels problèmes rencontrés dans l'implémentation du &lt;span lang=\&quot;en\&quot;&gt;Dynamic Type&lt;/span&gt; (regarder l'[introduction](https://developer.apple.com/videos/play/wwdc2017/245/?time=1506) avant de lire la suite) : - **Pourquoi mon implémentation du &lt;span lang=\&quot;en\&quot;&gt;Dynamic Type&lt;/span&gt; ne fonctionne-t-elle pas** ? [(26:19)](https://developer.apple.com/videos/play/wwdc2017/245/?time=1579) (aide = &lt;span lang=\&quot;en\&quot;&gt;`adjustsFontForContentSizeCategory`&lt;/span&gt; (code) ou &lt;span lang=\&quot;en\&quot;&gt;`Automatically Adjusts Font`&lt;/span&gt; (&lt;span lang=\&quot;en\&quot;&gt;Attribute Inspector&lt;/span&gt;) + &lt;span lang=\&quot;en\&quot;&gt;`scaledFont`&lt;/span&gt; si police personnalisée) - **Comment modifier le positionnement des éléments pour adapter la lisibilité à la largeur maximale de texte** ? [(28:01)](https://developer.apple.com/videos/play/wwdc2017/245/?time=1681) (aide = mettre en place les contraintes à activer pour un positionnement vertical des éléments impactés + déterminer le moment auquel activer ces nouvelles contraintes avec &lt;span lang=\&quot;en\&quot;&gt;`preferredContentSizeCategory`&lt;/span&gt; + &lt;span lang=\&quot;en\&quot;&gt;`traitCollectionDidChange`&lt;/span&gt; pour être notifié d'un changement de taille de texte) - **Comment adapter la taille de mes &lt;span lang=\&quot;en\&quot;&gt;`table view cells`&lt;/span&gt; à leur contenu** ? [(31:03)](https://developer.apple.com/videos/play/wwdc2017/245/?time=1863) (aide = &lt;span lang=\&quot;en\&quot;&gt;`UITableViewAutomaticDimension`&lt;/span&gt; + &lt;span lang=\&quot;en\&quot;&gt;`estimatedRowHeight`&lt;/span&gt;) - **Pourquoi la taille de mes images ne suit pas le grossissement de texte** ? [(32:11)](https://developer.apple.com/videos/play/wwdc2017/245/?time=1931) (aide = &lt;span lang=\&quot;en\&quot;&gt;`adjustsImageSizeForAccessibilityContentSizeCategory`&lt;/span&gt;) - **Comment mettre une définition visuelle parfaite aux images après grossissement** ? [(33:07)](https://developer.apple.com/videos/play/wwdc2017/245/?time=1987) (aide = &lt;span lang=\&quot;en\&quot;&gt;`Preserve Vector Data`&lt;/span&gt; dans l'&lt;span lang=\&quot;en\&quot;&gt;Attribute Inspector&lt;/span&gt; du .xcassets) - **Comment utiliser l'instrument &lt;span lang=\&quot;en\&quot;&gt;Accessibility Inspector&lt;/span&gt; pour vérifer le grossissement de texte** ? [(34:56)](https://developer.apple.com/videos/play/wwdc2017/245/?time=2096)  &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["criteria-ios-wwdc-18230.html#wwdc-2018-fournir-une-experience-exceptionnelle-en-accessibilite"] = "WWDC 2018 : Fournir une expérience exceptionnelle en accessibilité";
index.add({
    url: "criteria-ios-wwdc-18230.html#wwdc-2018-fournir-une-experience-exceptionnelle-en-accessibilite",
    title: "WWDC 2018 : Fournir une expérience exceptionnelle en accessibilité",    
    body: "# WWDC 2018 : Fournir une expérience exceptionnelle en accessibilité  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;iOS\&quot;, \&quot;url\&quot;: \&quot;./criteria-ios.html\&quot;},                    {\&quot;label\&quot;:\&quot;WWDC\&quot;, \&quot;url\&quot;: \&quot;./criteria-ios-wwdc.html\&quot;},                    {\&quot;label\&quot;:\&quot;2018 - Fournir une expérience exceptionnelle en accessibilité\&quot;} 	]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Critères de conception\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-conception.html\&quot;},          {\&quot;label\&quot;:\&quot;Guide pour les développeurs\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-dev.html\&quot;},         {\&quot;label\&quot;:\&quot;VoiceOver\&quot;,\&quot;url\&quot;:\&quot;lecteur-ecran-voiceover.html\&quot;},         {\&quot;label\&quot;:\&quot;WWDC\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-wwdc.html\&quot;},         {\&quot;label\&quot;:\&quot;Tests\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-test.html\&quot;}     ]); });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-ios\&quot;&gt;&lt;/span&gt;  Cette présentation visualisable sur le **site développeur officiel d'&lt;span lang=\&quot;en\&quot;&gt;Apple&lt;/span&gt;** ([session 230](https://developer.apple.com/videos/play/wwdc2018/230/)) a pour but de mettre en avant les éléments essentiels qui permettent à une application de fournir une expérience utilisateur optimale en accessibilité visuelle. &lt;/br&gt;&lt;img style=\&quot;max-width: 700px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc18-230.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;Les thèmes abordés ainsi que leur référence temporelle au sein de la vidéo sont décrits ci-dessous :  - [Floutage et transparence](#TransparencyAndBlurring) (03:07) - [Contraste](#Contrast) (04:38) - [Grossissement](#Sizing) (07:04) - [Mouvement](#Motion) (08:48) - [UIAccessibilityElement](#UIAccessibilityElement) (21:03) - [Les valeurs continûment ajustables](#AdjustableValues) (21:44) - [Les actions personnalisées](#CustomActions) (23:49) - [Élément au premier plan](#accessibilityViewIsModal) (25:02) - [Notifications](#Notifications) (25:13) - [Exemple](#Demo)     - [Comment rendre un carrousel parfaitement interprétable par VoiceOver ?](#DemoSetCarousel) (25:53)     - [Comment synchroniser la mise à jour de données avec l'élément du carrousel sélectioné ?](#DemoUpdateData) (30:53)     - [Comment associer des actions à un regroupement d'éléments ?](#DemoCustomActions) (33:05)     - [Comment éviter la sélection d'éléments derrière une 'Modal View' ?](#DemoModalView) (34:32)     - [Rendu final de l'application avec VoiceOver optimisé](#DemoExceptionalVoiceOverExperience) (35:38)  Le dernier thème développe un exemple d'application particulièrement intéressant pour : - Les développeurs qui souhaitent trouver des réponses détaillées aux problèmes d'implémentation avec VoiceOver. - Celles et ceux qui souhaitent découvrir comment une application doit interagir avec VoiceOver pour que le parcours utilisateur soit optimal (voir '[Rendu final de l'application avec VoiceOver optimisé](#DemoExceptionalVoiceOverExperience)').  Par la suite, le fait de cliquer sur un titre permet d'ouvrir la vidéo de présentation &lt;span lang=\&quot;en\&quot;&gt;Apple&lt;/span&gt; directement au moment indiqué. &lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;TransparencyAndBlurring\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-18230.html#floutage-et-transparence-0307httpsdeveloperapplecomvideosplaywwdc2018230time187"] = "[Floutage et transparence (03:07)](https://developer.apple.com/videos/play/wwdc2018/230/?time=187)";
index.add({
    url: "criteria-ios-wwdc-18230.html#floutage-et-transparence-0307httpsdeveloperapplecomvideosplaywwdc2018230time187",
    title: "[Floutage et transparence (03:07)](https://developer.apple.com/videos/play/wwdc2018/230/?time=187)",    
    body: "### [Floutage et transparence (03:07)](https://developer.apple.com/videos/play/wwdc2018/230/?time=187) Depuis iOS 8, des classes telles que `UIBlurEffect` et `UIVisualEffectView` permettent de gérer parfaitement l'effet de flou d'une image. &lt;/br&gt;Cependant, cela peut entraîner des difficultés occulaires pour les personnes ayant des problèmes visuels. &lt;/br&gt;L'utilisateur peut alors atténuer très fortement ces effets néfastes en activant l'[option d'accessibilité](./criteria-ios-conception.html#options-d-accessibilit-) appropriée dans ses réglages. &lt;/br&gt;&lt;img style=\&quot;max-width: 950px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc18-230-TransparencyAndBlurring_1.png\&quot; /&gt; &lt;/br&gt;Le résultat conduit à un fond d'écran beaucoup plus sombre voire uni dans certains cas. &lt;/br&gt;&lt;img style=\&quot;max-width: 700px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc18-230-TransparencyAndBlurring_2.png\&quot; /&gt; &lt;/br&gt;Côté développement, il est possible de connaître la valeur de la propriété `isReduceTransparencyEnabled`. &lt;/br&gt;&lt;img style=\&quot;max-width: 650px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc18-230-TransparencyAndBlurring_3.png\&quot; /&gt;  &lt;a name=\&quot;Contrast\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-18230.html#contraste-0438httpsdeveloperapplecomvideosplaywwdc2018230time278"] = "[Contraste (04:38)](https://developer.apple.com/videos/play/wwdc2018/230/?time=278)";
index.add({
    url: "criteria-ios-wwdc-18230.html#contraste-0438httpsdeveloperapplecomvideosplaywwdc2018230time278",
    title: "[Contraste (04:38)](https://developer.apple.com/videos/play/wwdc2018/230/?time=278)",    
    body: "### [Contraste (04:38)](https://developer.apple.com/videos/play/wwdc2018/230/?time=278) Le contraste {couleur du contenu exposé / couleur du fond d'écran} est très important et repose beaucoup sur les propriétés de la police affichée détaillées dans la [partie conception de ce site](./criteria-ios-conception.html#couleurs). &lt;/br&gt;Il est possible d'augmenter nativement le contraste des couleurs en activant l'[option d'accessibilité](./criteria-ios-conception.html#options-d-accessibilit-) appropriée dans les réglages du terminal, pouvant ainsi favoriser un confort de lecture. &lt;/br&gt;&lt;img style=\&quot;max-width: 600px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc18-230-Contrast_1.png\&quot; /&gt; &lt;/br&gt;Côté développement, le suivi de la modification de ce réglage se fait grâce à la valeur de `isDarkerSystemColorsEnabled`. &lt;/br&gt;&lt;img style=\&quot;max-width: 650px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc18-230-Contrast_2.png\&quot; /&gt;  &lt;a name=\&quot;Sizing\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-18230.html#grossissement-0704httpsdeveloperapplecomvideosplaywwdc2018230time424"] = "[Grossissement (07:04)](https://developer.apple.com/videos/play/wwdc2018/230/?time=424)";
index.add({
    url: "criteria-ios-wwdc-18230.html#grossissement-0704httpsdeveloperapplecomvideosplaywwdc2018230time424",
    title: "[Grossissement (07:04)](https://developer.apple.com/videos/play/wwdc2018/230/?time=424)",    
    body: "### [Grossissement (07:04)](https://developer.apple.com/videos/play/wwdc2018/230/?time=424) Les quelques points concernant le `Dynamic Type` sont largement expliqués dans la [section développement iOS](./criteria-ios-dev.html#taille-des-textes) et font référence à une [autre présentation](./criteria-ios-wwdc-17245.html) parfaitement détaillée dans la partie WWDC de ce site. &lt;/br&gt;Le simple fait de passer une police en gras peut nettement améliorer le rendu visuel pour certains utilisateurs sans avoir à en grossir démesurément la taille. &lt;/br&gt;Ici encore, les réglages du terminal permettent d'activer cette [option d'accessibilité](./criteria-ios-conception.html#options-d-accessibilit-). &lt;/br&gt;&lt;img style=\&quot;max-width: 600px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc18-230-Sizing_1.png\&quot; /&gt; &lt;/br&gt;Côté développement, le suivi de la modification de ce réglage se fait grâce à la valeur de `isBoldTextEnabled`. &lt;/br&gt;&lt;img style=\&quot;max-width: 600px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc18-230-Sizing_2.png\&quot; /&gt;  &lt;a name=\&quot;Motion\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-18230.html#mouvement-0848httpsdeveloperapplecomvideosplaywwdc2018230time528"] = "[Mouvement (08:48)](https://developer.apple.com/videos/play/wwdc2018/230/?time=528)";
index.add({
    url: "criteria-ios-wwdc-18230.html#mouvement-0848httpsdeveloperapplecomvideosplaywwdc2018230time528",
    title: "[Mouvement (08:48)](https://developer.apple.com/videos/play/wwdc2018/230/?time=528)",    
    body: "### [Mouvement (08:48)](https://developer.apple.com/videos/play/wwdc2018/230/?time=528) Certaines animations peuvent entraîner des problèmes d'équilibre voire de nausées à certaines personnes. &lt;/br&gt;Les réglages utilisateurs permettent de réduire fortement tout type d'animations natives en activant l'[option d'accessibilité](./criteria-ios-conception.html#options-d-accessibilit-) appropriée. &lt;/br&gt;&lt;img style=\&quot;max-width: 950px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc18-230-Motion_1.png\&quot; /&gt; &lt;/br&gt;Côté développement, le suivi de la modification de ce réglage se fait grâce à la valeur de `isReduceMotionEnabled` et permet d'adapter les effets de l'application aux souhaits de l'utilisateur s'ils ne sont pas automatiquement pris en compte. &lt;/br&gt;&lt;img style=\&quot;max-width: 600px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc18-230-Motion_2.png\&quot; /&gt;  &lt;a name=\&quot;UIAccessibilityElement\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-18230.html#uiaccessibilityelement-2103httpsdeveloperapplecomvideosplaywwdc2018230time1263"] = "[UIAccessibilityElement (21:03)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1263)";
index.add({
    url: "criteria-ios-wwdc-18230.html#uiaccessibilityelement-2103httpsdeveloperapplecomvideosplaywwdc2018230time1263",
    title: "[UIAccessibilityElement (21:03)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1263)",    
    body: "### [UIAccessibilityElement (21:03)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1263) L'intérêt de cet élément ainsi que son implémentation sont expliqués et mis en situation au sein de l'application de démonstration. &lt;/br&gt;&lt;img style=\&quot;max-width: 550px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc18-230-UIAccessibilityElement.png\&quot; /&gt;  &lt;a name=\&quot;AdjustableValues\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-18230.html#les-valeurs-continument-ajustables-2144httpsdeveloperapplecomvideosplaywwdc2018230time1304"] = "[Les valeurs continûment ajustables (21:44)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1304)";
index.add({
    url: "criteria-ios-wwdc-18230.html#les-valeurs-continument-ajustables-2144httpsdeveloperapplecomvideosplaywwdc2018230time1304",
    title: "[Les valeurs continûment ajustables (21:44)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1304)",    
    body: "### [Les valeurs continûment ajustables (21:44)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1304) Cette fonctionnalité implémentable par définition de `trait` spécifique est présentée ici de façon à **fluidifier la sélection d'éléments** dans une `CollectionView`. &lt;/br&gt;&lt;img style=\&quot;max-width: 550px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc18-230-AdjustableValues.png\&quot; /&gt; &lt;/br&gt;Un aperçu différent de cette utilisation a déjà été développé dans une [autre vidéo détaillée](./criteria-ios-wwdc-17215.html#AdjustableValues) de la partie WWDC de ce site. &lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;CustomActions\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-18230.html#les-actions-personnalisees-2349httpsdeveloperapplecomvideosplaywwdc2018230time1429"] = "[Les actions personnalisées (23:49)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1429)";
index.add({
    url: "criteria-ios-wwdc-18230.html#les-actions-personnalisees-2349httpsdeveloperapplecomvideosplaywwdc2018230time1429",
    title: "[Les actions personnalisées (23:49)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1429)",    
    body: "### [Les actions personnalisées (23:49)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1429) Sur une unique sélection, il est possible de **regrouper un ensemble d'actions** proposées sur différents éléments graphiques. &lt;/br&gt;&lt;img style=\&quot;max-width: 700px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc18-230-CustomActions.png\&quot; /&gt; &lt;/br&gt;Les explications fournies ici sont aussi développées dans une [autre vidéo détaillée](./criteria-ios-wwdc-17215.html#CustomActions) de la partie WWDC de ce site. &lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;accessibilityViewIsModal\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-18230.html#element-au-premier-plan-2502httpsdeveloperapplecomvideosplaywwdc2018230time1502"] = "[Élément au premier plan (25:02)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1502)";
index.add({
    url: "criteria-ios-wwdc-18230.html#element-au-premier-plan-2502httpsdeveloperapplecomvideosplaywwdc2018230time1502",
    title: "[Élément au premier plan (25:02)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1502)",    
    body: "### [Élément au premier plan (25:02)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1502) Lorsqu'une vue est simplement présentée comme étant \&quot;en haut\&quot; de la hiérarchie des vues, VoiceOver ne sait pas nativement qu'**il ne faut pas traiter les éléments présents en fond d'écran**. &lt;/br&gt;La solution consiste à modifier `accessibilityViewIsModal` de façon à ce que VoiceOver n'analyse que les éléments de la vue mise en avant. &lt;/br&gt;&lt;img style=\&quot;max-width: 450px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc18-230-ModalView.png\&quot; /&gt;  &lt;a name=\&quot;Notifications\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-18230.html#notifications-2513httpsdeveloperapplecomvideosplaywwdc2018230time1513"] = "[Notifications (25:13)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1513)";
index.add({
    url: "criteria-ios-wwdc-18230.html#notifications-2513httpsdeveloperapplecomvideosplaywwdc2018230time1513",
    title: "[Notifications (25:13)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1513)",    
    body: "### [Notifications (25:13)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1513) Petit rappel pour **notifier les utilisateurs de modifications** sur l'écran. &lt;/br&gt;&lt;img style=\&quot;max-width: 800px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc18-230-Notifications.png\&quot; /&gt; &lt;/br&gt;Des explications plus détaillées sur ce point sont fournies dans la [partie développeur de ce site](./criteria-ios-dev.html#informer-d-une-modification-sur-la-page). &lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;Demo\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-18230.html#exemple"] = "Exemple";
index.add({
    url: "criteria-ios-wwdc-18230.html#exemple",
    title: "Exemple",    
    body: "### Exemple Un exemple d'application est proposé pour répondre aux questions que se posent les développeurs face aux éventuels problèmes rencontrés dans la mise en oeuvre de l'accessibilité avec VoiceOver. &lt;/br&gt;La [présentation de l'exemple](https://developer.apple.com/videos/play/wwdc2018/230/?time=938) ainsi que le [rendu VoiceOver non optimisé](https://developer.apple.com/videos/play/wwdc2018/230/?time=1022) sont absolument à visionner afin de mieux comprendre la logique des solutions apportées par tous les éléments exposés précédemment.&lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;DemoSetCarousel\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-18230.html#comment-rendre-un-carrousel-parfaitement-interpretable-par-voiceover-2553httpsdeveloperapplecomvideosplaywwdc2018230time1553"] = "[Comment rendre un carrousel parfaitement interprétable par VoiceOver ? (25:53)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1553)";
index.add({
    url: "criteria-ios-wwdc-18230.html#comment-rendre-un-carrousel-parfaitement-interpretable-par-voiceover-2553httpsdeveloperapplecomvideosplaywwdc2018230time1553",
    title: "[Comment rendre un carrousel parfaitement interprétable par VoiceOver ? (25:53)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1553)",    
    body: "##### [Comment rendre un carrousel parfaitement interprétable par VoiceOver ? (25:53)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1553) - Création d'un élement accessible pour définir le carrousel. [(26:11)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1571) - Implémentations des propriétés `label` et `value`. [(26:43)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1603) - Spécification de `adjustableTrait` avec définitions de `increment` et `decrement`. [(26:58)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1618) - Création d'une fonction de défilement. [(27:14)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1634) - Ajouter l'élément du carrousel en tant qu'élément sélectionnable par VoiceOver. [(28:38)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1718) - Mise à jour de l'élément affiché en fonction de la sélection. [(29:51)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1791) - Notification de mise à jour d'écran dès qu'un nouvel élément du carrousel est sélectionné. [(30:14)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1814) &lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;DemoUpdateData\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-18230.html#comment-synchroniser-la-mise-a-jour-de-donnees-avec-lelement-du-carrousel-selectionne-3053httpsdeveloperapplecomvideosplaywwdc2018230time1853"] = "[Comment synchroniser la mise à jour de données avec l'élément du carrousel sélectionné ? (30:53)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1853)";
index.add({
    url: "criteria-ios-wwdc-18230.html#comment-synchroniser-la-mise-a-jour-de-donnees-avec-lelement-du-carrousel-selectionne-3053httpsdeveloperapplecomvideosplaywwdc2018230time1853",
    title: "[Comment synchroniser la mise à jour de données avec l'élément du carrousel sélectionné ? (30:53)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1853)",    
    body: "##### [Comment synchroniser la mise à jour de données avec l'élément du carrousel sélectionné ? (30:53)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1853) - Grouper des données pour améliorer significativement la sélection d'éléments. [(31:14)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1874) - Synchronisation des données regroupées avec l'élément du carrousel sélectionné. [(32:46)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1966) &lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;DemoCustomActions\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-18230.html#comment-associer-des-actions-a-un-regroupement-delements-3305httpsdeveloperapplecomvideosplaywwdc2018230time1985"] = "[Comment associer des actions à un regroupement d'éléments ? (33:05)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1985)";
index.add({
    url: "criteria-ios-wwdc-18230.html#comment-associer-des-actions-a-un-regroupement-delements-3305httpsdeveloperapplecomvideosplaywwdc2018230time1985",
    title: "[Comment associer des actions à un regroupement d'éléments ? (33:05)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1985)",    
    body: "##### [Comment associer des actions à un regroupement d'éléments ? (33:05)](https://developer.apple.com/videos/play/wwdc2018/230/?time=1985) &lt;/br&gt; &lt;a name=\&quot;DemoModalView\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-18230.html#comment-eviter-la-selection-delements-derriere-une-modal-view"] = "Comment éviter la sélection d'éléments derrière une 'Modal View' ?";
index.add({
    url: "criteria-ios-wwdc-18230.html#comment-eviter-la-selection-delements-derriere-une-modal-view",
    title: "Comment éviter la sélection d'éléments derrière une 'Modal View' ?",    
    body: "##### Comment éviter la sélection d'éléments derrière une 'Modal View' ? - Modifier `accessibilityViewIsModal` en `override`. [(34:33)](https://developer.apple.com/videos/play/wwdc2018/230/?time=2073) - Penser à notifier l'utilisateur de l'apparition d'un nouvel écran. [(35:00)](https://developer.apple.com/videos/play/wwdc2018/230/?time=2100) &lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;DemoExceptionalVoiceOverExperience\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-18230.html#rendu-final-de-lapplication-avec-voiceover-optimise-3538httpsdeveloperapplecomvideosplaywwdc2018230time2138"] = "[Rendu final de l'application avec VoiceOver optimisé. (35:38)](https://developer.apple.com/videos/play/wwdc2018/230/?time=2138)";
index.add({
    url: "criteria-ios-wwdc-18230.html#rendu-final-de-lapplication-avec-voiceover-optimise-3538httpsdeveloperapplecomvideosplaywwdc2018230time2138",
    title: "[Rendu final de l'application avec VoiceOver optimisé. (35:38)](https://developer.apple.com/videos/play/wwdc2018/230/?time=2138)",    
    body: "##### [Rendu final de l'application avec VoiceOver optimisé. (35:38)](https://developer.apple.com/videos/play/wwdc2018/230/?time=2138)  &lt;/br&gt; Le code présenté lors de cette vidéo ainsi que des explications sur son implémentation sont accessibles sur le [site développeur d'&lt;span lang=\&quot;en\&quot;&gt;Apple&lt;/span&gt;](https://developer.apple.com/documentation/uikit/accessibility/delivering_an_exceptional_accessibility_experience).  &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["criteria-ios-wwdc-18236.html#wwdc-2018-utiliser-une-voix-synthetisee-avec-avspeechsynthesizer"] = "WWDC 2018 : Utiliser une voix synthétisée avec AVSpeechSynthesizer";
index.add({
    url: "criteria-ios-wwdc-18236.html#wwdc-2018-utiliser-une-voix-synthetisee-avec-avspeechsynthesizer",
    title: "WWDC 2018 : Utiliser une voix synthétisée avec AVSpeechSynthesizer",    
    body: "# WWDC 2018 : Utiliser une voix synthétisée avec AVSpeechSynthesizer  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;iOS\&quot;, \&quot;url\&quot;: \&quot;./criteria-ios.html\&quot;},                    {\&quot;label\&quot;:\&quot;WWDC\&quot;, \&quot;url\&quot;: \&quot;./criteria-ios-wwdc.html\&quot;},                    {\&quot;label\&quot;:\&quot;2018 - AVSpeechSynthesizer\&quot;} 	]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Critères de conception\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-conception.html\&quot;},          {\&quot;label\&quot;:\&quot;Guide pour les développeurs\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-dev.html\&quot;},         {\&quot;label\&quot;:\&quot;VoiceOver\&quot;,\&quot;url\&quot;:\&quot;lecteur-ecran-voiceover.html\&quot;},         {\&quot;label\&quot;:\&quot;WWDC\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-wwdc.html\&quot;},         {\&quot;label\&quot;:\&quot;Tests\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-test.html\&quot;}     ]); });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-ios\&quot;&gt;&lt;/span&gt;  Cette présentation visualisable sur le **site développeur officiel d'&lt;span lang=\&quot;en\&quot;&gt;Apple&lt;/span&gt;** ([session 236](https://developer.apple.com/videos/play/wwdc2018/236/)) a pour but de mettre en avant les éléments essentiels qui permettent à une application iOS d'**utiliser une voix synthétisée en s'appuyant sur &lt;span lang=\&quot;en\&quot;&gt;AVSpeechSynthesizer&lt;/span&gt;**. &lt;/br&gt;&lt;img style=\&quot;max-width: 466px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc18-236.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;Les thèmes abordés ainsi que leur référence temporelle au sein de la vidéo sont décrits ci-dessous :  - [Cas d'usage](#Uses) (00:48) - [Par où commencer ?](#Basics) (02:03) - [AVSpeechSynthesizerDelegate](#AVSpeechSynthesizerDelegate) (03:20) - [Démonstration](#Demo) (04:11) - [Choix de la voix synthétisée](#TheRightVoice) (04:31) - [Débit vocal](#SpeechRate) (05:32) - [Hauteur tonale et volume](#PitchAndVolume) (06:15) - [Phonétique](#IPA) (06:54)  Par la suite, le fait de cliquer sur un titre permet d'ouvrir la vidéo de présentation &lt;span lang=\&quot;en\&quot;&gt;Apple&lt;/span&gt; directement au moment indiqué. &lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;Uses\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-18236.html#cas-dusage-0048httpsdeveloperapplecomvideosplaywwdc2018236time48"] = "[Cas d'usage (00:48)](https://developer.apple.com/videos/play/wwdc2018/236/?time=48)";
index.add({
    url: "criteria-ios-wwdc-18236.html#cas-dusage-0048httpsdeveloperapplecomvideosplaywwdc2018236time48",
    title: "[Cas d'usage (00:48)](https://developer.apple.com/videos/play/wwdc2018/236/?time=48)",    
    body: "### [Cas d'usage (00:48)](https://developer.apple.com/videos/play/wwdc2018/236/?time=48) Les différentes utilisations possibles de cette fonctionnalité sont décrites dans cette partie. &lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;Basics\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-18236.html#par-ou-commencer-0203httpsdeveloperapplecomvideosplaywwdc2018236time123"] = "[Par où commencer ? (02:03)](https://developer.apple.com/videos/play/wwdc2018/236/?time=123)";
index.add({
    url: "criteria-ios-wwdc-18236.html#par-ou-commencer-0203httpsdeveloperapplecomvideosplaywwdc2018236time123",
    title: "[Par où commencer ? (02:03)](https://developer.apple.com/videos/play/wwdc2018/236/?time=123)",    
    body: "### [Par où commencer ? (02:03)](https://developer.apple.com/videos/play/wwdc2018/236/?time=123) Pour utiliser une voix synthétisée, il est primordial de **créer** tout d'abord **une instance `AVSpeechSynthesizer`** en s'assurant de son existence programmatique jusqu'à la fin de la vocalisation souhaitée. &lt;/br&gt;&lt;img style=\&quot;max-width: 400px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc18-236-Basics_1.png\&quot; /&gt; &lt;/br&gt;Il faut ensuite **décrire sous forme de texte ce qui doit être vocalisé** et fournir le résultat obtenu à l'instance précédente. &lt;/br&gt;&lt;img style=\&quot;max-width: 500px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc18-236-Basics_2.png\&quot; /&gt; &lt;/br&gt;Dans ce cas, une session `AVAUdioSession` est automatiquement activée et peut être utilisée conjointement avec la vocalisation créée. &lt;/br&gt;&lt;img style=\&quot;max-width: 850px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc18-236-Basics_3.png\&quot; /&gt; &lt;/br&gt;Cette session devra être explicitement désactivée à la disparition de l'instance `AVSpeechSynthesizer`. &lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;AVSpeechSynthesizerDelegate\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-18236.html#avspeechsynthesizerdelegate-0320httpsdeveloperapplecomvideosplaywwdc2018236time200"] = "[AVSpeechSynthesizerDelegate (03:20)](https://developer.apple.com/videos/play/wwdc2018/236/?time=200)";
index.add({
    url: "criteria-ios-wwdc-18236.html#avspeechsynthesizerdelegate-0320httpsdeveloperapplecomvideosplaywwdc2018236time200",
    title: "[AVSpeechSynthesizerDelegate (03:20)](https://developer.apple.com/videos/play/wwdc2018/236/?time=200)",    
    body: "### [AVSpeechSynthesizerDelegate (03:20)](https://developer.apple.com/videos/play/wwdc2018/236/?time=200) Ce protocole comprend un **ensemble de méthodes optionnelles permettant de gérer certains événements du synthétiseur vocal** :  - Pauses et reprises. - Débuts et fins des vocalisations `AVSpeechUtterance `. - Position de l'élément vocalisé au sein du texte auquel il appartient. &lt;/br&gt;&lt;img style=\&quot;max-width: 900px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc18-236-AVSpeechSynthesizerDelegate.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;Demo\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-18236.html#demonstration-0411httpsdeveloperapplecomvideosplaywwdc2018236time251"] = "[Démonstration (04:11)](https://developer.apple.com/videos/play/wwdc2018/236/?time=251)";
index.add({
    url: "criteria-ios-wwdc-18236.html#demonstration-0411httpsdeveloperapplecomvideosplaywwdc2018236time251",
    title: "[Démonstration (04:11)](https://developer.apple.com/videos/play/wwdc2018/236/?time=251)",    
    body: "### [Démonstration (04:11)](https://developer.apple.com/videos/play/wwdc2018/236/?time=251) Exemple très simple d'une vocalisation synthétisée s'appuyant sur les méthodes du protocole `AVSpeechSynthesizerDelegate`. &lt;/br&gt;&lt;img style=\&quot;max-width: 230px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc18-236-Demo.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;TheRightVoice\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-18236.html#choix-de-la-voix-synthetisee-0431httpsdeveloperapplecomvideosplaywwdc2018236time271"] = "[Choix de la voix synthétisée (04:31)](https://developer.apple.com/videos/play/wwdc2018/236/?time=271)";
index.add({
    url: "criteria-ios-wwdc-18236.html#choix-de-la-voix-synthetisee-0431httpsdeveloperapplecomvideosplaywwdc2018236time271",
    title: "[Choix de la voix synthétisée (04:31)](https://developer.apple.com/videos/play/wwdc2018/236/?time=271)",    
    body: "### [Choix de la voix synthétisée (04:31)](https://developer.apple.com/videos/play/wwdc2018/236/?time=271) La voix synthétisée par **défaut** est celle du **langage défini dans les préférences du terminal**. &lt;/br&gt;&lt;img style=\&quot;max-width: 1000px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc18-236-TheRightVoice_1.png\&quot; /&gt; &lt;/br&gt;Il est toutefois possible de définir cette dernière en spécifiant le langage désiré ou en utilisant un identifiant propre à une voix téléchargée.  &lt;/br&gt;&lt;img style=\&quot;max-width: 800px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc18-236-TheRightVoice_2.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;SpeechRate\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-18236.html#debit-vocal-0532httpsdeveloperapplecomvideosplaywwdc2018236time332"] = "[Débit vocal (05:32)](https://developer.apple.com/videos/play/wwdc2018/236/?time=332)";
index.add({
    url: "criteria-ios-wwdc-18236.html#debit-vocal-0532httpsdeveloperapplecomvideosplaywwdc2018236time332",
    title: "[Débit vocal (05:32)](https://developer.apple.com/videos/play/wwdc2018/236/?time=332)",    
    body: "### [Débit vocal (05:32)](https://developer.apple.com/videos/play/wwdc2018/236/?time=332) La vitesse du débit vocal peut être modifiée avec des coefficients multiplicateurs plus ou moins importants selon la valeur programmatique implémentée. &lt;/br&gt;&lt;img style=\&quot;max-width: 530px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc18-236-SpeechRate.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;PitchAndVolume\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-18236.html#hauteur-tonale-et-volume-0615httpsdeveloperapplecomvideosplaywwdc2018236time375"] = "[Hauteur tonale et volume (06:15)](https://developer.apple.com/videos/play/wwdc2018/236/?time=375)";
index.add({
    url: "criteria-ios-wwdc-18236.html#hauteur-tonale-et-volume-0615httpsdeveloperapplecomvideosplaywwdc2018236time375",
    title: "[Hauteur tonale et volume (06:15)](https://developer.apple.com/videos/play/wwdc2018/236/?time=375)",    
    body: "### [Hauteur tonale et volume (06:15)](https://developer.apple.com/videos/play/wwdc2018/236/?time=375) Ces deux propriétés vocales sont facilement personnalisables en notant bien que l'augmentation du volume de la voix ne modifie absolument pas le volume système. &lt;/br&gt;&lt;img style=\&quot;max-width: 720px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc18-236-PitchAndVolume.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;IPA\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-18236.html#phonetique-0654httpsdeveloperapplecomvideosplaywwdc2018236time414"] = "[Phonétique (06:54)](https://developer.apple.com/videos/play/wwdc2018/236/?time=414)";
index.add({
    url: "criteria-ios-wwdc-18236.html#phonetique-0654httpsdeveloperapplecomvideosplaywwdc2018236time414",
    title: "[Phonétique (06:54)](https://developer.apple.com/videos/play/wwdc2018/236/?time=414)",    
    body: "### [Phonétique (06:54)](https://developer.apple.com/videos/play/wwdc2018/236/?time=414) La prononciation de certains mots pouvant parfois prêter à confusion, il est très pratique d'utiliser la phonétique pour s'assurer de la vocalisation appropriée. &lt;/br&gt;Côté développement, on s'appuie sur les **&lt;span lang=\&quot;en\&quot;&gt;Attributed Strings&lt;/span&gt;** pour utiliser l'alphabet phonétique international *(&lt;abbr&gt;IPA&lt;/abbr&gt;)*, ces éléments pouvant aussi servir à spécifier une langue différente uniquement pour une partie de la phrase à vocaliser par exemple. &lt;/br&gt;&lt;img style=\&quot;max-width: 800px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc18-236-IPA.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;   &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["criteria-ios-wwdc-19000.html#wwdc-2019-quelques-enseignements-en-accessibilite"] = "WWDC 2019 : Quelques enseignements en accessibilité";
index.add({
    url: "criteria-ios-wwdc-19000.html#wwdc-2019-quelques-enseignements-en-accessibilite",
    title: "WWDC 2019 : Quelques enseignements en accessibilité",    
    body: "# WWDC 2019 : Quelques enseignements en accessibilité  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;iOS\&quot;, \&quot;url\&quot;: \&quot;./criteria-ios.html\&quot;},                    {\&quot;label\&quot;:\&quot;WWDC\&quot;, \&quot;url\&quot;: \&quot;./criteria-ios-wwdc.html\&quot;},                    {\&quot;label\&quot;:\&quot;2019 - Quelques enseignements en accessibilité\&quot;} 	]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Critères de conception\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-conception.html\&quot;},          {\&quot;label\&quot;:\&quot;Guide pour les développeurs\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-dev.html\&quot;},         {\&quot;label\&quot;:\&quot;VoiceOver\&quot;,\&quot;url\&quot;:\&quot;lecteur-ecran-voiceover.html\&quot;},         {\&quot;label\&quot;:\&quot;WWDC\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-wwdc.html\&quot;},         {\&quot;label\&quot;:\&quot;Tests\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-test.html\&quot;}     ]); });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-ios\&quot;&gt;&lt;/span&gt;  &lt;img style=\&quot;max-width: 800px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-000.png\&quot; /&gt; &lt;/br&gt;Cette session regroupe quatre courtes interventions toutes visualisables sur le **site développeur officiel d'&lt;span lang=\&quot;en\&quot;&gt;Apple&lt;/span&gt;**:  - [Nouveautés iOS 13 pour l'accessibilité visuelle](#VisualDesignAccessibility) - [Découvrir Accessibility Inspector](#AccessibilityInspector) - [La bonne rédaction des labels](#WritingGreatAccessibilityLabels) - [Utiliser les actions personnalisées](#AccessibilityCustomActions)  Par la suite, selon la configuration de la présentation, le fait de cliquer sur un titre ou un temps indiqué permet d'ouvrir la vidéo &lt;span lang=\&quot;en\&quot;&gt;Apple&lt;/span&gt; directement au moment spécifié. &lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;VisualDesignAccessibility\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-19000.html#nouveautes-ios-13-pour-laccessibilite-visuelle"] = "Nouveautés iOS 13 pour l'accessibilité visuelle";
index.add({
    url: "criteria-ios-wwdc-19000.html#nouveautes-ios-13-pour-laccessibilite-visuelle",
    title: "Nouveautés iOS 13 pour l'accessibilité visuelle",    
    body: "## Nouveautés iOS 13 pour l'accessibilité visuelle Cette présentation visualisable sur le **site développeur officiel d'&lt;span lang=\&quot;en\&quot;&gt;Apple&lt;/span&gt;** ([session 244](https://developer.apple.com/videos/play/wwdc2019/244/)) développe certains points pour **rendre une application la plus accessible possible au niveau visuel**. &lt;/br&gt;&lt;img style=\&quot;max-width: 550px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-244.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;Les thèmes abordés au sein de la vidéo sont détaillés ci-dessous :  - **DYNAMIC TYPE**     - &lt;a role=\&quot;button\&quot; onclick=\&quot;$('#DynamicType-TheFourPrinciples_tab').trigger('click');document.getElementById('DynamicType').scrollIntoView({ behavior: 'smooth', block: 'start' })\&quot;&gt;Les quatre principes&lt;/a&gt;     - &lt;a role=\&quot;button\&quot; onclick=\&quot;$('#DynamicType-TextStyles_tab').trigger('click');document.getElementById('DynamicType').scrollIntoView({ behavior: 'smooth', block: 'start' })\&quot;&gt;Les styles de texte&lt;/a&gt;     - &lt;a role=\&quot;button\&quot; onclick=\&quot;$('#DynamicType-Xcode_tab').trigger('click');document.getElementById('DynamicType').scrollIntoView({ behavior: 'smooth', block: 'start' })\&quot;&gt;Xcode&lt;/a&gt; ⟹ **nouveauté iOS 13** &lt;/br&gt;&lt;/br&gt; - **RÉDUCTION DE MOUVEMENT**     - &lt;a role=\&quot;button\&quot; onclick=\&quot;$('#ReduceMotion-TheBasics_tab').trigger('click');document.getElementById('ReduceMotion').scrollIntoView({ behavior: 'smooth', block: 'start' })\&quot;&gt;Fondamentaux&lt;/a&gt;     - &lt;a role=\&quot;button\&quot; onclick=\&quot;$('#ReduceMotion-AutoplayingVideo_tab').trigger('click');document.getElementById('ReduceMotion').scrollIntoView({ behavior: 'smooth', block: 'start' })\&quot;&gt;Prévisualisation vidéo&lt;/a&gt; ⟹ **nouveauté iOS 13**     - &lt;a role=\&quot;button\&quot; onclick=\&quot;$('#ReduceMotion-ScreenTransitions_tab').trigger('click');document.getElementById('ReduceMotion').scrollIntoView({ behavior: 'smooth', block: 'start' })\&quot;&gt;Transitions entre écrans&lt;/a&gt; ⟹ **nouveauté iOS 13** &lt;/br&gt;&lt;/br&gt; - **COULEUR**     - &lt;a role=\&quot;button\&quot; onclick=\&quot;$('#Color-TheBasics_tab').trigger('click');document.getElementById('Color').scrollIntoView({ behavior: 'smooth', block: 'start' })\&quot;&gt;Fondamentaux&lt;/a&gt;     - &lt;a role=\&quot;button\&quot; onclick=\&quot;$('#Color-DifferentiateWithoutColor_tab').trigger('click');document.getElementById('Color').scrollIntoView({ behavior: 'smooth', block: 'start' })\&quot;&gt;Couleur et forme&lt;/a&gt; ⟹ **nouveauté iOS 13** &lt;/br&gt; &lt;a id=\&quot;DynamicType\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-19000.html#dynamic-type"] = "DYNAMIC TYPE";
index.add({
    url: "criteria-ios-wwdc-19000.html#dynamic-type",
    title: "DYNAMIC TYPE",    
    body: "### DYNAMIC TYPE &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#DynamicType-TheFourPrinciples\&quot;            id=\&quot;DynamicType-TheFourPrinciples_tab\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Les quatre principes&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#DynamicType-TextStyles\&quot;            id=\&quot;DynamicType-TextStyles_tab\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Les styles de texte&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#DynamicType-Xcode\&quot;            id=\&quot;DynamicType-Xcode_tab\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Xcode&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;DynamicType-TheFourPrinciples\&quot;      role=\&quot;tabpanel\&quot;&gt; &lt;a alt=\&quot;Lien vers l'extrait vidéo au temps indiqué.\&quot; href=\&quot;https://developer.apple.com/videos/play/wwdc2019/244/?time=77\&quot;&gt;🎬 (01:17)&lt;/a&gt; &lt;/br&gt;&lt;/br&gt; L'utilisation du `Dynamic Type` s'appuie sur quatre principes qu'il est vivement recommandé de suivre :&lt;/br&gt; &lt;/br&gt; &lt;ul&gt;   &lt;li&gt;Tout texte dont la taille peut être augmentée se doit d'être implémenté de cette façon.&lt;/li&gt;   &lt;li&gt;Toute la largeur de l'écran doit être utilisée.&lt;/li&gt;   &lt;li&gt;Ne pas ajouter une troncature de mots si elle n'est pas présente sur le grossissement \&quot;standard\&quot; de l'application.&lt;/li&gt;   &lt;li&gt;La taille des textes et celle des éléments graphiques doivent augmenter conjointement de façon à conserver un ensemble visuel équilibré. &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;DynamicType-TextStyles\&quot; role=\&quot;tabpanel\&quot; &gt; &lt;a alt=\&quot;Lien vers l'extrait vidéo au temps indiqué.\&quot; href=\&quot;https://developer.apple.com/videos/play/wwdc2019/244/?time=110\&quot;&gt;🎬 (01:50)&lt;/a&gt; &lt;/br&gt;&lt;/br&gt; Petit rappel sur les 11 styles de texte disponibles depuis iOS 11 : &lt;/br&gt;&lt;img style=\&quot;max-width: 600px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-244-TextStyles_1.png\&quot; /&gt; &lt;/br&gt;... ainsi que sur la façon programmatique de les implémenter : &lt;/br&gt;&lt;img style=\&quot;max-width: 700px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-244-TextStyles_2.png\&quot; /&gt; &lt;/br&gt;Une explication détaillée de l'implémentation du `Dynamic Type` est disponible dans la partie &lt;a href=\&quot;./criteria-ios-dev.html#taille-des-textes\&quot; style=\&quot;text-decoration: underline;\&quot;&gt;guide pour les développeurs&lt;/a&gt;. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;DynamicType-Xcode\&quot; role=\&quot;tabpanel\&quot; &gt; &lt;a alt=\&quot;Lien vers l'extrait vidéo au temps indiqué.\&quot; href=\&quot;https://developer.apple.com/videos/play/wwdc2019/244/?time=180\&quot;&gt;🎬 (03:00)&lt;/a&gt; &lt;/br&gt;&lt;/br&gt; Un **nouvel écran** apparaît sous **Xcode 11** pour modifier et visualiser le grossissement de texte de façon dynamique sur le simulateur. &lt;/br&gt;&lt;img style=\&quot;max-width: 700px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-244-TextStyles_3.png\&quot; /&gt; &lt;/div&gt; &lt;/div&gt;  &lt;/br&gt; &lt;a id=\&quot;ReduceMotion\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-19000.html#reduction-de-mouvement"] = "RÉDUCTION DE MOUVEMENT";
index.add({
    url: "criteria-ios-wwdc-19000.html#reduction-de-mouvement",
    title: "RÉDUCTION DE MOUVEMENT",    
    body: "### RÉDUCTION DE MOUVEMENT &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#ReduceMotion-TheBasics\&quot;            id=\&quot;ReduceMotion-TheBasics_tab\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Fondamentaux&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#ReduceMotion-AutoplayingVideo\&quot;            id=\&quot;ReduceMotion-AutoplayingVideo_tab\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Prévisualisation vidéo&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#ReduceMotion-ScreenTransitions\&quot;            id=\&quot;ReduceMotion-ScreenTransitions_tab\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Transitions entre écrans&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;ReduceMotion-TheBasics\&quot;      role=\&quot;tabpanel\&quot;&gt; &lt;a alt=\&quot;Lien vers l'extrait vidéo au temps indiqué.\&quot; href=\&quot;https://developer.apple.com/videos/play/wwdc2019/244/?time=203\&quot;&gt;🎬 (03:23)&lt;/a&gt; &lt;/br&gt;&lt;/br&gt; Petit rappel sur la situation actuelle incluant la fonctionnalité déjà présente pour minimiser le mouvement à l'écran : &lt;/br&gt;&lt;img style=\&quot;max-width: 450px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-244-TextStyles_4.png\&quot; /&gt; &lt;/br&gt;... ainsi que sur la façon programmatique de connaître sa valeur issue des réglages du terminal : &lt;/br&gt;&lt;img style=\&quot;max-width: 750px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-244-TextStyles_5.png\&quot; /&gt; &lt;/br&gt;Une explication détaillée des états et des événements des options d'accessibilité est disponible dans la partie &lt;a href=\&quot;./criteria-ios-dev.html#options-d-accessibilit-\&quot; style=\&quot;text-decoration: underline;\&quot;&gt;guide pour les développeurs&lt;/a&gt;. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;ReduceMotion-AutoplayingVideo\&quot; role=\&quot;tabpanel\&quot; &gt; &lt;a alt=\&quot;Lien vers l'extrait vidéo au temps indiqué.\&quot; href=\&quot;https://developer.apple.com/videos/play/wwdc2019/244/?time=257\&quot;&gt;🎬 (04:17)&lt;/a&gt; &lt;/br&gt;&lt;/br&gt; **Nouvelle fonctionnalité iOS 13**, la prévisualisation automatique de vidéos est désormais à la main de l'utilisateur qui peut décider de son activation via les réglages du terminal : &lt;/br&gt;&lt;img style=\&quot;max-width: 425px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-244-TextStyles_6.png\&quot; /&gt; &lt;/br&gt;Il est aussi possible de connaître l'état de cette option de façon programmatique : &lt;/br&gt;&lt;img style=\&quot;max-width: 750px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-244-TextStyles_7.png\&quot; /&gt; &lt;/br&gt;Dans le cas où cette option est désactivée, seule une interaction volontaire de l'utilisateur doit permettre le contrôle de la vidéo. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;ReduceMotion-ScreenTransitions\&quot; role=\&quot;tabpanel\&quot; &gt; &lt;a alt=\&quot;Lien vers l'extrait vidéo au temps indiqué.\&quot; href=\&quot;https://developer.apple.com/videos/play/wwdc2019/244/?time=343\&quot;&gt;🎬 (05:43)&lt;/a&gt; &lt;/br&gt;&lt;/br&gt; Cette **nouvelle fonctionnalité iOS 13** n'apparaît qu'à partir du moment où l'option d'accessibilité `Réduire les animations` est activée. &lt;/br&gt;Elle permet un passage entre les différentes écrans moins perturbant pour certains utilisateurs dont l'adaptation visuelle aux mouvements est particulièrement sensible. &lt;/br&gt;&lt;img style=\&quot;max-width: 750px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-244-TextStyles_12.png\&quot; /&gt; &lt;/br&gt;Une fois activée, l'option `Préférer les transisitions en fondu enchaînées` fonctionne automatiquement tant qu'on utilise les éléments standards de UIKit *(navigation, vues modales...)*. &lt;/div&gt; &lt;/div&gt;  &lt;/br&gt; &lt;a id=\&quot;Color\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-19000.html#couleur"] = "COULEUR";
index.add({
    url: "criteria-ios-wwdc-19000.html#couleur",
    title: "COULEUR",    
    body: "### COULEUR &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#Color-TheBasics\&quot;            id=\&quot;Color-TheBasics_tab\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Fondamentaux&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#Color-DifferentiateWithoutColor\&quot;            id=\&quot;Color-DifferentiateWithoutColor_tab\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Couleur et forme&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;Color-TheBasics\&quot;      role=\&quot;tabpanel\&quot;&gt; &lt;a alt=\&quot;Lien vers l'extrait vidéo au temps indiqué.\&quot; href=\&quot;https://developer.apple.com/videos/play/wwdc2019/244/?time=400\&quot;&gt;🎬 (06:40)&lt;/a&gt; &lt;/br&gt;&lt;/br&gt; Présentation de quelques dyschromatopsies qui vont permettre de mieux comprendre l'arrivée de la nouvelle fonctionnalité proposée dans l'onglet suivant. &lt;/br&gt;&lt;img style=\&quot;max-width: 800px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-244-TextStyles_8.png\&quot; /&gt; &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;Color-DifferentiateWithoutColor\&quot; role=\&quot;tabpanel\&quot; &gt; &lt;a alt=\&quot;Lien vers l'extrait vidéo au temps indiqué.\&quot; href=\&quot;https://developer.apple.com/videos/play/wwdc2019/244/?time=453\&quot;&gt;🎬 (07:33)&lt;/a&gt; &lt;/br&gt;&lt;/br&gt; La **nouvelle fonctionnalité iOS 13** `Différencier sans couleur` permet à l'utilisateur d'indiquer sa préférence à ne surtout **pas utiliser la couleur pour faire passer une information**. &lt;/br&gt;&lt;img style=\&quot;max-width: 900px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-244-TextStyles_9.png\&quot; /&gt; &lt;/br&gt;La valeur de cette option est accessible de façon programmatique afin d'adapter subséquemment le visuel d'une application : &lt;/br&gt;&lt;img style=\&quot;max-width: 800px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-244-TextStyles_10.png\&quot; /&gt; &lt;/br&gt;Il est bien évidemment recommandé de &lt;a href=\&quot;./criteria-ios-conception.html#couleurs\&quot; style=\&quot;text-decoration: underline;\&quot;&gt;ne jamais faire passer une information par la couleur uniquement&lt;/a&gt; mais il y a des cas spécifiques où ce type de configuration est primordial et où l'intérêt de rajouter des éléments graphiques pour différencier les couleurs a un intérêt non négligeable *(jeu vidéo par exemple)*. &lt;/br&gt;&lt;/br&gt;&lt;img style=\&quot;max-width: 1100px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-244-TextStyles_11.png\&quot; /&gt; &lt;/div&gt; &lt;/div&gt;  &lt;/br&gt;&lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;AccessibilityInspector\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-19000.html#decouvrir-accessibility-inspector"] = "Découvrir Accessibility Inspector";
index.add({
    url: "criteria-ios-wwdc-19000.html#decouvrir-accessibility-inspector",
    title: "Découvrir Accessibility Inspector",    
    body: "## Découvrir Accessibility Inspector Cette présentation visualisable sur le **site développeur officiel d'&lt;span lang=\&quot;en\&quot;&gt;Apple&lt;/span&gt;** ([session 257](https://developer.apple.com/videos/play/wwdc2019/257/)) a pour but de présenter l'outil Accessibility Inspector ainsi que quelques nouveautés Xcode 11 qui vont permettre de résoudre certains problèmes exposés au sein de l'application de démonstration. &lt;/br&gt;&lt;img style=\&quot;max-width: 500px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-257.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;Les thèmes abordés ainsi que leur référence temporelle au sein de la vidéo sont décrits ci-dessous :  - [Présentation](#Introduction) (00:51) - [Audit](#Audit) (02:26) - [Inspection](#Inspection) (03:40) incluant une **nouveauté Xcode 11** - [CATextLayer](#CATextLayer) (05:26) - [Contraste des couleurs](#ColorContrast) (06:26) incluant une **nouveauté Xcode 11** - [Bilan](#Conclusion) (08:24) &lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;Introduction\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-19000.html#presentation-0051httpsdeveloperapplecomvideosplaywwdc2019257time51"] = "[Présentation (00:51)](https://developer.apple.com/videos/play/wwdc2019/257/?time=51)";
index.add({
    url: "criteria-ios-wwdc-19000.html#presentation-0051httpsdeveloperapplecomvideosplaywwdc2019257time51",
    title: "[Présentation (00:51)](https://developer.apple.com/videos/play/wwdc2019/257/?time=51)",    
    body: "### [Présentation (00:51)](https://developer.apple.com/videos/play/wwdc2019/257/?time=51) &lt;img style=\&quot;max-width: 800px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-257-Introduction.png\&quot; /&gt; &lt;/br&gt;L'application de démonstration qui va servir tout au long de cette présentation est expliquée de façon à mieux comprendre la future problématique remontée par l'outil avec mise en avant de :  - La façon d'accéder à Accessibility Inspector [(01:34)](https://developer.apple.com/videos/play/wwdc2019/257/?time=94). - La fonctionnalité de grossissement `hover text` [(01:43)](https://developer.apple.com/videos/play/wwdc2019/257/?time=103). &lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;Audit\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-19000.html#audit-0226httpsdeveloperapplecomvideosplaywwdc2019257time146"] = "[Audit (02:26)](https://developer.apple.com/videos/play/wwdc2019/257/?time=146)";
index.add({
    url: "criteria-ios-wwdc-19000.html#audit-0226httpsdeveloperapplecomvideosplaywwdc2019257time146",
    title: "[Audit (02:26)](https://developer.apple.com/videos/play/wwdc2019/257/?time=146)",    
    body: "### [Audit (02:26)](https://developer.apple.com/videos/play/wwdc2019/257/?time=146) Cette fonctionnalité a pour but de présenter une liste de problèmes potentiels détectés par l'outil en accessibilité. &lt;/br&gt;&lt;img style=\&quot;max-width: 800px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-257-Audit.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;Inspection\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-19000.html#inspection-0340httpsdeveloperapplecomvideosplaywwdc2019257time220"] = "[Inspection (03:40)](https://developer.apple.com/videos/play/wwdc2019/257/?time=220)";
index.add({
    url: "criteria-ios-wwdc-19000.html#inspection-0340httpsdeveloperapplecomvideosplaywwdc2019257time220",
    title: "[Inspection (03:40)](https://developer.apple.com/videos/play/wwdc2019/257/?time=220)",    
    body: "### [Inspection (03:40)](https://developer.apple.com/videos/play/wwdc2019/257/?time=220) Après avoir montré comment activer une sélection d'éléments graphiques concomittante à la description affichée, la **nouvelle fonctionnalité Xcode 11** qui permet la **vocalisation et la sélection d'éléments sur simulateur** [(04:11)](https://developer.apple.com/videos/play/wwdc2019/257/?time=251) est enfin dévoilée. &lt;/br&gt;&lt;img style=\&quot;max-width: 800px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-257-Inspection.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;CATextLayer\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-19000.html#catextlayer-0526httpsdeveloperapplecomvideosplaywwdc2019257time326"] = "[CATextLayer (05:26)](https://developer.apple.com/videos/play/wwdc2019/257/?time=326)";
index.add({
    url: "criteria-ios-wwdc-19000.html#catextlayer-0526httpsdeveloperapplecomvideosplaywwdc2019257time326",
    title: "[CATextLayer (05:26)](https://developer.apple.com/videos/play/wwdc2019/257/?time=326)",    
    body: "### [CATextLayer (05:26)](https://developer.apple.com/videos/play/wwdc2019/257/?time=326) Cet exemple met en avant le fait que l'accessibilité pour ce type d'élément n'est pas du tout géré automatiquement par le système et doit absolument être implémenté de façon programmatique. &lt;/br&gt;&lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;ColorContrast\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-19000.html#contraste-des-couleurs-0626httpsdeveloperapplecomvideosplaywwdc2019257time386"] = "[Contraste des couleurs (06:26)](https://developer.apple.com/videos/play/wwdc2019/257/?time=386)";
index.add({
    url: "criteria-ios-wwdc-19000.html#contraste-des-couleurs-0626httpsdeveloperapplecomvideosplaywwdc2019257time386",
    title: "[Contraste des couleurs (06:26)](https://developer.apple.com/videos/play/wwdc2019/257/?time=386)",    
    body: "### [Contraste des couleurs (06:26)](https://developer.apple.com/videos/play/wwdc2019/257/?time=386) Hormis le fait d'avoir des polices de taille suffisamment grande pour être perçues par tous, il est aussi primordial de [respecter un contraste de couleurs](./criteria-ios-conception.html#couleurs) pour permettre à l'ensemble des personnes ayant des troubles visuels de distinguer parfaitement ce qui est sur l'écran. &lt;/br&gt;&lt;/br&gt;Une fois le problème décelé, une solution est apportée par la **nouvelle fonctionnalité Xcode 11** : **Color Contrast Calculator**. &lt;/br&gt;&lt;img style=\&quot;max-width: 850px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-257-ColorContrast.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;Conclusion\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-19000.html#bilan-0824httpsdeveloperapplecomvideosplaywwdc2019257time504"] = "[Bilan (08:24)](https://developer.apple.com/videos/play/wwdc2019/257/?time=504)";
index.add({
    url: "criteria-ios-wwdc-19000.html#bilan-0824httpsdeveloperapplecomvideosplaywwdc2019257time504",
    title: "[Bilan (08:24)](https://developer.apple.com/videos/play/wwdc2019/257/?time=504)",    
    body: "### [Bilan (08:24)](https://developer.apple.com/videos/play/wwdc2019/257/?time=504) Utilisations des outils présentés lors de la session pour visualiser le rendu final et s'assurer que les solutions avancées fonctionnent parfaitement.  &lt;/br&gt;&lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;WritingGreatAccessibilityLabels\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-19000.html#la-bonne-redaction-des-labels"] = "La bonne rédaction des labels";
index.add({
    url: "criteria-ios-wwdc-19000.html#la-bonne-redaction-des-labels",
    title: "La bonne rédaction des labels",    
    body: "## La bonne rédaction des labels Cette présentation visualisable sur le **site développeur officiel d'&lt;span lang=\&quot;en\&quot;&gt;Apple&lt;/span&gt;** ([session 254](https://developer.apple.com/videos/play/wwdc2019/254/)) est réalisée par une personne non voyante qui explique l'importance de bien vocaliser les éléments accessibles par le biais d'exemples concrets et de bonnes pratiques. &lt;/br&gt;&lt;img style=\&quot;max-width: 600px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-254.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt; Après une brève introduction concernant les attentes d'un utilisateur &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; sur le **premier lancement d'une application mobile** inconnue pour lui [(00:13)](https://developer.apple.com/videos/play/wwdc2019/254/?time=13), la **définition d'un label** est présentée en détails [(01:53)](https://developer.apple.com/videos/play/wwdc2019/254/?time=113) suivie d'**explications sur différents contextes qui induisent une vocalisation adaptée** pour un même élément accessible [(02:41)](https://developer.apple.com/videos/play/wwdc2019/254/?time=161). &lt;/br&gt;&lt;/br&gt;La seconde partie de la présentation consiste à développer un ensemble des bonnes pratiques agrémentées d'exemples concrets : [(04:24)](https://developer.apple.com/videos/play/wwdc2019/254/?time=264)  - Toujours ajouter des labels appropriés aux éléments accessibles [(04:33)](https://developer.apple.com/videos/play/wwdc2019/254/?time=273). - Ne pas insérer le type de l'élément accessible dans son label [(05:22)](https://developer.apple.com/videos/play/wwdc2019/254/?time=322). - Notifier l'utilisateur lors de mises à jour informatives de l'interface graphique [(05:46)](https://developer.apple.com/videos/play/wwdc2019/254/?time=346). - Ajouter une clarification sur le contexte quand cela est nécessaire pour la compréhension [(06:07)](https://developer.apple.com/videos/play/wwdc2019/254/?time=367). - Éviter les répétitions lorsqu'il n'y a pas d'équivoques [(06:42)](https://developer.apple.com/videos/play/wwdc2019/254/?time=402). - Penser aux notifications vocales pour les animations porteuses de sens *(chargement de données...)* [(07:08)](https://developer.apple.com/videos/play/wwdc2019/254/?time=428). - Éviter les labels prolixes [(07:24)](https://developer.apple.com/videos/play/wwdc2019/254/?time=444) sauf lorsque cela permet d'apporter de l'information nécessaire et non verbeuse [(07:48)](https://developer.apple.com/videos/play/wwdc2019/254/?time=468). &lt;/br&gt;&lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;AccessibilityCustomActions\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-19000.html#utiliser-les-actions-personnalisees"] = "Utiliser les actions personnalisées";
index.add({
    url: "criteria-ios-wwdc-19000.html#utiliser-les-actions-personnalisees",
    title: "Utiliser les actions personnalisées",    
    body: "## Utiliser les actions personnalisées Cette présentation visualisable sur le **site développeur officiel d'&lt;span lang=\&quot;en\&quot;&gt;Apple&lt;/span&gt;** ([session 250](https://developer.apple.com/videos/play/wwdc2019/250/)) met en avant l'intérêt et l'implémentation des actions personnalisées pour le [lecteur d'écran](./lecteur-ecran-voiceover.html) et le [contrôle de sélection](./criteria-ios-dev.html#contr-le-de-s-lection) en s'appuyant sur une application qui permet de comprendre directement les concepts développés. &lt;/br&gt;&lt;img style=\&quot;max-width: 600px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-250.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;Les thèmes abordés ainsi que leur référence temporelle au sein de la vidéo sont décrits ci-dessous :  - [Introduction](#CustomActionsIntroduction) (00:12) - &lt;a role=\&quot;button\&quot; onclick=\&quot;$('#CustomActions-VoiceOver_tab').trigger('click');document.getElementById('CustomActions').scrollIntoView({ behavior: 'smooth', block: 'start' })\&quot;&gt;Actions personnalisées : lecteur d'écran&lt;/a&gt; (03:10) - &lt;a role=\&quot;button\&quot; onclick=\&quot;$('#CustomActions-SwitchControl_tab').trigger('click');document.getElementById('CustomActions').scrollIntoView({ behavior: 'smooth', block: 'start' })\&quot;&gt;Actions personnalisées : contrôle de sélection&lt;/a&gt; (04:28) - [Implémentation](#CustomActionsCoding) (07:59) ⟹ **nouveauté iOS 13** &lt;/br&gt;&lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;CustomActionsIntroduction\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-19000.html#introduction-0012httpsdeveloperapplecomvideosplaywwdc2019250time12"] = "[Introduction (00:12)](https://developer.apple.com/videos/play/wwdc2019/250/?time=12)";
index.add({
    url: "criteria-ios-wwdc-19000.html#introduction-0012httpsdeveloperapplecomvideosplaywwdc2019250time12",
    title: "[Introduction (00:12)](https://developer.apple.com/videos/play/wwdc2019/250/?time=12)",    
    body: "## [Introduction (00:12)](https://developer.apple.com/videos/play/wwdc2019/250/?time=12) Présentation rapide de VoiceOver ainsi que de la problématique liée à une implémentation insuffisante mise en exergue par l'application de démonstration utilisée tout au long de la session. &lt;/br&gt;&lt;/br&gt;&lt;/br&gt; &lt;a id=\&quot;CustomActions\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-19000.html#actions-personnalisees"] = "Actions personnalisées";
index.add({
    url: "criteria-ios-wwdc-19000.html#actions-personnalisees",
    title: "Actions personnalisées",    
    body: "## Actions personnalisées &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#CustomActions-VoiceOver\&quot;            id=\&quot;CustomActions-VoiceOver_tab\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;Lecteur d'écran&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#CustomActions-SwitchControl\&quot;            id=\&quot;CustomActions-SwitchControl_tab\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;Contrôle de sélection&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;CustomActions-VoiceOver\&quot;      role=\&quot;tabpanel\&quot;&gt; &lt;a alt=\&quot;Lien vers l'extrait vidéo au temps indiqué.\&quot; href=\&quot;https://developer.apple.com/videos/play/wwdc2019/250/?time=190\&quot;&gt;🎬 (03:10)&lt;/a&gt; &lt;/br&gt;&lt;/br&gt; L'intérêt des &lt;a href=\&quot;./criteria-ios-dev.html#actions-personnalis-es\&quot; style=\&quot;text-decoration: underline;\&quot;&gt;actions personnalisées&lt;/a&gt; avec &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; est présenté de façon très pragmatique et particulièrement pédagogique de façon à comprendre pourquoi et dans quels contextes ce type de fonctionnalité doit absolument être mise en oeuvre pour améliorer significativement l'expérience utilisateur. &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot; id=\&quot;CustomActions-SwitchControl\&quot; role=\&quot;tabpanel\&quot; &gt; &lt;a alt=\&quot;Lien vers l'extrait vidéo au temps indiqué.\&quot; href=\&quot;https://developer.apple.com/videos/play/wwdc2019/250/?time=268\&quot;&gt;🎬 (04:28)&lt;/a&gt; &lt;/br&gt;&lt;/br&gt; L'application de démonstration est utilisée avec le contrôle de sélection dirigé par un appareil connecté en bluetooth au mobile et doté de deux boutons : le premier *(blanc)* permet l'activation alors que le second *(orange)* permet la sélection. &lt;/br&gt;&lt;img style=\&quot;max-width: 600px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-250-CustomActionsSwitchControl.png\&quot; /&gt; &lt;/br&gt;L'utilisation d'actions personnalisées dans ce contexte va permettre une **diminution drastique du nombre de sélections/activations** à réaliser par l'utilisateur pour aboutir à un même résultat. &lt;/div&gt; &lt;/div&gt;  &lt;/br&gt;&lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;CustomActionsCoding\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-19000.html#implementation-0759httpsdeveloperapplecomvideosplaywwdc2019250time479"] = "[Implémentation (07:59)](https://developer.apple.com/videos/play/wwdc2019/250/?time=479)";
index.add({
    url: "criteria-ios-wwdc-19000.html#implementation-0759httpsdeveloperapplecomvideosplaywwdc2019250time479",
    title: "[Implémentation (07:59)](https://developer.apple.com/videos/play/wwdc2019/250/?time=479)",    
    body: "## [Implémentation (07:59)](https://developer.apple.com/videos/play/wwdc2019/250/?time=479) Depuis iOS 8, la création d'[actions personnalisées](./criteria-ios-dev.html#actions-personnalis-es) s'appuie sur une syntaxe ObjectiveC qui s'est adaptée à Swift en incluant désormais une **&lt;span lang=\&quot;en\&quot;&gt;closure&lt;/span&gt; en iOS 13**. &lt;/br&gt;&lt;img style=\&quot;max-width: 900px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-250-CustomActionsCoding.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;&lt;/br&gt; &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["criteria-ios-wwdc-19261.html#wwdc-2019-large-content-viewer"] = "WWDC 2019 : Large Content Viewer";
index.add({
    url: "criteria-ios-wwdc-19261.html#wwdc-2019-large-content-viewer",
    title: "WWDC 2019 : Large Content Viewer",    
    body: "# WWDC 2019 : Large Content Viewer  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;iOS\&quot;, \&quot;url\&quot;: \&quot;./criteria-ios.html\&quot;},                    {\&quot;label\&quot;:\&quot;WWDC\&quot;, \&quot;url\&quot;: \&quot;./criteria-ios-wwdc.html\&quot;},                    {\&quot;label\&quot;:\&quot;2019 - Large Content Viewer\&quot;} 	]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Critères de conception\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-conception.html\&quot;},          {\&quot;label\&quot;:\&quot;Guide pour les développeurs\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-dev.html\&quot;},         {\&quot;label\&quot;:\&quot;VoiceOver\&quot;,\&quot;url\&quot;:\&quot;lecteur-ecran-voiceover.html\&quot;},         {\&quot;label\&quot;:\&quot;WWDC\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-wwdc.html\&quot;},         {\&quot;label\&quot;:\&quot;Tests\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-test.html\&quot;}     ]); });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-ios\&quot;&gt;&lt;/span&gt;  Cette présentation visualisable sur le **site développeur officiel d'&lt;span lang=\&quot;en\&quot;&gt;Apple&lt;/span&gt;** ([session 261](https://developer.apple.com/videos/play/wwdc2019/261/)) détaille les nouveautés iOS&amp;nbsp;13 de la fonctionnalité **&lt;span lang=\&quot;en\&quot;&gt;Large&amp;nbsp;Content&amp;nbsp;Viewer&lt;/span&gt;** utilisée par les personnes souhaitant visualiser l'écran avec une taille de police personnalisée et implémentée de concert avec le **&lt;span lang=\&quot;en\&quot;&gt;Dynamic&amp;nbsp;Type&lt;/span&gt;** depuis iOS&amp;nbsp;11. &lt;/br&gt;&lt;img style=\&quot;max-width: 700px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-261.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;Les thèmes abordés ainsi que leur référence temporelle au sein de la vidéo sont décrits ci-dessous :  - [Dynamic Type](#DynamicType) (00:57) - [Large Content Viewer](#LargeContentViewer) (01:54) - [Images](#ImageSettings) (04:02) - [Custom Views](#CustomViews) (04:52) ⟹ **nouveauté iOS 13** - [Exemples](#Examples) (09:15)  Par la suite, selon la configuration de la présentation, le fait de cliquer sur un titre ou un temps indiqué permet d'ouvrir la vidéo &lt;span lang=\&quot;en\&quot;&gt;Apple&lt;/span&gt; directement au moment spécifié. &lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;DynamicType\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-19261.html#dynamic-type-0057httpsdeveloperapplecomvideosplaywwdc2019261time57"] = "[Dynamic Type (00:57)](https://developer.apple.com/videos/play/wwdc2019/261/?time=57)";
index.add({
    url: "criteria-ios-wwdc-19261.html#dynamic-type-0057httpsdeveloperapplecomvideosplaywwdc2019261time57",
    title: "[Dynamic Type (00:57)](https://developer.apple.com/videos/play/wwdc2019/261/?time=57)",    
    body: "## [Dynamic Type (00:57)](https://developer.apple.com/videos/play/wwdc2019/261/?time=57) Petit rappel sur la fonctionnalité &lt;span lang=\&quot;en\&quot;&gt;Dynamic&amp;nbsp;Type&lt;/span&gt; dont le but est de **permettre l'adaptation graphique à la taille des polices** modifiable dans les réglages utilisateurs &lt;/br&gt;&lt;img style=\&quot;max-width: 900px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-261-DynamicType.png\&quot; /&gt; &lt;/br&gt;Une explication détaillée de l'implémentation de cette fonctionnalité est disponible dans la partie [guide pour les développeurs](./criteria-ios-dev.html#taille-des-textes). &lt;/br&gt;&lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;LargeContentViewer\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-19261.html#large-content-viewer-0154httpsdeveloperapplecomvideosplaywwdc2019261time114"] = "[Large Content Viewer (01:54)](https://developer.apple.com/videos/play/wwdc2019/261/?time=114)";
index.add({
    url: "criteria-ios-wwdc-19261.html#large-content-viewer-0154httpsdeveloperapplecomvideosplaywwdc2019261time114",
    title: "[Large Content Viewer (01:54)](https://developer.apple.com/videos/play/wwdc2019/261/?time=114)",    
    body: "## [Large Content Viewer (01:54)](https://developer.apple.com/videos/play/wwdc2019/261/?time=114) Cette fonctionnalité iOS&amp;nbsp;11 **disponible uniquement quand l'option `Tailles de police plus grandes` est activée** permet de rendre très efficace le grossissement des éléments de barres *(navigation, onglets...)* pour les personnes souhaitant grossir la taille des polices à l'aide du &lt;span lang=\&quot;en\&quot;&gt;Dynamic&amp;nbsp;Type&lt;/span&gt;. &lt;/br&gt;&lt;img style=\&quot;max-width: 350px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-261-LargeContentViewer_1.png\&quot; /&gt; &lt;/br&gt;Le déclenchement de cette fonctionnalité s'effectue par un **appui long** sur l'élément concerné que l'on peut **laisser glisser** sur les éléments voisins pour les grossir à leur tour et finalement activer celui sur lequel on **relève le doigt de l'écran**. &lt;/br&gt;&lt;img style=\&quot;max-width: 900px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-261-LargeContentViewer_2.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;Il est très important d'avoir à l'esprit que les modifications de taille liées au &lt;span lang=\&quot;en\&quot;&gt;Dynamic&amp;nbsp;Type&lt;/span&gt; doivent toujours être implémentées de façon **P.R.I.O.R.I.T.A.I.R.E.** : le &lt;span lang=\&quot;en\&quot;&gt;Large&amp;nbsp;Content&amp;nbsp;Viewer&lt;/span&gt; n'est à utiliser qu'à partir du moment où **l'élément graphique impacté ne peut pas répondre aux changements souhaités**. &lt;/br&gt;&lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;ImageSettings\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-19261.html#images-0402httpsdeveloperapplecomvideosplaywwdc2019261time242"] = "[Images (04:02)](https://developer.apple.com/videos/play/wwdc2019/261/?time=242)";
index.add({
    url: "criteria-ios-wwdc-19261.html#images-0402httpsdeveloperapplecomvideosplaywwdc2019261time242",
    title: "[Images (04:02)](https://developer.apple.com/videos/play/wwdc2019/261/?time=242)",    
    body: "## [Images (04:02)](https://developer.apple.com/videos/play/wwdc2019/261/?time=242) Dans cette partie de la vidéo, toutes les caractéristiques des images à importer sont passées en revue pour obtenir une excellente définition du rendu après grossissement comme détaillé dans la partie [guide pour les développeurs](./criteria-ios-dev.html#taille-des-l-ments-graphiques). &lt;/br&gt;&lt;/br&gt;L'interface graphique de Xcode peut être utilisée conjointement à du code pour obtenir le résultat escompté : &lt;/br&gt;&lt;img style=\&quot;max-width: 900px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-261-ImageSettings.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;CustomViews\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-19261.html#custom-views-0452httpsdeveloperapplecomvideosplaywwdc2019261time292"] = "[Custom Views (04:52)](https://developer.apple.com/videos/play/wwdc2019/261/?time=292)";
index.add({
    url: "criteria-ios-wwdc-19261.html#custom-views-0452httpsdeveloperapplecomvideosplaywwdc2019261time292",
    title: "[Custom Views (04:52)](https://developer.apple.com/videos/play/wwdc2019/261/?time=292)",    
    body: "## [Custom Views (04:52)](https://developer.apple.com/videos/play/wwdc2019/261/?time=292) En implémentant le &lt;span lang=\&quot;en\&quot;&gt;Dynamic&amp;nbsp;Type&lt;/span&gt;, **iOS&amp;nbsp;13** rend possible un **même rendu graphique** pour un élément standard UIKit d'une barre *(navigation, onglets...)* et pour une UIView en suivant les étapes ci-dessous : &lt;/br&gt;&lt;img style=\&quot;max-width: 650px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-261-CustomViews_1.png\&quot; /&gt; &lt;/br&gt;Le **protocole `UILargeContentViewerItem`** (&lt;a alt=\&quot;Lien vers l'extrait vidéo au temps indiqué.\&quot; href=\&quot;https://developer.apple.com/videos/play/wwdc2019/261/?time=335\&quot;&gt;05:35&lt;/a&gt;) définit toutes les informations nécessaires au &lt;span lang=\&quot;en\&quot;&gt;Large&amp;nbsp;Content&amp;nbsp;Viewer&lt;/span&gt; ⟹ la classe **UIView se conforme à ce protocole** par défaut : &lt;/br&gt;&lt;img style=\&quot;max-width: 650px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-261-CustomViews_2.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;L'ajout d'une interaction tactile (&lt;a alt=\&quot;Lien vers l'extrait vidéo au temps indiqué.\&quot; href=\&quot;https://developer.apple.com/videos/play/wwdc2019/261/?time=412\&quot;&gt;06:52&lt;/a&gt;) est aussi nécessaire pour finaliser l'implémentation de cette fonctionnalité&amp;nbsp;: &lt;/br&gt;&lt;img style=\&quot;max-width: 850px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-261-CustomViews_3.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;Quelques propriétés liées à cette interaction tactile (&lt;a alt=\&quot;Lien vers l'extrait vidéo au temps indiqué.\&quot; href=\&quot;https://developer.apple.com/videos/play/wwdc2019/261/?time=431\&quot;&gt;07:11&lt;/a&gt;) permettent d'obtenir et/ou de définir certains types de détails : &lt;/br&gt;&lt;img style=\&quot;max-width: 750px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-261-CustomViews_4.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;Pour finir, le `delegate` de cette interaction tactile contient un ensemble d'options (&lt;a alt=\&quot;Lien vers l'extrait vidéo au temps indiqué.\&quot; href=\&quot;https://developer.apple.com/videos/play/wwdc2019/261/?time=472\&quot;&gt;07:52&lt;/a&gt;) qui permettent de réaliser certaines actions : &lt;/br&gt;&lt;img style=\&quot;max-width: 850px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-261-CustomViews_5.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;Examples\&quot;&gt;&lt;/a&gt; "
});

documentTitles["criteria-ios-wwdc-19261.html#exemples-0915httpsdeveloperapplecomvideosplaywwdc2019261time555"] = "[Exemples (09:15)](https://developer.apple.com/videos/play/wwdc2019/261/?time=555)";
index.add({
    url: "criteria-ios-wwdc-19261.html#exemples-0915httpsdeveloperapplecomvideosplaywwdc2019261time555",
    title: "[Exemples (09:15)](https://developer.apple.com/videos/play/wwdc2019/261/?time=555)",    
    body: "## [Exemples (09:15)](https://developer.apple.com/videos/play/wwdc2019/261/?time=555) Le premier exemple concerne les **éléments UIKit standards** : &lt;/br&gt;&lt;img style=\&quot;max-width: 600px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-261-Examples_1.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;Le second exemple traite de **classes personnalisées pour des boutons** (&lt;a alt=\&quot;Lien vers l'extrait vidéo au temps indiqué.\&quot; href=\&quot;https://developer.apple.com/videos/play/wwdc2019/261/?time=593\&quot;&gt;09:53&lt;/a&gt;) dont certaines propriétés doivent être redéfinies pour une parfaite implémentation du &lt;span lang=\&quot;en\&quot;&gt;Large&amp;nbsp;Content&amp;nbsp;Viewer&lt;/span&gt; : &lt;/br&gt;&lt;img style=\&quot;max-width: 600px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iOSdev/wwdc19-261-Examples_2.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt;Enfin, le dernier exemple détaille les modifications à apporter à un **bouton ayant déjà une action prévue suite à un appui long** (&lt;a alt=\&quot;Lien vers l'extrait vidéo au temps indiqué.\&quot; href=\&quot;https://developer.apple.com/videos/play/wwdc2019/261/?time=636\&quot;&gt;10:36&lt;/a&gt;) pour ne pas avoir de conflit avec le &lt;span lang=\&quot;en\&quot;&gt;Large&amp;nbsp;Content&amp;nbsp;Viewer&lt;/span&gt;. &lt;/br&gt;&lt;/br&gt;&lt;/br&gt; &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["index.html#recommandations-accessibilite-orange-pour-les-mobiles"] = "Recommandations accessibilité Orange pour les mobiles";
index.add({
    url: "index.html#recommandations-accessibilite-orange-pour-les-mobiles",
    title: "Recommandations accessibilité Orange pour les mobiles",    
    body: "# Recommandations accessibilité Orange pour les mobiles  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;Présentation\&quot;}]); });&lt;/script&gt;  ***L’accessibilité, une nécessité pour certains, un avantage pour tous&amp;nbsp;!***  "
});

documentTitles["index.html#definition-de-laccessibilite-mobile"] = "Définition de l’accessibilité mobile";
index.add({
    url: "index.html#definition-de-laccessibilite-mobile",
    title: "Définition de l’accessibilité mobile",    
    body: "## Définition de l’accessibilité mobile **C’est une application utilisable par tous**  - personnes valides. - seniors. - personnes en situation de handicap *(temporaire ou permanent)*.  **et dans tous les contextes**  - avec tous types de matériel&amp;nbsp;: navigateurs mobiles, Android, iOS, tablette. - dans un contexte dégradé&amp;nbsp;: mauvaise luminosité, etc... - avec des logiciels spécifiques de compensation du handicap.  "
});

documentTitles["index.html#organisation-de-ce-site"] = "Organisation de ce site";
index.add({
    url: "index.html#organisation-de-ce-site",
    title: "Organisation de ce site",    
    body: "## Organisation de ce site "
});

documentTitles["index.html#android"] = "Android";
index.add({
    url: "index.html#android",
    title: "Android",    
    body: "### Android "
});

documentTitles["index.html#1-criteres-de-conception"] = "1. Critères de conception";
index.add({
    url: "index.html#1-criteres-de-conception",
    title: "1. Critères de conception",    
    body: "#### 1. Critères de conception Liste des différents critères à respecter pour obtenir une application mobile accessible.   Un bon moyen de prendre connaissance des éléments importants à respecter pour s’engager vers une démarche de mise en accessibilité.   &amp;nbsp;    "
});

documentTitles["index.html#2-guide-pour-les-developpeurs"] = "2. Guide pour les développeurs";
index.add({
    url: "index.html#2-guide-pour-les-developpeurs",
    title: "2. Guide pour les développeurs",    
    body: "#### 2. Guide pour les développeurs Section à destination des développeurs.   Tout ce qu’il faut savoir pour coder accessible sur mobile.   &amp;nbsp;    "
});

documentTitles["index.html#3-talkback"] = "3. Talkback";
index.add({
    url: "index.html#3-talkback",
    title: "3. Talkback",    
    body: "#### 3. Talkback Guide simple pour utiliser le lecteur d’écran natif qui détaille toutes les gestuelles nécessaires pour maîtriser Talkback, outil incontournable dans une démarche d'accessibilité mobile.   &amp;nbsp;    "
});

documentTitles["index.html#4-tests"] = "4. Tests";
index.add({
    url: "index.html#4-tests",
    title: "4. Tests",    
    body: "#### 4. Tests Comprend de façon synthétique les tests à mettre en oeuvre pour s'assurer que les recommandations android sont bien prises en compte avant mise en production de l'application.  &amp;nbsp;    "
});

documentTitles["index.html#ios"] = "iOS";
index.add({
    url: "index.html#ios",
    title: "iOS",    
    body: "### iOS "
});

documentTitles["index.html#1-criteres-de-conception"] = "1. Critères de conception";
index.add({
    url: "index.html#1-criteres-de-conception",
    title: "1. Critères de conception",    
    body: "#### 1. Critères de conception Liste des différents critères à respecter pour obtenir une application mobile accessible. &lt;/br&gt;Un bon moyen de prendre connaissance des éléments importants à respecter pour s’engager vers une démarche de mise en accessibilité.  &lt;/br&gt;&lt;/br&gt; "
});

documentTitles["index.html#2-guide-pour-les-developpeurs"] = "2. Guide pour les développeurs";
index.add({
    url: "index.html#2-guide-pour-les-developpeurs",
    title: "2. Guide pour les développeurs",    
    body: "#### 2. Guide pour les développeurs Section à destination des développeurs. &lt;/br&gt;Tout ce qu’il faut savoir pour coder accessible sur mobile. &lt;/br&gt;&lt;/br&gt; "
});

documentTitles["index.html#3-voiceover"] = "3. VoiceOver";
index.add({
    url: "index.html#3-voiceover",
    title: "3. VoiceOver",    
    body: "#### 3. VoiceOver Guide simple pour utiliser le lecteur d’écran natif qui détaille toutes les gestuelles nécessaires pour maîtriser VoiceOver, outil incontournable dans une démarche d'accessibilité mobile. &lt;/br&gt;&lt;/br&gt; "
});

documentTitles["index.html#4-wwdc"] = "4. WWDC";
index.add({
    url: "index.html#4-wwdc",
    title: "4. WWDC",    
    body: "#### 4. WWDC Section qui détaille des présentations Apple faites au `World Wide Developers Conference` ayant un impact fort dans la démarche d'accessibilité mobile. &lt;/br&gt;&lt;/br&gt; "
});

documentTitles["index.html#5-tests"] = "5. Tests";
index.add({
    url: "index.html#5-tests",
    title: "5. Tests",    
    body: "#### 5. Tests Comprend de façon synthétique les tests à mettre en oeuvre pour s'assurer que les recommandations iOS sont bien prises en compte avant mise en production de l'application. &lt;/br&gt;&lt;/br&gt; "
});

documentTitles["index.html#demonstrateur-mdan"] = "Démonstrateur mDAN";
index.add({
    url: "index.html#demonstrateur-mdan",
    title: "Démonstrateur mDAN",    
    body: "### Démonstrateur mDAN Présentation de l’application mDAN, le démonstrateur d’accessibilité numérique pour mobile. &lt;/br&gt;&lt;/br&gt; "
});

documentTitles["index.html#liens-utiles"] = "Liens utiles";
index.add({
    url: "index.html#liens-utiles",
    title: "Liens utiles",    
    body: "### Liens utiles Quelques liens utiles qui pourront compléter les explications de ce site.  &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["lecteur-ecran-voiceover.html#guide-dutilisation-de-span-langenvoiceoverspan"] = "Guide d’utilisation de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;";
index.add({
    url: "lecteur-ecran-voiceover.html#guide-dutilisation-de-span-langenvoiceoverspan",
    title: "Guide d’utilisation de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;",    
    body: "# Guide d’utilisation de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;iOS\&quot;, \&quot;url\&quot;: \&quot;./criteria-ios.html\&quot;},         {\&quot;label\&quot;:\&quot;VoiceOver\&quot;} 	]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Critères de conception\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-conception.html\&quot;},          {\&quot;label\&quot;:\&quot;Guide pour les développeurs\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-dev.html\&quot;},         {\&quot;label\&quot;:\&quot;VoiceOver\&quot;,\&quot;url\&quot;:\&quot;lecteur-ecran-voiceover.html\&quot;, \&quot;expanded\&quot;: true},         {\&quot;label\&quot;:\&quot;WWDC\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-wwdc.html\&quot;},         {\&quot;label\&quot;:\&quot;Tests\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-test.html\&quot;}     ]);	 });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-ios\&quot;&gt;&lt;/span&gt;  &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; est le lecteur d’écran natif iOS qui décrit à haute voix les éléments qui apparaissent sur l’écran de votre terminal. &lt;/br&gt;Il permet à un utilisateur malvoyant ou nonvoyant, dyslexique ou illettré de pouvoir vocaliser tous les éléments visibles contenus dans la page.  L'activation de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; se fait via le menu `Réglages` du téléphone :  &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#VoiceOverActivation-iOS13\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;iOS 13&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#VoiceOverActivation-iOS12\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;iOS 12&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;VoiceOverActivation-iOS13\&quot;      role=\&quot;tabpanel\&quot;&gt; &lt;img alt=\&quot;\&quot; style=\&quot;max-width: 1100px; height: auto; \&quot; src=\&quot;./images/iphonex_VoiceOverActivation_iOS13.png\&quot; /&gt; &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot;       id=\&quot;VoiceOverActivation-iOS12\&quot;       role=\&quot;tabpanel\&quot; &gt; &lt;img style=\&quot;max-width: 1100px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_VoiceOverActivation_iOS12.png\&quot;/&gt; &lt;/div&gt;&lt;/div&gt;  &lt;/br&gt;Lorsque l'activation est effective, les gestes standards effectués sur l’écran tactile donnent des résultats différents. &lt;/br&gt;Cependant, des gestes supplémentaires permettent de se déplacer à l’écran et de contrôler des éléments sélectionnés.  Il est préférable mais non obligatoire d'**activer la vibration** pour percevoir le point de déclenchement de certaines fonctionnalités.  &lt;ul class=\&quot;nav nav-tabs\&quot; role=\&quot;tablist\&quot;&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link active\&quot;            data-toggle=\&quot;tab\&quot;             href=\&quot;#iPhoneVibration-iOS13\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;true\&quot;&gt;iOS 13&lt;/a&gt;     &lt;/li&gt;     &lt;li class=\&quot;nav-item\&quot;&gt;         &lt;a class=\&quot;nav-link\&quot;             data-toggle=\&quot;tab\&quot;             href=\&quot;#iPhoneVibration-iOS12\&quot;            role=\&quot;tab\&quot;             aria-selected=\&quot;false\&quot;&gt;iOS 12&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt;&lt;div class=\&quot;tab-content\&quot;&gt; &lt;div class=\&quot;tab-pane show active\&quot;      id=\&quot;iPhoneVibration-iOS13\&quot;      role=\&quot;tabpanel\&quot;&gt; &lt;img style=\&quot;max-width: 500px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_vo_fr_vibration_iOS13.png\&quot;/&gt; &lt;/div&gt; &lt;div class=\&quot;tab-pane\&quot;       id=\&quot;iPhoneVibration-iOS12\&quot;       role=\&quot;tabpanel\&quot; &gt; &lt;img style=\&quot;max-width: 500px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_vo_fr_vibration_iOS12.png\&quot;/&gt; &lt;/div&gt;&lt;/div&gt;  &lt;/br&gt;Si cette fonction est désactivée, il est toutefois possible d'entendre un bip signalant le déclenchement qui risque néanmoins d'être parasité par la vocalisation.  Deux mouvements principaux sont importants à maîtriser pour appliquer sans problème les détails fournis par la suite : &lt;/br&gt;&lt;img style=\&quot;max-width: 100px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_1finger_flick_up.png\&quot; /&gt; Le **balayage** qui consiste à décoller le doigt de l'écran à l'issue du mouvement tout en le poursuivant. &lt;/br&gt;&lt;img style=\&quot;max-width: 100px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_1finger_swipe_up.png\&quot; /&gt; Le **glissement** qui consiste à réaliser le mouvement défini en gardant continuellement le contact entre le doigt et l'écran.  Dans une première partie, nous décrirons les gestes de base liés à une utilisation courante de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; pour ensuite traiter le cas spécifique de l'iPhone X et finir avec des manipulations peu courantes mais néanmoins très utiles pour l'utilisateur avancé.  "
});

documentTitles["lecteur-ecran-voiceover.html#gestes-de-bases"] = "Gestes de bases";
index.add({
    url: "lecteur-ecran-voiceover.html#gestes-de-bases",
    title: "Gestes de bases",    
    body: "## Gestes de bases &lt;ul class=\&quot;list-gesture\&quot;&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;       &lt;img src=\&quot;./images/gesture1.png\&quot; alt=\&quot;\&quot; width=\&quot;200\&quot;&gt;           &lt;h3&gt;Se déplacer avec un doigt sur l’écran&lt;/h3&gt;       &lt;p&gt;Explorer l’écran et entendre la vocalisation de l’élément qui est touché.&lt;/p&gt;   &lt;/li&gt;&lt;/br&gt;&lt;/br&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;       &lt;img src=\&quot;./images/gesture2.png\&quot; alt=\&quot;\&quot; width=\&quot;150\&quot;&gt;           &lt;h3&gt;Double-cliquer n’importe où sur l’écran&lt;/h3&gt;       &lt;p&gt;Ouvrir ou activer l’élément qui a été touché (vocalisé) en dernier.&lt;/p&gt;   &lt;/li&gt;&lt;/br&gt;&lt;/br&gt;     &lt;li class=\&quot;clearfix\&quot;&gt;       &lt;img src=\&quot;./images/gesture9_1.png\&quot; alt=\&quot;\&quot; width=\&quot;170\&quot;&gt;       &lt;img src=\&quot;./images/gesture9_2.png\&quot; alt=\&quot;\&quot; width=\&quot;170\&quot;&gt;         &lt;h3&gt;Balayer vers le haut ou le bas en utilisant trois doigts&lt;/h3&gt;       &lt;p&gt;Se déplacer verticalement sur une liste ou sur une page à condition qu’elle soit sélectionnée. Correspond à un balayage vertical.&lt;/p&gt;&lt;/br&gt;&lt;/br&gt;   &lt;/li&gt;&lt;/br&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;       &lt;img src=\&quot;./images/gesture10_1.png\&quot; alt=\&quot;\&quot; width=\&quot;200\&quot;&gt;       &lt;img src=\&quot;./images/gesture10_2.png\&quot; alt=\&quot;\&quot; width=\&quot;220\&quot;&gt;         &lt;h3&gt;Balayer vers la gauche ou la droite en utilisant trois doigts&lt;/h3&gt;       &lt;p&gt;Changer de page ou d’écran quand c’est possible. Correspond à un balayage horizontal.&lt;/p&gt;   &lt;/li&gt;&lt;/br&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;           &lt;img src=\&quot;./images/gesture5.png\&quot; alt=\&quot;\&quot; width=\&quot;200\&quot;&gt;       &lt;img src=\&quot;./images/gesture6.png\&quot; alt=\&quot;\&quot; width=\&quot;210\&quot;&gt;       &lt;h3&gt;Balayer vers la gauche (resp. droite) en utilisant un doigt&lt;/h3&gt;       &lt;p&gt;Déplacer le focus &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; sur le prochain (resp. précédent) élément.&lt;/p&gt;   &lt;/li&gt;&lt;/br&gt;   &lt;li class=\&quot;clearfix\&quot;&gt;          &lt;img src=\&quot;./images/gesture7.png\&quot; alt=\&quot;\&quot; width=\&quot;200\&quot;&gt;           &lt;img src=\&quot;./images/gesture8.png\&quot; alt=\&quot;\&quot; width=\&quot;220\&quot;&gt;        &lt;h3&gt;Balayer vers le haut (resp. bas) en utilisant un doigt&lt;/h3&gt;       &lt;p&gt;Permet d’augmenter (resp. diminuer) la valeur d’un élément ajustable.&lt;/p&gt;   &lt;/li&gt; &lt;/ul&gt; "
});

documentTitles["lecteur-ecran-voiceover.html#iphonex"] = "iPhoneX";
index.add({
    url: "lecteur-ecran-voiceover.html#iphonex",
    title: "iPhoneX",    
    body: "## iPhoneX L'arrivée sur le marché de ce terminal sous iOS11 avec l'absence de bouton principal a quelque peu bouleversé la gestuelle classique dont on avait l'habitude. &lt;/br&gt;Ces [nouveaux gestes de base](./lecteur-ecran-voiceover-iphonex.html) ont donc fortement impacté les manipulations &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt; dont les principales sont fournies ci-dessous. - [Revenir à l'écran d'accueil.](#BackHome) - [Accéder au multitâche.](#Multitask) - [Accéder au centre de contrôle.](#ControlCenter) - [Accéder au centre de notifications.](#NotificationCenter)  &lt;a name=\&quot;BackHome\&quot;&gt;&lt;/a&gt; &lt;/br&gt;Mouvement : **balayage** à partir du bas de l'écran avec **un doigt** jusqu'à sentir l'émission d'une **simple vibration** (environ au **premier quart inférieur de l'écran**). &lt;/br&gt;&lt;img style=\&quot;max-width: 470px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_vo_fr_back_home.png\&quot; /&gt;  &lt;a name=\&quot;Multitask\&quot;&gt;&lt;/a&gt; &lt;/br&gt;&lt;/br&gt;Mouvement : **balayage** à partir du bas de l'écran avec **un doigt** jusqu'à sentir une **double vibration** (environ à la **moitié de l'écran**). &lt;/br&gt;&lt;img style=\&quot;max-width: 450px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_vo_fr_multitask.png\&quot; /&gt;  &lt;a name=\&quot;ControlCenter\&quot;&gt;&lt;/a&gt; &lt;/br&gt;Mouvement: **balayage avec 1 doigt** à partir du haut de l'écran jusqu'à sentir l'émission d'une **simple vibration** (environ au **premier quart supérieur de l'écran**). &lt;/br&gt;&lt;img style=\&quot;max-width: 520px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_vo_fr_control_center.png\&quot; /&gt;  &lt;a name=\&quot;NotificationCenter\&quot;&gt;&lt;/a&gt; &lt;/br&gt;Mouvement: **balayage avec 1 doigt** à partir du haut de l'écran jusqu'à sentir l'émission d'une **double vibration** (environ à la **moitié de l'écran**). &lt;/br&gt;&lt;img style=\&quot;max-width: 550px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_vo_fr_notification_center.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt; "
});

documentTitles["lecteur-ecran-voiceover.html#trucs-astuces"] = "Trucs &amp; Astuces";
index.add({
    url: "lecteur-ecran-voiceover.html#trucs-astuces",
    title: "Trucs &amp; Astuces",    
    body: "## Trucs &amp; Astuces Cette partie contient des manipulations qui ne sont pas forcément toutes très connues mais qui peuvent s'avérer très utiles sur **tout type de terminal** : - [Lire tous les éléments à partir du haut de la page.](#ReadAllElementsFromTop) - [Lire tous les éléments à partir de la sélection.](#ReadAllElementsFromSelection) - [Arrêter/redémarrer la lecture automatique des éléments.](#ToggleAutomaticReading) - [Localiser l'élément sélectionné.](#LocateSelectedElement) - [Arrêter/redémarrer l'énonciation VoiceOver.](#ToggleSpeech) - [Accéder au centre de contrôle.](#ControlCenterBis) - [Accéder au centre de notifications.](#NotificationCenterBis) - [Activer un élément sélectionné.](#ElementActivation) - [Revenir à la page précédente.](#Scrub) - [Trouver un élément avec le sélecteur d'éléments.](#ItemChooserList) - [Sélectionner le premier élément d'une page.](#PageFirstElement) - [Sélectionner le dernier élément d'une page.](#PageLastElement) - [Activer/désactiver l'écran \&quot;rideau\&quot;.](#CurtainScreen) - [Changer la vocalisation d'un élément.](#CustomLabel) - [Lancer une recherche.](#SpotlightSearch) - [Réaliser un appui long](#LongPressure) - [Ouvrir un lien dans une vue.](#OpenLink)  &lt;a name=\&quot;ReadAllElementsFromTop\&quot;&gt;&lt;/a&gt; &lt;/br&gt;Mouvement : **balayage avec 2 doigts** du bas vers le haut n'importe où sur l'écran. &lt;/br&gt;&lt;img style=\&quot;max-width: 500px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_vo_fr_all_from_top.png\&quot; /&gt;  &lt;a name=\&quot;ReadAllElementsFromSelection\&quot;&gt;&lt;/a&gt; &lt;/br&gt;Mouvement : **balayage avec 2 doigts** du haut vers le bas n'importe où sur l'écran. &lt;/br&gt;&lt;img style=\&quot;max-width: 500px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_vo_fr_all_from_selection.png\&quot; /&gt;  &lt;a name=\&quot;ToggleAutomaticReading\&quot;&gt;&lt;/a&gt; &lt;/br&gt;Mouvement : **simple tap avec 2 doigts** n'importe où sur l'écran. &lt;/br&gt;&lt;img style=\&quot;max-width: 550px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_vo_fr_stop_resume_ auto_vocal.png\&quot; /&gt;  &lt;a name=\&quot;LocateSelectedElement\&quot;&gt;&lt;/a&gt; &lt;/br&gt;Mouvement : **simple tap avec 3 doigts** n'importe où sur l'écran. &lt;/br&gt;&lt;img style=\&quot;max-width: 500px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_vo_fr_locate_select.png\&quot; /&gt;  &lt;a name=\&quot;ToggleSpeech\&quot;&gt;&lt;/a&gt; &lt;/br&gt;Mouvement : **double tap avec 3 doigts** n'importe où sur l'écran. &lt;/br&gt;Si la fonctionnalité `zoom` est activée dans les réglages, il faudra réaliser un **triple tap** pour obtenir le résultat souhaité. &lt;/br&gt;&lt;img style=\&quot;max-width: 550px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_vo_fr_stop_resume_speech.png\&quot; /&gt;  &lt;a name=\&quot;ControlCenterBis\&quot;&gt;&lt;/a&gt; &lt;/br&gt;Il faut au préalable **sélectionner un élément de la barre d'état** en haut de l'écran. &lt;/br&gt;Mouvement: **balayage avec 3 doigts** du bas vers le haut n'importe où sur l'écran. &lt;/br&gt;&lt;img style=\&quot;max-width: 550px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_vo_fr_control_center_bis.png\&quot; /&gt;  &lt;a name=\&quot;NotificationCenterBis\&quot;&gt;&lt;/a&gt; &lt;/br&gt;Il faut au préalable **sélectionner un élément de la barre d'état** en haut de l'écran. &lt;/br&gt;Mouvement: **balayage avec 3 doigts** du haut vers le bas n'importe où sur l'écran. &lt;/br&gt;&lt;img style=\&quot;max-width: 600px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_vo_fr_notification_center_bis.png\&quot; /&gt;  &lt;a name=\&quot;ElementActivation\&quot;&gt;&lt;/a&gt; &lt;/br&gt;Mouvement : **sélectionner** l'élément désiré **avec un doigt en maintenant la pression** puis effectuer un **simple tap avec un autre doigt** n'importe où sur l'écran. &lt;/br&gt;Cette gestuelle est très pratique pour taper au clavier en utilisant l'index pour sélectionner la lettre et le majeur pour réaliser le simple tap. &lt;/br&gt;&lt;img style=\&quot;max-width: 600px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_vo_fr_activate_elt_bis.png\&quot; /&gt;  &lt;a name=\&quot;Scrub\&quot;&gt;&lt;/a&gt; &lt;/br&gt;Mouvement : **glissement avec 2 doigts en dessinant un 'Z'** n'importe où sur l'écran. &lt;/br&gt;Cette manipulation aboutit exactement au même résultat que l'appui sur le bouton retour natif d'un écran. &lt;/br&gt;&lt;img style=\&quot;max-width: 600px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_vo_fr_scrub.png\&quot; /&gt;  &lt;a name=\&quot;ItemChooserList\&quot;&gt;&lt;/a&gt; &lt;/br&gt;Mouvement : **triple tap avec 2 doigts** n'importe où sur l'écran. &lt;/br&gt;&lt;img style=\&quot;max-width: 600px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_vo_fr_item_chooser_list.png\&quot; /&gt;  &lt;a name=\&quot;PageFirstElement\&quot;&gt;&lt;/a&gt; &lt;/br&gt;Mouvement : **simple tap avec 4 doigts** dans la moitié supérieure de l'écran. &lt;/br&gt;&lt;img style=\&quot;max-width: 550px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_vo_fr_first_elt.png\&quot; /&gt;  &lt;a name=\&quot;PageLastElement\&quot;&gt;&lt;/a&gt; &lt;/br&gt;Mouvement : **simple tap avec 4 doigts** dans la moitié inférieure de l'écran. &lt;/br&gt;&lt;img style=\&quot;max-width: 550px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_vo_fr_last_elt.png\&quot; /&gt;  &lt;a name=\&quot;CurtainScreen\&quot;&gt;&lt;/a&gt; &lt;/br&gt;Mouvement : **triple tap avec 3 doigts** n'importe où sur l'écran. &lt;/br&gt;Si la fonctionnalité `zoom` est activée dans les réglages, il faudra réaliser un **quadruple tap** pour obtenir le résultat souhaité. &lt;/br&gt;Cette fonctionnalité permet de continuer la navigation avec VoiceOver en ayant un écran éteint favorisant ainsi à la fois la confidentialité et la longévité de la batterie. &lt;/br&gt;&lt;img style=\&quot;max-width: 500px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_vo_fr_curtain_screen.png\&quot; /&gt;  &lt;a name=\&quot;CustomLabel\&quot;&gt;&lt;/a&gt; &lt;/br&gt;Mouvement : **double tap avec 2 doigts en maintenant la pression** n'importe où sur l'écran. &lt;/br&gt;&lt;img style=\&quot;max-width: 500px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_vo_fr_custom_label.png\&quot; /&gt;  &lt;a name=\&quot;SpotlightSearch\&quot;&gt;&lt;/a&gt; &lt;/br&gt;Mouvement : **balayage avec 3 doigts** vers le bas n'importe où sur l'écran. &lt;/br&gt;&lt;img style=\&quot;max-width: 550px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_fr_search.png\&quot; /&gt;  &lt;a name=\&quot;LongPressure\&quot;&gt;&lt;/a&gt; &lt;/br&gt;Mouvement : **double tap avec 1 doigt en maintenant la pression** *(iOS 12)* ou ** triple tap avec un doigt** *(iOS 13)* n'importe où sur l'écran. &lt;/br&gt;&lt;img style=\&quot;max-width: 550px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_fr_long_pressure.png\&quot; /&gt;  &lt;a name=\&quot;OpenLink\&quot;&gt;&lt;/a&gt; &lt;/br&gt;Mouvement : **double tap avec 1 doigt en maintenant la pression** n'importe où sur l'écran. &lt;/br&gt;Sélectionner l'option 'Liens' du rotor avant de balayer vers le haut pour atteindre le lien souhaité. &lt;/br&gt;Ensuite, effectuer un double tap avec 1 doigt en maintenant la pression **jusqu'à l'apparition d'une popup au-dessus du lien** qui affichera une fenêtre d'actions en bas d'écran. &lt;/br&gt;&lt;img style=\&quot;max-width: 1200px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_en_open_link.png\&quot; /&gt;  &amp;nbsp; &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["lecteur-ecran-voiceover-iphonex.html#rappels-sur-les-gestes-de-base-avec-un-iphone-x"] = "Rappels sur les gestes de base avec un iPhone X";
index.add({
    url: "lecteur-ecran-voiceover-iphonex.html#rappels-sur-les-gestes-de-base-avec-un-iphone-x",
    title: "Rappels sur les gestes de base avec un iPhone X",    
    body: "# Rappels sur les gestes de base avec un iPhone X  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;iOS\&quot;, \&quot;url\&quot;: \&quot;./criteria-ios.html\&quot;},                    {\&quot;label\&quot;:\&quot;Rappels sur les gestes de base avec un iPhone X\&quot;} 	]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Critères de conception\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-conception.html\&quot;},          {\&quot;label\&quot;:\&quot;Guide pour les développeurs\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-dev.html\&quot;},         {\&quot;label\&quot;:\&quot;VoiceOver\&quot;,\&quot;url\&quot;:\&quot;lecteur-ecran-voiceover.html\&quot;},         {\&quot;label\&quot;:\&quot;WWDC\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-wwdc.html\&quot;},         {\&quot;label\&quot;:\&quot;Tests\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-test.html\&quot;}     ]);	 });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-ios\&quot;&gt;&lt;/span&gt;  Cette page décrit de façon non exhaustive les gestes spécifiques de l'iPhone X à l'aide d'explications textuelles et de schémas permettant de visualiser plus facilement les manipulations à réaliser.  Par la suite, **la gestuelle graphique sur un terminal possédant un bouton principal est mise en parallèle** de façon à s'approprier plus facilement cette nouvelle logique de manipulation.  - [Revenir à l'écran d'accueil.](#BackHome) - [Déverrouiller l'écran.](#UnlockScreen) - [Allumer l'écran verrouillé.](#TurnOnLockedScreen) - [Accéder au centre de contrôle.](#ControlCenter) - [Accéder au multitâche.](#Multitask) - [Changer d'application ouverte.](#ChangeOpenedApp) - [Activer la fonctionnalité accès facile.](#Reachability) - [Poser une question à Siri.](#Siri) - [Accéder à Apple Pay.](#ApplePay) - [Prendre une capture d'écran.](#Screenshot) - [Éteindre le terminal.](#PowerOff)  &lt;a name=\&quot;BackHome\&quot;&gt;&lt;/a&gt; &lt;/br&gt;Mouvement : **balayage** vers le haut à partir du bas de l'écran avec **1 doigt**. &lt;/br&gt;&lt;img style=\&quot;max-width: 700px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_fr_back_home.png\&quot; /&gt; &lt;/br&gt;&lt;/br&gt; &lt;a name=\&quot;UnlockScreen\&quot;&gt;&lt;/a&gt; "
});

documentTitles["lecteur-ecran-voiceover-iphonex.html#deverrouiller-lecran"] = "Déverrouiller l'écran";
index.add({
    url: "lecteur-ecran-voiceover-iphonex.html#deverrouiller-lecran",
    title: "Déverrouiller l'écran",    
    body: "### Déverrouiller l'écran Mouvement : **balayage** vers le haut à partir du bas de l'écran avec **1 doigt** sur l'écran verrouillé. &lt;/br&gt;Résultat : déverrouillage automatique de l'écran avec la fonctionnalité &lt;span lang=\&quot;en\&quot;&gt;faceID&lt;/span&gt; activée. &lt;/br&gt;La manipulation est exactement la même que précédemment mais elle s'applique ici sur un écran verrouillé.  &lt;a name=\&quot;TurnOnLockedScreen\&quot;&gt;&lt;/a&gt; &lt;/br&gt;&lt;/br&gt;&lt;/br&gt;Mouvement : **simple tap** sur l'écran avec **1 doigt**. &lt;/br&gt;Résultat : l'écran verrouillé s'affiche immédiatement. &lt;/br&gt;&lt;img style=\&quot;max-width: 700px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_fr_turn_on_locked_screen.png\&quot; /&gt;  &lt;a name=\&quot;ControlCenter\&quot;&gt;&lt;/a&gt; &lt;/br&gt;Mouvement : **balayage** vers le bas à partir du coin à droite en haut de l'écran avec **1 doigt**. &lt;/br&gt;**Quel que soit le modèle de l'iPhone**, il est **obligatoire de sélectionner un élément de la barre d'état** avant de réaliser la gestuelle à 3 doigts. &lt;/br&gt;&lt;img style=\&quot;max-width: 700px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_fr_control_center.png\&quot; /&gt;  &lt;a name=\&quot;Multitask\&quot;&gt;&lt;/a&gt; &lt;/br&gt;&lt;/br&gt;Mouvement : **glissement avec 1 doigt** vers le haut à partir du bas de l'écran et maintenir la pression. &lt;/br&gt;Ce glissement peut aussi être effectué vers la droite de l'écran toujours à partir du bas de l'écran pour obtenir le même résultat. &lt;/br&gt;&lt;/br&gt;Résultat : apparition de toutes les applications actuellement ouvertes sur le terminal. &lt;/br&gt;&lt;img style=\&quot;max-width: 700px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_fr_multitask.png\&quot; /&gt;  &lt;a name=\&quot;ChangeOpenedApp\&quot;&gt;&lt;/a&gt; &lt;/br&gt;Mouvement : **glissement avec 1 doigt** vers la gauche ou la droite dans la limite la plus basse de l'écran correspondant à la barre d'accueil de l'application ouverte. &lt;/br&gt;&lt;img style=\&quot;max-width: 500px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_fr_change_opened_app.png\&quot; /&gt;  &lt;a name=\&quot;Reachability\&quot;&gt;&lt;/a&gt; &lt;/br&gt;Mouvement : **balayage avec 1 doigt** vers le bas sur la barre d'accueil. &lt;/br&gt;Le même mouvement vers le haut permet la désactivation. &lt;/br&gt;&lt;img style=\&quot;max-width: 700px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_fr_reachability.png\&quot; /&gt;  &lt;a name=\&quot;Siri\&quot;&gt;&lt;/a&gt; &lt;/br&gt;Mouvement : **maintenir la pression** sur le bouton latéral droit. &lt;/br&gt;Résultat : lancement de Siri après une à deux secondes. &lt;/br&gt;&lt;img style=\&quot;max-width: 700px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_fr_siri.png\&quot; /&gt;  &lt;a name=\&quot;ApplePay\&quot;&gt;&lt;/a&gt; &lt;/br&gt;Mouvement : effectuer une **double pression** sur le bouton latéral droit. &lt;/br&gt;Résultat : ouverture de l'Apple Pay avec authentification &lt;span lang=\&quot;en\&quot;&gt;faceID&lt;/span&gt;. &lt;/br&gt;&lt;img style=\&quot;max-width: 700px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_fr_apple_pay.png\&quot; /&gt;  &lt;a name=\&quot;Screenshot\&quot;&gt;&lt;/a&gt; &lt;/br&gt;Mouvement : effectuer une **pression rapide** sur le bouton latéral droit et sur le bouton d'augmentation de volume **de façon simultanée**. &lt;/br&gt;Résultat : capture d'écran enregistrée dans l'application `Photos` du terminal. &lt;/br&gt;&lt;img style=\&quot;max-width: 800px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_fr_screenshot.png\&quot; /&gt;  &lt;a name=\&quot;PowerOff\&quot;&gt;&lt;/a&gt; &lt;/br&gt;Mouvement : effectuer une **pression prolongée** sur le bouton latéral droit et sur le bouton d'augmentation de volume **de façon simultanée**. &lt;/br&gt;Résultat : mise à jour de l'écran avec proposition d'éteindre le terminal. &lt;/br&gt;&lt;img style=\&quot;max-width: 800px; height: auto;\&quot; alt=\&quot;\&quot; src=\&quot;./images/iphonex_fr_power_off.png\&quot; /&gt;  &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["mdan.html#demonstrateur-daccessibilite-sur-mobile-mdan"] = "Démonstrateur d’accessibilité sur mobile mDAN";
index.add({
    url: "mdan.html#demonstrateur-daccessibilite-sur-mobile-mdan",
    title: "Démonstrateur d’accessibilité sur mobile mDAN",    
    body: "# Démonstrateur d’accessibilité sur mobile mDAN     &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;Démonstrateur mDAN\&quot;}]); });&lt;/script&gt;  &lt;span data-menuitem=\&quot;mdan\&quot;&gt;&lt;/span&gt;  "
});

documentTitles["mdan.html#mdan-kesakonbsp"] = "mDAN, kesako&amp;nbsp;?";
index.add({
    url: "mdan.html#mdan-kesakonbsp",
    title: "mDAN, kesako&amp;nbsp;?",    
    body: "## mDAN, kesako&amp;nbsp;?  mDAN est une application mobile (Android et iOS) visant à présenter l’accessibilité d’un système mobile sous toutes ses formes. Ses objectifs sont&amp;nbsp;:  - présentation de l’accessibilité, - critères d’accessibilité mobile, - guide pour les développeurs, - guide d’utilisation du lecteur d’écran (&lt;span lang=\&quot;en\&quot;&gt;Talkback&lt;/span&gt; ou &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;), - présentation des options d’accessibilité par plate-forme, - contact, etc.  "
});

documentTitles["mdan.html#mdan-oui-mais-pour-quinbsp"] = "mDAN, oui, mais pour qui&amp;nbsp;?";
index.add({
    url: "mdan.html#mdan-oui-mais-pour-quinbsp",
    title: "mDAN, oui, mais pour qui&amp;nbsp;?",    
    body: "## mDAN, oui, mais pour qui&amp;nbsp;?  mDAN, de par son contenu riche, cible la plupart des corps de métier susceptibles d’être impactés par l’accessibilité&amp;nbsp;:   - testeurs&amp;nbsp;: avec les critères d’accessibilité et le guide d’utilisation du lecteur d’écran&amp;nbsp;; - développeurs&amp;nbsp;: avec le guide de développement&amp;nbsp;; - managers, designers, etc&amp;nbsp;: pour la sensibilisation à l’accessibilité.  Pour tout le monde en somme&amp;nbsp;!  "
});

documentTitles["mdan.html#je-veux-mdannbsp"] = "Je veux mDAN&amp;nbsp;!";
index.add({
    url: "mdan.html#je-veux-mdannbsp",
    title: "Je veux mDAN&amp;nbsp;!",    
    body: "## Je veux mDAN&amp;nbsp;! [Le code source est disponible sur github](https://github.com/Orange-OpenSource/m-dan)  Vous pouvez déjà [télécharger la version Android](/mDAN_v2.2.0.apk)  &amp;nbsp; &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["screen-reader.html#guide-dutilisation-des-lecteurs-decran-span-langentalkbackspan-et-span-langenvoiceoverspan"] = "Guide d’utilisation des lecteurs d’écran &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; et &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;";
index.add({
    url: "screen-reader.html#guide-dutilisation-des-lecteurs-decran-span-langentalkbackspan-et-span-langenvoiceoverspan",
    title: "Guide d’utilisation des lecteurs d’écran &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; et &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;",    
    body: "# Guide d’utilisation des lecteurs d’écran &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; et &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;iOS\&quot;, \&quot;url\&quot;: \&quot;./criteria-ios.html\&quot;},         {\&quot;label\&quot;:\&quot;VoiceOver\&quot;} 	]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Critères de conception\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-conception.html\&quot;},          {\&quot;label\&quot;:\&quot;Aide au développement\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-dev.html\&quot;},         {\&quot;label\&quot;:\&quot;VoiceOver\&quot;,\&quot;url\&quot;:\&quot;lecteur-ecran-voiceover.html\&quot;, \&quot;expanded\&quot;: true},         {\&quot;label\&quot;:\&quot;WWDC\&quot;,\&quot;url\&quot;:\&quot;criteria-ios-wwdc.html\&quot;},         {\&quot;label\&quot;:\&quot;Tests\&quot;,\&quot;url\&quot;:\&quot;testing-ios.html\&quot;}     ]); });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-ios\&quot;&gt;&lt;/span&gt;   À travers cette section, nous allons présenter les gestes de base pour une utilisation des lecteurs d’écran d’Android et iOS. Ces outils sont riches en fonctionnalités mais nécessitent une connaissance minimale pour être utilisés efficacement. C’est cette utilisation standard qui sera présentée ici.  Deux versions sont disponibles&amp;nbsp;: - **&lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;** le lecteur d’écran intégré à Android. - **&lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;**  le lecteur d’écran intégré à iOS.  &lt;div class=\&quot;mobileImg col-xs-12 col-md-6 col-lg-4\&quot;&gt;     &lt;h2 class=\&quot;sr-only\&quot;&gt;&lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;&lt;/h2&gt;               &lt;a href=\&quot;./screen-reader-talkback.html\&quot; class=\&quot;btn btn-info\&quot;&gt;         ![](./images/android.png)         &lt;div&gt;Guide d’utilisation de &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;&lt;/div&gt;     &lt;/a&gt; &lt;/div&gt; &lt;div class=\&quot;mobileImg col-xs-12 col-md-6 col-lg-4\&quot;&gt;     &lt;h2 class=\&quot;sr-only\&quot;&gt;Voiceover&lt;/h2&gt;               &lt;a href=\&quot;./lecteur-ecran-voiceover.html\&quot; class=\&quot;btn btn-info\&quot;&gt;         ![](./images/iphone.png)         &lt;div&gt;Guide d’utilisation de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;&lt;/div&gt;     &lt;/a&gt; &lt;/div&gt;              &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["screen-reader-talkback.html#guide-dutilisation-de-span-langentalkbackspan"] = "Guide d’utilisation de &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;";
index.add({
    url: "screen-reader-talkback.html#guide-dutilisation-de-span-langentalkbackspan",
    title: "Guide d’utilisation de &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;",    
    body: "# Guide d’utilisation de &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;Android\&quot;, \&quot;url\&quot;: \&quot;./criteria-android.html\&quot;},         {\&quot;label\&quot;:\&quot;TalkBack\&quot;} 	]);     addSubMenu([         {\&quot;label\&quot;:\&quot;Critères de conception\&quot;,\&quot;url\&quot;:\&quot;criteria-android-conception.html\&quot;},          {\&quot;label\&quot;:\&quot;Guide pour les développeurs\&quot;,\&quot;url\&quot;:\&quot;criteria-android-dev.html\&quot;},         {\&quot;label\&quot;:\&quot;TalkBack\&quot;,\&quot;url\&quot;:\&quot;screen-reader-talkback.html\&quot;}     ]);         });&lt;/script&gt;  &lt;span data-menuitem=\&quot;criteria-android\&quot;&gt;&lt;/span&gt;  &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; est un lecteur d’écran intégré à Android qui décrit à haute voix les éléments qui apparaissent sur l’écran du téléphone. Il est gratuit et permet à un utilisateur non- ou malvoyant, dyslexique ou illettré de pouvoir vocaliser tous les éléments visibles contenus dans la page. Un outil comme &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; est appelé indifféremment lecteur d’écran ou synthèse vocale, même si un lecteur d’écran est en fait un logiciel associé à une synthèse vocale.  Lorsque &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; est activé, les gestes standards effectués sur l’écran tactile donnent des résultats différents. En outre, des gestes supplémentaires permettent de déplacer le focus à l’écran et de contrôler les éléments sélectionnés. &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; comprend des gestes de toucher et de balayage à un, deux et trois doigts. Nous décrivons ici les gestes de base pour une utilisation courante de &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;. À noter&amp;nbsp;: &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; n’est considéré comme accessible qu’à partir de la version &lt;span lang=\&quot;en\&quot;&gt;JellyBean&lt;/span&gt; (4.1) car on peut naviguer séquentiellement.  Avant toute chose, commencez par mettre à jour &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;&amp;nbsp;: [page de l’application sur le &lt;span lang=\&quot;en\&quot;&gt;PlayStore&lt;/span&gt;](https://play.google.com/store/apps/details?id=com.google.android.marvin.talkback)  "
});

documentTitles["screen-reader-talkback.html#gestes-de-bases"] = "Gestes de bases";
index.add({
    url: "screen-reader-talkback.html#gestes-de-bases",
    title: "Gestes de bases",    
    body: "## Gestes de bases &lt;dl&gt;     &lt;dt&gt;Se déplacer avec un doigt sur l’écran&lt;/dt&gt;     &lt;dd&gt;       &lt;img src=\&quot;./images/gesture1.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;       Explorer l’écran et entendre la vocalisation de l’élément qui est touché.     &lt;/dd&gt;     &lt;dt&gt;Double-cliquer n’importe où sur l’écran&lt;/dt&gt;     &lt;dd&gt;       &lt;img src=\&quot;./images/gesture2.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;       Ouvrir ou activer l’élément qui a été touché (vocalisé) en dernier.     &lt;/dd&gt;       &lt;dt&gt;&lt;span lang=\&quot;en\&quot;&gt;Slide&lt;/span&gt; vers le haut ou le bas en utilisant deux doigts&lt;/dt&gt;     &lt;dd&gt;       &lt;img src=\&quot;./images/gesture3_1.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;&lt;img src=\&quot;./images/gesture3_2.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;Se déplacer verticalement sur une liste ou sur une page à condition qu’elle soit sélectionnée. Correspond à un &lt;span lang=\&quot;en\&quot;&gt;slide&lt;/span&gt; vertical.     &lt;/dd&gt;     &lt;dt&gt;&lt;span lang=\&quot;en\&quot;&gt;Slide&lt;/span&gt; vers la gauche ou la droite en utilisant deux doigts&lt;/dt&gt;     &lt;dd&gt;       &lt;img src=\&quot;./images/gesture4_1.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;       &lt;img src=\&quot;./images/gesture4_2.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;       Changer de page ou d’écran quand c’est possible. Correspond à un &lt;span lang=\&quot;en\&quot;&gt;slide&lt;/span&gt; horizontal.     &lt;/dd&gt;     &lt;dt&gt;&lt;span lang=\&quot;en\&quot;&gt;Slide&lt;/span&gt; vers la droite en utilisant un doigt&lt;/dt&gt;     &lt;dd&gt;       &lt;img src=\&quot;./images/gesture5.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;       Déplacer le focus &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; sur l’élément suivant.     &lt;/dd&gt;     &lt;dt&gt;&lt;span lang=\&quot;en\&quot;&gt;Slide&lt;/span&gt; vers la gauche en utilisant un doigt&lt;/dt&gt;     &lt;dd&gt;       &lt;img src=\&quot;./images/gesture6.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;       Déplacer le focus &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; sur l’élément précédent.     &lt;/dd&gt;     &lt;dt&gt;&lt;span lang=\&quot;en\&quot;&gt;Slide&lt;/span&gt; vers le haut en utilisant un doigt&lt;/dt&gt;     &lt;dd&gt;       &lt;img src=\&quot;./images/gesture7.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;       Changer de mode de lecture&amp;nbsp;: « par défaut (éléments) », « caractères », « mots », « lignes », « paragraphes », « en-têtes », « liens » et « commandes ».     &lt;/dd&gt;       &lt;dt&gt;&lt;span lang=\&quot;en\&quot;&gt;Slide&lt;/span&gt; vers le bas en utilisant un doigt&lt;/dt&gt;     &lt;dd&gt;       &lt;img src=\&quot;./images/gesture8.png\&quot; alt=\&quot;\&quot; width=\&quot;80\&quot;&gt;       Changer de mode de lecture comme le geste précédent mais dans le sens inverse&amp;nbsp;: « par défaut (éléments) », « commandes », « liens », « en-têtes », « paragraphes », « lignes », « mots » et « caractères ».     &lt;/dd&gt; &lt;/dl&gt;  &lt;span class=\&quot;licence\&quot; lang=\&quot;en\&quot;&gt;These images are licensed under a Creative Commons Share Alike 2.0 license. Photo credit: &lt;a href=\&quot;http://www.flickr.com/people/27512715@N02/\&quot; hreflang=\&quot;en\&quot;&gt;openexhibits&lt;/a&gt;&lt;/span&gt;  Pour plus d’information sur &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt; et une description détaillée de ses fonctionnalités, nous vous invitons à lire la [documentation officielle de Google sur &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;](https://support.google.com/accessibility/android/answer/6283677?hl=fr&amp;ref_topic=3529932).    &amp;nbsp; &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});



documentTitles["links.html#liens-utiles"] = "Liens utiles";
index.add({
    url: "links.html#liens-utiles",
    title: "Liens utiles",    
    body: "# Liens utiles  &lt;script&gt;$(document).ready(function () {     setBreadcrumb([{\&quot;label\&quot;:\&quot;Liens utiles\&quot;}]); });&lt;/script&gt;  &lt;span data-menuitem=\&quot;links\&quot;&gt;&lt;/span&gt;  "
});

documentTitles["links.html#en-complement"] = "En complément";
index.add({
    url: "links.html#en-complement",
    title: "En complément",    
    body: "## En complément Vous trouverez de l’information sur le développement accessible pour iOS et Android sur [le dépôt github de la DISIC](https://github.com/DISIC/guide-mobile_app_dev_natif) (Direction Interministérielle des Systèmes d’Information et de Communication)&amp;nbsp;: - [Guide d’audit d’applications mobiles](https://github.com/DISIC/guide-mobile_app_audit) - [Guide de conception d’applications mobiles accessibles](https://github.com/DISIC/guide-mobile_app_conception) - [Guide de développement d’applications mobiles hybrides accessibles avec Ionic et OnsenUI](https://github.com/DISIC/guide-mobile_app_dev_hybride)  "
});

documentTitles["links.html#pour-android"] = "Pour Android";
index.add({
    url: "links.html#pour-android",
    title: "Pour Android",    
    body: "## Pour Android Présentation de l’accessibilité sous Android et de l’&lt;abbr&gt;API&lt;/abbr&gt; Google   - [Documentation officielle de Google](https://developer.android.com/guide/topics/ui/accessibility/index.html)   - [Guide complet de &lt;span lang=\&quot;en\&quot;&gt;TalkBack&lt;/span&gt;](https://support.google.com/accessibility/android/answer/6283677?hl=fr&amp;ref_topic=3529932)  Application &lt;span lang=\&quot;en\&quot;&gt;AccessibilityScanner&lt;/span&gt; pour vous aider à tester une partie de l’accessibilité de vos applications rapidement et simplement - [Application &lt;span lang=\&quot;en\&quot;&gt;AccessibilityScanner&lt;/span&gt;](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor&amp;hl=fr)  "
});

documentTitles["links.html#pour-ios"] = "Pour iOS";
index.add({
    url: "links.html#pour-ios",
    title: "Pour iOS",    
    body: "## Pour iOS Présentation de l’accessibilité sous iOS et de l’&lt;abbr&gt;API&lt;/abbr&gt; Apple - [Documentation officielle de l’&lt;abbr&gt;API&lt;/abbr&gt; d’accessibilité Apple](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/iPhoneAccessibility/Introduction/Introduction.html) - [Présentation des options d’accessibilité d’iOS](http://www.apple.com/fr/accessibility/) - [Page officielle de l’accessibilité sous Apple](https://developer.apple.com/accessibility/ios/) - [Utilisation de &lt;span lang=\&quot;en\&quot;&gt;VoiceOver&lt;/span&gt;](https://help.apple.com/iphone/9/#/iph3e2e415f)   &lt;!--  This file is part of a11y-guidelines | Our vision of mobile &amp; web accessibility guidelines and best practices, with valid/invalid examples.  Copyright (C) 2016  Orange SA  See the Creative Commons Legal Code Attribution-ShareAlike 3.0 Unported License for more details (LICENSE file). --&gt;"
});


