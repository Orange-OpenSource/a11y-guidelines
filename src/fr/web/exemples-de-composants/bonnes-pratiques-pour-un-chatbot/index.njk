---
title: "Bonnes pratiques pour un chatbot"
css:
  - style.css
js:
  - script.js
---

  <h1>Créer un <span lang="en">chatbot</span> accessible</h1>

  <h2>Avant-propos</h2>
  <p>Dans cet article, les termes <span lang="en">chatbot, tchat et chat</span> se réfèrent à une fenêtre de dialogue qui permet d'engager une conversation écrite avec un opérateur ou une intelligence artificielle, parfois également appelée agent conversationnel.</p>

  <h2>1. Les recommandations de la marque</h2>

  <p>Cet article détaille un certain nombre de points techniques sur lesquels il faut être vigilant. Si l'objectif est de développer un chatbot pour un site Orange, il convient dans un premier temps de consulter les recommandations de la marque à ce sujet disponibles sur le site : <a href="https://design.orange.com/guidelines">design.orange.com</a> <span lang="en">(Conversational UI guideline)</span>.</p>

  <h2>2. Accéder au chatbot</h2>
  <p>
    Avant d'utiliser un chatbot, bien souvent il est nécessaire de faire apparaître celui-ci en cliquant sur un bouton situé dans un coin de la page. L'utilisateur doit être en mesure de découvrir par lui-même qu'il a la possibilité d'utiliser un chatbot sur la page qu'il consulte. C'est pourquoi il est important d'utiliser un bouton dont le libellé est suffisamment explicite. Celui-ci peut dépendre du contexte mais par exemple sur un site marchand un bouton intitulé : «&nbsp;Nous contacter&nbsp;», «&nbsp;Un problème avec votre commande ?&nbsp;» sont des propositions valides.
  </p>

  <h3>Navigation au clavier</h3>
  <p>Il est suffisant de mettre un bouton dans un coin de la page à condition que celui-ci soit accessible, notamment, à l'aide du clavier. Pour cela, il faut utiliser un vrai bouton (balise <code>&lt;button&gt;</code>) au niveau du code, comme c'est le cas sur cette page (bouton contact situé en bas à droite de la page).
  </p>
  <strong>Exemple :</strong>
  <p>
    Les deux boutons ci-dessous semblent identiques si on les utilise avec la souris. En revanche, si on essaie de les utiliser en navigant à l'aide de la touche <kbd>Tab</kbd>, le second bouton (réalisé à l'aide d'une balise <code>&lt;span&gt;</code>) n'est pas focusable. Dans ce dernier cas, un utilisateur qui navigue à l'aide du clavier ne pourra tout simplement pas ouvrir le chatbot.
  </p>
  <p>
    Testez-les, à l'aide de la souris et à l'aide du clavier :
  </p>
  <p>
      <ul class="btn-list">
        <li><button id="btnExemple1" class="btnChatbot">Contact</button> : bouton focusable (balise <code>&lt;button&gt;</code>).</li>
        <li><span id="btnExemple2" class="btnChatbot ko">Contact</span> : bouton non focusable (balise <code>&lt;span&gt;</code>).</li>
      </ul>
  </p>

  <h3>Navigation avec une loupe d'écran</h3>
  <p>
    Pour les utilisateurs de loupe d'écran, il est conseillé de ne pas coller le bouton de contact sur le bord de la fenêtre. Les défilements de l'écran occasionnés par l'usage de la loupe rendent les déplacements du pointeur de la souris parfois moins précis. Si l'utilisateur ne vise pas précisément le bouton de contact, des info-bulles provenant d'éléments affichés en-dehors de la fenêtre peuvent venir masquer le bouton. Dans ce cas l'utilisateur risque de ne pas s'apercevoir qu'un chat est disponible.
  </p>
  <p>Dans la capture d'écran ci-dessous prise sous Windows, le bouton est masqué par une info-bulle provenant d'un élément présent dans la barre Windows :
  </p>
  <p><img class="screenshot" src="images/zoom.png" alt="capture d'écran du bouton de contact en partie masqué par une info-bulles">
</p>
  <p>
    Même exemple mais cette fois avec une petite marge entre le bouton et le bord de la fenêtre :
  </p>
  <p><img class="screenshot" src="images/zoom-ok.png" alt="capture d'écran du bouton de contact visible malgré la présence d'une info-bulle">
  </p>
  <h3>Navigation au lecteur d'écran</h3>
  <p>La présence d'un bouton pour accéder au chatbot, en bas à droite, suffira à faire comprendre à certains utilisateurs qu'un chatbot est disponible sur la page. Cela dit, pour les utilisateurs aveugles ou malvoyants qui naviguent avec un lecteur d'écran, cela risque de poser des difficultés. En effet, pour entendre ce bouton, placé bien souvent à la fin du code, il faudrait que l'utilisateur écoute la page en entier jusqu'à la dernière ligne. Donc, il devrait écouter la totalité du pied de pages qui contient souvent de nombreux liens. En pratique, on se doute que ce n'est pas ce que font les utilisateurs.
  </p>
  <p>
    Dans ce cas de figure, un utilisateur malvoyant n'aura donc tout simplement pas connaissance de ce bouton, il ne pourra donc pas accéder au chat.
  </p>
  <p>
    <strong>Plusieurs solutions pour éviter ce problème sont disponibles :</strong>
    <ul>
      <li>Ajouter des liens d'évitement sur la page</li>
      <li>Utiliser des landmarks ARIA</li>
      <li>Utiliser une balise de titre</li>
    </ul>

  </p>

  <h4>Ajouter des liens d'évitement</h4>

  <p>Les liens d'évitement permettent d'accéder directement à une zone spécifique de la page. Ils sont insérés en haut de page et donc vocalisés en premier. La présence d'un lien d'évitement «&nbsp;accéder au tchat&nbsp;» permettant d'aller directement au chatbot permettra à l'utilisateur d'anticiper son utilisation. Ces liens d'évitements peuvent être masqués à l'écran, même si ce n'est pas à privilégier (grâce au <a href="../masquage-accessible/">masquage accessible</a>).</p>
  <p>Attention aux anglicismes. Remarquez ici l'utilisation du mot «tchat» et non «chat». A l'écoute, le second mot est vocalisé comme l'animal (sans l'accent anglais cela peut prêter à confusion).
  </p>
  <p>La présence des liens d'évitement a également un effet positif pour les personnes qui naviguent au clavier. Par exemple, sur la page que vous consultez actuellement, des liens d'évitements sont disponibles. Ils sont masqués par défaut et deviennent visibles à la prise du focus. Pour les faire apparaître, vous pouvez cliquer dans la barre d'adresse de votre navigateur puis appuyer plusieurs fois sur la touche <kbd>Tab</kbd> (pour positionner le focus en début de page).
  </p>
  <img class="screenshot img-fluid" src="images/skiplinks.png" alt="capture d'écran des liens d'évitements qui s'affichent sur cette page lors de la navigation au clavier">

  <h4>Utiliser des landmarks ARIA</h4>

  <p>En plus des <a href="../landmarks-aria/">balises de structure HTML5 prédéfinies</a> (<code>main</code>, <code>aside</code>, <code>footer</code> et <code>header</code>, ...), il est possible de créer des landmarks «&nbsp;sur mesure&nbsp;» en utilisant le rôle <abbr>ARIA</abbr> <code>region</code>.
  </p>

  <pre><code class="html">
    &lt;div role="region" aria-label="fenêtre du tchat"&gt;
      &lt;!-- code du chatbot --&gt;
    &lt;/div&gt;
  </code></pre>

  <p>Ce code permet de définir une zone «&nbsp;fenêtre de chat&nbsp;» dans la page. Cela permet aux personnes qui utilisent un lecteur d'écran d'accéder au tchat depuis la liste des régions. La capture d'écran ci-dessous a été obtenue en affichant la liste des régions depuis le lecteur d'écran NVDA :<br>
    <img class="screenshot img-fluid" src="images/region.png" alt="liste des régions dans NVDA">
  </p>

  <p>Ainsi avec seulement deux petits attributs ARIA, on simplifie grandement la navigation.</p>

  <h4>Utiliser une balise de titre</h4>
  <p>D'après des sondages récurrents réalisés par <a href="https://webaim.org">webaim.org</a> auprès d'utilisateurs de lecteurs d'écran on s'aperçoit que les landmarks ne sont pas encore connus de tous. Par sécurité, on peut ajouter également une balise de titre (<code>h1</code>, <code>h2</code>...) avant le tchat.
  </p>
  <p>Pour que ce titre ne soit pas visible à l'écran, il suffit d'utiliser une classe de <a href="../masquage-accessible/">masquage accessible</a> (<code>sr-only</code>). Cela permettra également aux utilisateurs d'accéder au chat depuis la liste des titres de la page.
  </p>

  <pre><code class="html">
      &lt;div role="region" aria-labelledby="tchat-title"&gt;
        &lt;h1 id="tchat-title" class="sr-only"&gt;Fenêtre du tchat&lt;/h1&gt;
        &lt;!-- code du chatbot --&gt;
      &lt;/div&gt;
  </code></pre>

  <p><img class="screenshot img-fluid" src="images/title.png" alt="capture d'écran, liste des titres dans NVDA">
  </p>

  <h2>3. Accessibilité du chatbot</h2>

  <p>Maintenant que tous les utilisateurs peuvent accéder au chatbot, il faut s'assurer que celui-ci soit accessible.</p>

  <h3>Navigation au clavier</h3>
  <p>Concernant la navigation au clavier, il suffit de vérifier en navigant sans l'aide de la souris, qu'il est possible de cliquer sur l'ensemble des boutons (touche <code>Tab</code> pour déplacer le focus, touche <code>entrée</code> pour activer un bouton) et qu'il est possible de saisir et d'envoyer des messages.</p>
  <p>Après quelques échanges dans le chat, une barre de défilement apparaît. Il faut également s'assurer que celle-ci soit utilisable à l'aide des flèches du clavier. C'est le cas nativement dans Firefox, par contre pour Chrome il a été nécessaire de rendre cet élément focusable à l'aide d'un attribut <code>tabindex</code>.</p>

  <pre><code class="html">
    &lt;div id="chat-content" <span class="important">tabindex="0"</span>&gt;
  </code></pre>

  <p>Enfin, ne pas oublier de faire en sorte que le focus soit visible lorsque celui-ci est positionné sur l'élément permettant de faire défiler les messages :</p>
  <pre><code class="css">
    div:focus {
      outline: .2rem solid #f16e00;
    }
  </code></pre>

 <p><img class="screenshot img-fluid" src="images/chat-scroll.png" alt="capture d'écran de la fenêtre de chat avec le focus positionné sur l'élément permettant de faire défiler les messages"></p>

  <h3>Navigation avec une loupe d'écran</h3>
  <p>La largeur de la fenêtre de chat peut avoir une incidence sur le confort de lecture. En effet, si, celle-ci est trop large, la lecture du chat à l'aide d'une loupe peut devenir fastidieuse. Notamment si, l'utilisateur est obligé de faire défiler l'écran pour lire la totalité d'une ligne du chat.
  </p>
  <p>Dans la capture d'écran ci-dessous (loupe d'écran à 600%), la fenêtre est trop large, l'utilisateur devra déplacer la zone visible à gauche et à droite pour parcourir la fenêtre de chat :</p>
 <p> <img class="screenshot" src="images/chatbot-zoom-ko.png" alt="capture d'écran d'une fenêtre de chat trop large">
 </p>
  <p>La capture d'écran ci-dessous a été prise avec la fenêtre de chat visible sur cette page. Ici, avec un zoom de 600%, il est possible de lire la totalité du chat sans déplacer la portion d'écran visible.</p>
  <p><img class="screenshot" src="images/chatbot-zoom-ok.png" alt="capture d'écran d'une fenêtre de chat de largeur satisfaisante">
  </p>

  <h3>Navigation avec un lecteur d'écran</h3>

  <h4>Labelliser les éléments interactifs</h4>
  <p>Des labels ont été ajoutés sur le champ de saisie et sur le bouton envoyer à l'aide d'un attribut <code>aria-label</code> ou <code>title</code>. Ainsi, un utilisateur malvoyant utilisant un lecteur d'écran entendra qu'il s'agit du champ permettant de saisir le message à envoyer.</p>
    <pre><code class="html">
        &lt;input type="text" <span class="important">title="message à envoyer" ou aria-label="message à envoyer"</span> id="chat-input" autocomplete="off" placeholder="Saisir votre message..."&gt;
        &lt;input type="submit" title="Envoyer ce message" <span class="important">aria-label="envoyer"</span>&gt;
    </code></pre>

  <p>La même chose sur les boutons permettant de réduire et fermer la fenêtre du chat.</p>

  <h4>Prévenir l'utilisateur de l'arrivée d'un nouveau message</h4>
  <p>Bien que les messages reçus apparaissent à l'écran, le lecteur d'écran ne les vocalisera pas automatiquement par défaut.</p>
  <p>Pour corriger ce problème, il suffit d'ajouter un attribut <code>aria-live</code> pour indiquer au lecteur d'écran que celui-ci doit vocaliser automatiquement toute modification apportée à la liste des messages.</p>
  <pre><code class="html">
      &lt;div id="chat-content" tabindex="0" <span class="important">aria-live="polite"</span>&gt;
  </code></pre>

  <h4>Identifier l'émetteur d'un message</h4>
  <p>Est-ce que vous pouvez identifier qui est l'émetteur du message «Test message 2» dans la capture d'écran ci-dessous ?</p>
 <p><img class="screenshot img-fluid" src="images/chat1.png" alt="capture d'écran d'une conversation via une fenêtre de chat">
  </p>

  <p>
    En regardant l'image précédente, on s'aperçoit que ce message est aligné à droite, il suffit de remonter en haut de la pile des messages alignés à droite pour trouver l'émetteur : «moi».
  </p>

  <p>
    Pour un utilisateur qui ne voit pas l'écran, cela peut devenir compliqué puisque l'émetteur du message est inséré visuellement (à juste titre) que lorsqu'il y a un changement d'émetteur dans la conversation.
  </p>
  <p> Pour lever toute ambiguïté, on va indiquer devant chaque message son émetteur pour les utilisateurs qui naviguent à l'aide d'un lecteur d'écran uniquement (utilisation de la classe de masquage accessible <code>sr-only</code>).
  </p>

  <pre><code class="html">
      &lt;div class="message"&gt;
        &lt;span <span class="important">class="sr-only"</span>&gt;
          Djingo dit :
        &lt;/span&gt;
        Test message 1
      &lt;/div&gt;

      ...

      &lt;div class="message"&gt;
        &lt;span <span class="important">class="sr-only"</span>&gt;
          moi dit :
        &lt;/span&gt;
        Test message 1
      &lt;/div&gt;
  </code></pre>

  <p><strong>Remarque&nbsp;: </strong>le formalisme adopté («moi dit», «Djingo dit») peut paraître surprenant, mais cela permet à l'utilisateur qui écoute la page d'avoir l'information importante rapidement et éventuellement de passer à la suite sans écouter la fin de la phrase pour gagner du temps.</p>

  <p>Enfin, pour éviter d'avoir une double vocalisation, on masquera au lecteur d'écran l'émetteur affiché en haut d'une pile de messages, à l'aide d'un attribut <code>aria-hidden</code>.</p>
  <pre><code class="html">
      &lt;span class="from" aria-hidden="true"&gt;moi&lt;/span&gt;
  </code></pre>

  <h4>Sons</h4>

  <p>Les <a href="https://design.orange.com/guidelines">recommandations de la marque Orange</a> <span lang="en">(Conversational UI guideline)</span> précisent les fichiers audio à utiliser. Il est important d'émettre un son à l'envoi et à la réception des messages. C'est utile pour tout le monde mais, en particulier, pour les personnes malvoyantes. Elles auront confirmation que leur message a été envoyé sans avoir besoin d'aller lire le fil des messages par exemple.</p>

  <h4>Titre de la fenêtre</h4>

  <p>Pour compléter l'alerte sonore, il est également important de modifier le titre de la fenêtre à la réception d'un message. Ceci permettra à l'utilisateur qui s'est absenté, de détecter, d'un simple coup d'oeil, qu'un message est arrivé même s'il est sur un autre onglet du navigateur. De même, pour un utilisateur qui navigue avec un lecteur d'écran, il est très simple d'accéder à tout moment au titre d'un onglet du navigateur.
  </p>

  <p><img class="screenshot img-fluid" src="images/window-title.png" alt="capture d'écran d'un onglet du navigateur avec un titre commençant par : Djingo dit ..."></p>

  <p>Cette modification doit être effectuée lorsqu'un message arrive et que le focus n'est pas dans le champ de saisie du chat (focus ailleurs dans la page ou sur un autre onglet). Ne pas oublier de réinitialiser le titre de la fenêtre lorsque l'utilisateur positionne à nouveau le focus dans ce champ de saisie.
  </p>

  <pre><code class="js">
    playSound("Receive_a_message");
    if (!document.hasFocus() || document.activeElement !== document.getElementById('chat-input')) {
      document.title = "Djingo dit ... " + title;
    }
  </code></pre>

  <h4>Interactions</h4>
  <p>Certaines conversations amènent le chatbot à proposer à l'utilisateur d'effectuer un choix parmi plusieurs propositions. Le bouton suivant permet d'illustrer cette possibilité&nbsp;:</p>
   <p>
  <button class="btn btn-secondary" id="btnChoice">Exemple d'interaction</button>
 </p>
  <p>Dans l'exemple déclenché par le bouton précédent, le chatbot demande à l'utilisateur de choisir parmi plusieurs options. Dans ce cas de figure, il est nécessaire de prendre quelques précautions pour simplifier la navigation.</p>
  <strong>Gestion du focus</strong>
  <p>Pour simplifier la navigation au clavier, lorsque le choix est proposé à l'utilisateur, plutôt que de mettre le focus dans le champ de saisie du chat, celui est déplacé sur le texte qui précède les boutons. Ceci permet ensuite à l'utilisateur de naviguer sur le premier choix en appuyant une seule fois sur la touche <code>Tab</code>.</p>
  <p>Pour positionner le focus sur l'élément textuel (un élément <code>&lt;div&gt;</code> dans cet exemple) qui n'est pas focusable par défaut, il est nécessaire de lui ajouter un attribut <code>tabindex="-1"</code>, ainsi il peut recevoir le focus via Javascript. Pour rappel, cet attribut peut prendre les valeurs suivantes&nbsp;:</p>
  <ul>
    <li>tabindex = 0 : l'élément est focusable au clavier (touche <code>Tab</code>) et via Javascript.</li>
    <li>tabindex = -1 : l'élément est focusable via Javascript uniquement.</li>
  </ul>

  <strong>Navigation avec un lecteur d'écran</strong>
  <p>Lorsque le focus est déplacé sur un élément, le lecteur d'écran vocalise automatiquement celui-ci. Or dans notre cas, l'attribut <code>aria-live</code> permet déjà de vocaliser de manière automatique tout ajout dans la fenêtre du chat. Pour éviter une double vocalisation dans ce cas il faut veiller à désactiver temporairement l'aria-live.</p>

  <pre><code class="js">
    // Désactivation de l'aria-live (pour éviter une double vocalisation)
    $("#chat-container").attr("aria-live", "off");

    // Affichage la question
    push("Djingo", "Excellente idée ! Vous souhaitez parler d'accessibilité web ou mobile ?", true, "poll1");

    // Affichage des choix possibles
    rawPush('moi', '&lt;button id="poll-web" class="btn btn-primary btn-poll"&gt;Web&lt;/button&gt;&lt;button id="poll-mobile" class="btn btn-primary btn-poll"&gt;Mobile&lt;button&gt;');

    // Déplacement du focus sur la question (déclenchement de la vocalisation)
    $("#poll1").focus();

    // Réactivation de l'aria-live
    window.setTimeout(function() {
        $("#chat-container").attr("aria-live", "polite");
    }, 0);
  </code></pre>

  <h2>Conclusion</h2>
  <p>Ces recommandations ont été appliquées au chat disponible sur cette page. N'hésitez pas à consulter le code. Pour toutes remarques, suggestions n'hésitez pas à consulter ou créer une <span lang="en">issue</span> sur notre <a href="https://github.com/Orange-OpenSource/a11y-guidelines/issues">compte github</a>.</p>

  <div role="region" aria-labelledby="tchat-label">
    <h1 id="tchat-label" class="sr-only" tabindex="-1">Fenêtre du tchat</h1>
    <div id="chatbot-window">
      <div id="chatbot">
        <span id="chatbot-title" role="heading" aria-level="1"> Djingo <span class = "sr-only">Fenêtre de discussion</span></span>
        <span id="chatbot-toolbar">
          <!--<button class="ico" id="ico-contrast" title="High contras&te mode" aria-label="High contras&te mode" role="checkbox"></button>-->
        <button class="ico" id="chatbot-hide" title="Réduire la fenêtre de discussion" aria-label="Réduire la fenêtre de discussion"></button>
        <button class="ico" id="chatbot-show" title="Afficher la fenêtre de discussion" aria-label="Afficher la fenêtre de discussion"></button>
        <button class="ico" id="chatbot-close" title="Fermer la fenêtre de discussion" aria-label="Fermer la fenêtre de discussion"></button>
      </span>
        <div id="chat-container" aria-live="polite">
          <div id="chat-content" tabindex="0"></div>
        </div>
          <form>
            <input type="text" aria-label="message à envoyer" id="chat-input" autocomplete="off" placeholder="Saisir votre message...">
            <input type="submit" title="Envoyer ce message" value="" aria-label="Envoyer">
          </form>
      </div>
  </div>
  <button class="btnChatbot" id="btnChatbot">Contact</button>
</div>

<div aria-hidden="true" id="sound"></div>
