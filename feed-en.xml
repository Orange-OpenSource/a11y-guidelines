<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Orange accessibility guidelines</title>
  <subtitle>Last articles in English</subtitle>
  <link href="https://a11y-guidelines.orange.com/feed-en.xml" rel="self"/>
  <link href="https://a11y-guidelines.orange.com"/>
  <updated>2021-08-03T00:00:00Z</updated>
  <id>https://a11y-guidelines.orange.com</id>
  
  <entry>
    <title>HTML5 &amp; ARIA</title>
    <link href="https://a11y-guidelines.orange.com/en/articles/html5-aria/"/>
    <updated>2016-09-08T00:00:00Z</updated>
    <id>https://a11y-guidelines.orange.com/en/articles/html5-aria/</id>
    <content type="html">&lt;h1&gt;&lt;abbr&gt;HTML5&lt;/abbr&gt; &amp;amp; &lt;abbr&gt;ARIA&lt;/abbr&gt;&lt;/h1&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/html5-aria/#introduction&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Web sites are increasingly dynamic (asynchronous loading, dynamic content generation) and interactive (rich interface components: slider, datepicker…). So it is very difficult or impossible to make these components accessible with conventional &lt;abbr&gt;HTML&lt;/abbr&gt;.&lt;/p&gt;
&lt;p&gt;Even with the &lt;abbr&gt;HTML5&lt;/abbr&gt; change, we still lack semantics to provide technical aids (screen readers, magnifiying software, …), keyboard navigation is often impossible, complex handling of the keyboard focus is missing and live regions are not notified to the user, in particular for the screenreaders.&lt;/p&gt;
&lt;h2 id=&quot;what-is-it&quot;&gt;What is it ? &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/html5-aria/#what-is-it&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To overcome these limitations, the W3C / WAI has officially issued a recommendation called &lt;abbr&gt;ARIA&lt;/abbr&gt;, standing for Accessible Rich Internet Applications, and several documents on the use of &lt;abbr&gt;ARIA&lt;/abbr&gt;. We are currently at the 1.1 version of &lt;abbr&gt;ARIA&lt;/abbr&gt; et for the Authoring Practices, an &lt;abbr&gt;ARIA&lt;/abbr&gt;best practices.&lt;/p&gt;
&lt;p&gt;&lt;abbr&gt;ARIA&lt;/abbr&gt; is a semantic wrapper based on the attribute / value combination used in markup languages such as &lt;abbr&gt;HTML&lt;/abbr&gt;, &lt;abbr&gt;SVG&lt;/abbr&gt;, &lt;abbr&gt;XML&lt;/abbr&gt;, etc. This recommendation consists of roles, states and properties that will specifically interact with assistive technologies (&lt;abbr&gt;AT&lt;/abbr&gt;). With &lt;abbr&gt;ARIA&lt;/abbr&gt;, one can describe elements and behaviours with simple HTML when they do not exist natively, for example tabs, drop-downs, live regions, tooltips, modal windows, etc. &lt;abbr&gt;ARIA&lt;/abbr&gt; also defines how an interface component has to behave with the keyboard in order to standardize the user experience with keyboard navigation. &lt;strong&gt;&lt;abbr&gt;ARIA&lt;/abbr&gt; makes sense and delivers its full potential when used with &lt;abbr&gt;HTML5&lt;/abbr&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;abbr&gt;ARIA&lt;/abbr&gt; does not add any particular behaviour or any style to &lt;abbr&gt;UI&lt;/abbr&gt; components as it is only descriptive. So always make sure presentation is done through &lt;abbr&gt;CSS&lt;/abbr&gt;, content control and interaction via Javascript.&lt;/p&gt;
&lt;h2 id=&quot;support&quot;&gt;Support &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/html5-aria/#support&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;abbr&gt;ARIA&lt;/abbr&gt; support improves quickly and is already supported :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in modern browsers (Firefox &amp;gt;=3.0, Chrome &amp;gt;=16, Safari &amp;gt;=4, Opera 9.5&amp;gt;=, Internet Explorer 8 for a basic support, Internet Explorer &amp;gt;=9 and Edge for advanced support);&lt;/li&gt;
&lt;li&gt;in assistive technologies (&lt;abbr&gt;NVDA&lt;/abbr&gt; &amp;gt;=2010, Orca &amp;gt;=2 + Firefox only, VoiceOver &lt;abbr&gt;OSX&lt;/abbr&gt; &amp;gt;=10.5, iOS &amp;gt;=4, JAWS &amp;gt;=8, Window-Eyes &amp;gt;=7, ZoomText 10 for a basic support, ZoomText &amp;gt;=11 for advanced support).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Moreover, the optimal efficiency of the &lt;abbr&gt;ARIA&lt;/abbr&gt; compatibility depends heavily on the browser/assistive technology combination: Firefox with &lt;abbr&gt;NVDA&lt;/abbr&gt;, Jaws with Internet Explorer or Safari with VoiceOver, for example.&lt;/p&gt;
&lt;h2 id=&quot;should-we-use-it&quot;&gt;Should we use it? &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/html5-aria/#should-we-use-it&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;abbr&gt;ARIA&lt;/abbr&gt; improves the accessibility of components that are not natively available in HTML (or inaccessible &lt;abbr&gt;HTML5&lt;/abbr&gt; components). &lt;abbr&gt;ARIA&lt;/abbr&gt;’s robustness and interoperability is rather complacent, &lt;a href=&quot;https://www.w3.org/WAI/GL/wiki/Category:ARIA_Techniques&quot;&gt;around forty &lt;abbr&gt;WCAG&lt;/abbr&gt; 2.1 techniques are specific to &lt;abbr&gt;ARIA&lt;/abbr&gt;&lt;/a&gt; (10 are &lt;abbr&gt;HTML5&lt;/abbr&gt; techniques). Therefore, for rich Internet applications, &lt;abbr&gt;ARIA&lt;/abbr&gt; is essential for accessibility implementation.&lt;/p&gt;
&lt;p&gt;In all cases, you have to test developments in the target environments (browser/assistive technology combinations). This is a tough task, but absolutely necessary for complex cases because on a web site or a traditional web application, you must, at least, test with Safari/VoiceOver, Internet Explorer/Jaws and Firefox/&lt;abbr&gt;NVDA&lt;/abbr&gt;.&lt;/p&gt;
&lt;p&gt;In a well-defined environment (e.g. intranet), target environments are known and in a finite number, so it gets easier!&lt;/p&gt;
&lt;h2 id=&quot;webography&quot;&gt;Webography &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/html5-aria/#webography&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;W3C:&lt;br /&gt;
  * &lt;a href=&quot;http://www.w3.org/TR/wai-aria/&quot;&gt;&lt;abbr&gt;ARIA&lt;/abbr&gt; specification&lt;/a&gt;&lt;br /&gt;
  * &lt;a href=&quot;http://www.w3.org/TR/wai-aria-practices/&quot;&gt;&lt;abbr&gt;ARIA&lt;/abbr&gt; implementation&lt;/a&gt;&lt;br /&gt;
  * &lt;a href=&quot;http://www.w3.org/TR/aria-in-html/&quot;&gt;Use &lt;abbr&gt;ARIA&lt;/abbr&gt; HTML (5)&lt;/a&gt;&lt;br /&gt;
  * &lt;a href=&quot;https://www.w3.org/WAI/GL/wiki/Category:ARIA_Techniques&quot;&gt;&lt;abbr&gt;ARIA&lt;/abbr&gt; techniques in &lt;abbr&gt;WCAG&lt;/abbr&gt; 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sitepoint.com/introduction-wai-aria/&quot;&gt;Introduction to &lt;abbr&gt;ARIA&lt;/abbr&gt; by Site Point&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.mozilla.org/fr/docs/Accessibilit%C3%A9/ARIA&quot;&gt;Introduction and link list to &lt;abbr&gt;ARIA&lt;/abbr&gt; sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>CAPTCHA Accessibility</title>
    <link href="https://a11y-guidelines.orange.com/en/articles/captcha-accessibility/"/>
    <updated>2018-02-08T00:00:00Z</updated>
    <id>https://a11y-guidelines.orange.com/en/articles/captcha-accessibility/</id>
    <content type="html">&lt;h1&gt;CAPTCHA Accessibility&lt;/h1&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/captcha-accessibility/#introduction&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A CAPTCHA (“Completely Automated Public Turing-test to tell Computers and Humans Apart”) is an automated test aimed at telling apart a human user from a software program. It is often used on forms to prevent spam.&lt;br /&gt;
There are several types of CAPTCHAs, most of them are visual tests that ask the user to type a series of deformed letters displayed on the screen.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://a11y-guidelines.orange.com/en/web/images/captchas/captcha.png&quot; alt=&quot;Visual captcha screenshot&quot; class=&quot;img-fluid&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Example of a visual CAPTCHA&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;first-analysis-captchas-and-users&quot;&gt;First analysis: CAPTCHAs and users &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/captcha-accessibility/#first-analysis-captchas-and-users&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;CAPTCHAs are often problematic, even for savvy users. It is often necessary to undergo several trials before giving the right answer to a CAPTCHA. For some users a CAPTCHA is a no-go, plain and simple. For example a blind user cannot solve a visual CAPTCHA. Even if some sites provide alternatives, like audio CAPTCHAs in addition to visual CAPTCHAs, it actually seldom works. It’s even the first source of difficulty quoted by visually impaired users according to &lt;a href=&quot;https://webaim.org/projects/screenreadersurvey7&quot;&gt;WebAIM’s latest survey at the end of 2017&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://a11y-guidelines.orange.com/en/web/images/captchas/webaim.png&quot; alt=&quot;Graph from webaim survey&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CAPTCHAs pointed out by visually impaired users as most common annoyance (2017 WebAIM survey)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The boom in computation means enables bots and other programs to be more and more efficient. It is quite easy nowadays to write a program that guesses the text in an image or vocalised in an audio file.&lt;br /&gt;
For the CAPTCHA to stay efficient against bots, it is necessary to augment deformations in the picture and audio file, thus making it even harder for users to get it right.&lt;br /&gt;
This is why Google is trying to find alternatives to differentiate between a human user and a robot. They now propose “No CAPTCHA”, a plain checkbox from the user’s point of view. It uses additional information such as screen resolution, mouse pointer moves, the time it takes to fill a form, etc.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://a11y-guidelines.orange.com/en/web/images/captchas/nocaptcha.png&quot; alt=&quot;no captcha screenshot&quot; class=&quot;img-fluid&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;No CAPTCHA by Google&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Even if this solution is more efficient, it is still not satisfactory from an accessibility point of view because, in case of doubt, a standard CAPTCHA is displayed. It is often the case for a user who does not use a mouse but a keyboard, or for a screen reader user (visually impaired users). You must thus always provide an alternative contact means (email, telephone, etc.) in the case when the CAPTCHA cannot be filled.&lt;br /&gt;
Between users that cannot input the CAPTCHA text and those who don’t understand what’s expected of them, adding a CAPTCHA is not benign regarding the audience of a site. Considering CAPTCHAs are problematic to many users, the first recommendation is to &lt;strong&gt;not use a CAPTCHA&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;second-analysis-captcha-and-security&quot;&gt;Second analysis: CAPTCHA and security &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/captcha-accessibility/#second-analysis-captcha-and-security&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In &lt;a href=&quot;https://security.googleblog.com/2014/12/are-you-robot-introducing-no-captcha.html&quot;&gt;a 2014 article by Google&lt;/a&gt;, we read that artificial intelligence get a 99.8% score when solving “even the most difficult variant of distorted text” – thus getting a better score than a real user! Services can guess which font was used in an image, or whether the image contains an object (a cat, a car, a hat, etc.). Same conclusion in this more recent article &lt;a href=&quot;https://medium.com/mlmemoirs/breaking-captcha-using-machine-learning-in-0-05-seconds-9feefb997694&quot;&gt;Breaking CAPTCHA Using Machine Learning in 0.05 Seconds&lt;/a&gt;.&lt;br /&gt;
Considering this (users bouncing from the site in frustration and uncertain security), we come back to our first recommendation: &lt;strong&gt;do not use a CAPTCHA&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;recommended-solutions&quot;&gt;Recommended solutions &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/captcha-accessibility/#recommended-solutions&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Our idea is, first, to determine risks and to ask ourselves the following questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What are the risks in case of an attack?&lt;/li&gt;
&lt;li&gt;What is the real need, between bouncing bots off and providing a secured solution?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;According to our answers, we will be able to provide the solution most fit to the problem.&lt;/p&gt;
&lt;h2 id=&quot;honeypot-and-time-measuring-two-simple-techniques-to-put-in-place-to-identify-bots&quot;&gt;HoneyPot and Time measuring, two simple techniques to put in place to identify bots &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/captcha-accessibility/#honeypot-and-time-measuring-two-simple-techniques-to-put-in-place-to-identify-bots&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;These two techniques are transparent for the user, and the risks they pose are very limited.&lt;br /&gt;
The first solution consists in adding a hidden field in the form. This will never be filled by a user. If you detect server-side that the field was filled, it must be malevolent software.&lt;br /&gt;
The second technique consists in measuring the time it takes for the user to fill the form. If it is very fast, there’s a good chance that it’s malevolent software.&lt;/p&gt;
&lt;h2 id=&quot;anti-spam-and-blacklist-solutions-to-remove-bot-requests&quot;&gt;Anti-spam and blacklist solutions to remove bot requests &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/captcha-accessibility/#anti-spam-and-blacklist-solutions-to-remove-bot-requests&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is also possible, server-side, to triage information with anti-spam software and automatically remove submissions from malevolent software by analysing content data and the originating IP.&lt;/p&gt;
&lt;h2 id=&quot;a-logical-or-mathematical-test-also-called-textual-captcha&quot;&gt;A logical or mathematical test, also called textual CAPTCHA &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/captcha-accessibility/#a-logical-or-mathematical-test-also-called-textual-captcha&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is done through a simple sentence asking the user to copy a word, to solve a simple mathematical operation, etc.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“Copy the word: ‘House’”&lt;/li&gt;
&lt;li&gt;“How much is 2 plus 2?”&lt;/li&gt;
&lt;li&gt;“Which animal meows?”&lt;/li&gt;
&lt;li&gt;“What colour is the sky?”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Under the condition that the questions stay very basic, this kind of CAPTCHA will not be problematic to users.&lt;br /&gt;
A good practice in this case will be to provide a refresh solution, which will be very helpful for people with cognitive impairments.&lt;/p&gt;
&lt;h2 id=&quot;an-email-sms-or-phone-verification-for-reinforced-security&quot;&gt;An email, SMS or phone verification for reinforced security &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/captcha-accessibility/#an-email-sms-or-phone-verification-for-reinforced-security&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This solution consists in sending an email, an SMS or in calling directly the user to make sure they can confirm the transaction, by clicking on a link or by sending the code they received.&lt;br /&gt;
This solution is at the same time more constraining for the user who must communicate personal information and more tedious to put in place, but it’s a very efficient solution when the security level needs to be high.&lt;/p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/captcha-accessibility/#summary&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is no perfect solution, either for the user or security-wise. You should opt for the best technique according to the service provided. Also, it is important in the case of attack to have logs to analyse and to prepare for further attacks.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>ARIA attributes that can save you</title>
    <link href="https://a11y-guidelines.orange.com/en/articles/aria-attributes-that-can-save-you/"/>
    <updated>2018-07-18T00:00:00Z</updated>
    <id>https://a11y-guidelines.orange.com/en/articles/aria-attributes-that-can-save-you/</id>
    <content type="html">&lt;h1&gt;&lt;abbr&gt;ARIA&lt;/abbr&gt; attributes that can save you: &lt;code&gt;aria-label&lt;/code&gt;, &lt;code&gt;aria-labelledby&lt;/code&gt; and &lt;code&gt;aria-describedby&lt;/code&gt;&lt;/h1&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/aria-attributes-that-can-save-you/#introduction&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;accessible-name-and-description&quot;&gt;Accessible name and description &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/aria-attributes-that-can-save-you/#accessible-name-and-description&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An accessible name is the information that allows assistive technology (&lt;abbr&gt;AT&lt;/abbr&gt;), for example, a screen reader or a magnification program, to identify a given element (&lt;abbr&gt;HTML&lt;/abbr&gt; tag). It can be provided by the title or content of an element, an attribute (for example, an &lt;code&gt;alt&lt;/code&gt; attribute for an image) or by an associated element (for example, a &lt;code&gt;label&lt;/code&gt; tag for a &lt;code&gt;input&lt;/code&gt; field).&lt;/p&gt;
&lt;p&gt;An accessible description is more extensive information that is used by the &lt;abbr&gt;AT&lt;/abbr&gt; allowing it to complete the accessible name by specifying and adding meaning where the accessible name is not sufficient.&lt;/p&gt;
&lt;p&gt;The accessible name as the accessible description can be visually noticeable or not (link title: visible, alternative image: hidden and usable only by &lt;abbr&gt;AT&lt;/abbr&gt;...)&lt;/p&gt;
&lt;h3 id=&quot;aria-attributes-aria-label-aria-labelledby-and-aria-describedby&quot;&gt;&lt;abbr&gt;ARIA&lt;/abbr&gt; attributes: &lt;code&gt;aria-label&lt;/code&gt;, &lt;code&gt;aria-labelledby&lt;/code&gt; and &lt;code&gt;aria-describedby&lt;/code&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/aria-attributes-that-can-save-you/#aria-attributes-aria-label-aria-labelledby-and-aria-describedby&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Three &lt;abbr&gt;ARIA&lt;/abbr&gt; attributes are very well supported by browsers and &lt;abbr&gt;AT&lt;/abbr&gt;: &lt;code&gt;aria-label&lt;/code&gt;, &lt;code&gt;aria-labelledby&lt;/code&gt; and &lt;code&gt;aria-describedby&lt;/code&gt;. They allow to add extra information to an &lt;abbr&gt;HTML&lt;/abbr&gt; tag:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;aria-label&lt;/code&gt;, &lt;code&gt;aria-labelledby&lt;/code&gt; allow to give an accessible name to an element&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aria-describedby&lt;/code&gt; allows to add to the accessible name, if necessary, in addition, an accessible description to an element&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, they only work well with some elements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;interactive elements: &lt;code&gt;a&lt;/code&gt; (with &lt;code&gt;href&lt;/code&gt; attribute), &lt;code&gt;audio&lt;/code&gt; and &lt;code&gt;video&lt;/code&gt; (with &lt;code&gt;controls&lt;/code&gt; attribute), &lt;code&gt;input&lt;/code&gt; (exept &lt;code&gt;type=&amp;quot;hidden&amp;quot;&lt;/code&gt;), &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;button&lt;/code&gt; and &lt;code&gt;textarea&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;img&lt;/code&gt; and &lt;code&gt;iframe&lt;/code&gt; elements&lt;/li&gt;
&lt;li&gt;elements with an explicit landmark role, therefore, with a &lt;code&gt;role&lt;/code&gt; attribute or an implicit landmark (a &lt;abbr&gt;HTML5&lt;/abbr&gt; structural tag: &lt;code&gt;header&lt;/code&gt;, &lt;code&gt;footer&lt;/code&gt;, &lt;code&gt;main&lt;/code&gt;, &lt;code&gt;nav&lt;/code&gt;, &lt;code&gt;aside&lt;/code&gt; and &lt;code&gt;section&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;One of the &lt;a href=&quot;https://www.w3.org/TR/wai-aria-1.1/#widget_roles&quot; lang=&quot;en&quot; hreflang=&quot;en&quot;&gt;&lt;abbr&gt;ARIA&lt;/abbr&gt; widget roles (27 in &lt;abbr&gt;ARIA&lt;/abbr&gt; 1.1)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For any other &lt;abbr&gt;HTML&lt;/abbr&gt; element, these three &lt;abbr&gt;ARIA&lt;/abbr&gt; attributes have few or even random support depending on the &lt;abbr&gt;AT / browser pair, so do not use as the only way of giving necessary information.&lt;/abbr&gt;&lt;/p&gt;
&lt;h2 id=&quot;should-it-be-used-and-how&quot;&gt;Should it be used and how? &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/aria-attributes-that-can-save-you/#should-it-be-used-and-how&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Yes, we can use these three &lt;abbr&gt;ARIA&lt;/abbr&gt; attributes on the elements with which it works (see above) to pass essential information specifically to &lt;abbr&gt;AT&lt;/abbr&gt;.&lt;/p&gt;
&lt;p&gt;You should know that &lt;code&gt;aria-label&lt;/code&gt; must contain, as a value, a string of characters that will be the accessible name. While for &lt;code&gt;aria-labelledby&lt;/code&gt; and &lt;code&gt;aria-describedby&lt;/code&gt;, the value of this attribute references one or more (space separated) &lt;code&gt;id&lt;/code&gt; (auto referencing possible) of page elements whose content will be used as the accessible name of the element.&lt;/p&gt;
&lt;p&gt;When using &lt;code&gt;aria-label&lt;/code&gt; or&lt;code&gt; aria-labelledby&lt;/code&gt; on an element, the content or title of that element is no longer rendered to &lt;abbr&gt;AT&lt;/abbr&gt; but replaced by the accessible name (for &lt;code&gt;aria-label&lt;/code&gt; the contents of this attribute, for&lt;code&gt; aria-labelledby&lt;/code&gt; the contents of the referenced element). Therefore, only the accessible name must give all the necessary information to &lt;abbr&gt;AT&lt;/abbr&gt; and therefore to the user.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; attribute &lt;code&gt;aria-labelledby&lt;/code&gt; can admit several values separated by a space and can self-refer. It also works with pseudo-class generated content &lt;abbr&gt;CSS&lt;/abbr&gt; &lt;code&gt;::before&lt;/code&gt; or&lt;code&gt; ::after&lt;/code&gt;. You can also reference content that is visually hidden by: &lt;abbr&gt;CSS&lt;/abbr&gt;,  &lt;code&gt;visibility: hidden;&lt;/code&gt; or &lt;code&gt;display: none;&lt;/code&gt;, and with the &lt;abbr&gt;HTML&lt;/abbr&gt;5 attribute &lt;code&gt;hidden&lt;/code&gt;. However, best practices require that if the interface is such that it is not possible to have a visible text label on the screen, it is better to use &lt;code&gt;aria-label&lt;/code&gt; rather than &lt;code&gt;aria-labelledby&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When the two attributes &lt;code&gt;aria-labelledby&lt;/code&gt; and&lt;code&gt; aria-label&lt;/code&gt; are used, user agents give priority to aria-labelledby when calculating the accessible name property.&lt;/p&gt;
&lt;p&gt;At last, `aria-describedby&#39; will add an accessible description in addition to the accessible name of the element.&lt;/p&gt;
&lt;h2 id=&quot;examples&quot;&gt;Examples &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/aria-attributes-that-can-save-you/#examples&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;
&amp;lt;button aria-label=&quot;Access Hypertext markup language&quot;&amp;gt;html&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Screen reader output: &amp;quot;Access Hypertext markup language&amp;quot;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;
&amp;lt;h2 id=&quot;titre&quot;&amp;gt;HTML source&amp;lt;h2&amp;gt;
&amp;lt;button aria-label=&quot;Access Hypertext markup language&quot; aria-labelledby=&quot;titre&quot;&amp;gt;html&amp;lt;/buttton&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Screen reader output: &amp;quot;HTML source&amp;quot;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;
&amp;lt;h3 id=&quot;titre&quot;&amp;gt;Login page sourcecode&amp;lt;h3&amp;gt;
&amp;lt;button aria-label=&quot;Access HTML&quot; aria-describedby=&quot;titre&quot;&amp;gt;html&amp;lt;/buttton&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Screen reader output: &amp;quot;Access HTML Login page sourcecode&amp;quot;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The accessible name in HTML</title>
    <link href="https://a11y-guidelines.orange.com/en/articles/accessible-name/"/>
    <updated>2019-02-20T00:00:00Z</updated>
    <id>https://a11y-guidelines.orange.com/en/articles/accessible-name/</id>
    <content type="html">&lt;h1&gt;The accessible name in &lt;abbr&gt;HTML&lt;/abbr&gt;&lt;/h1&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/accessible-name/#introduction&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The name of the interface components also called accessible name, is basically the name who will be exposed to assistive technology &lt;abbr&gt;AT&lt;/abbr&gt; via the accessibility &lt;abbr&gt;API&lt;/abbr&gt;. This name is calculated by the browser via an algorithm called &lt;a href=&quot;https://www.w3.org/TR/accname-1.1/&quot;&gt;Accessible Name and Description Computation 1.1&lt;/a&gt;.&lt;br /&gt;
In fact, to make it simple, the browser will generate an accessible tree from the &lt;abbr&gt;DOM&lt;/abbr&gt; (Document Object Model) in which a large majority of &lt;abbr&gt;HTML&lt;/abbr&gt; elements (those with only a presentation purpose, eg &lt;code&gt;div&lt;/code&gt; and&lt;code&gt; span&lt;/code&gt; tags do not have utility) need a (accessible) name to be correctly identified by the &lt;abbr&gt;AT&lt;/abbr&gt;.&lt;/p&gt;
&lt;p&gt;The accessible name is derived from the content of a tag, attributes of this tag or an element associated with it.&lt;/p&gt;
&lt;h2 id=&quot;in-practice-how-does-it-work&quot;&gt;In practice, how does it work? &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/accessible-name/#in-practice-how-does-it-work&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The accessible name is, for example, announced by a screen reader when the focus is on this element but the role of the element is also added (link, graphic, button…).&lt;/p&gt;
&lt;h3 id=&quot;access-to-the-accessible-name-via-the-browser&quot;&gt;Access to the accessible name  via the browser &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/accessible-name/#access-to-the-accessible-name-via-the-browser&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To access the (accessible) name, the easiest way is to use the tools of browsers.&lt;/p&gt;
&lt;p&gt;In Chrome, in Chrome dev tools (&lt;kbd&gt;Ctrl+ Shift + i&lt;/kbd&gt;), inspect an element (&amp;quot;Elements&amp;quot; tab) and open the &amp;quot;Accessibility&amp;quot; panel instead of &amp;quot;Style&amp;quot; &amp;quot;(usually on the right). Access to the &amp;quot;Accessibility tree&amp;quot; and in &amp;quot;Computed properties&amp;quot; you have to the &amp;quot;Name&amp;quot;, the accessible name of the item being inspected.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://a11y-guidelines.orange.com/en/articles/accessible-name/images/chrome_name.png&quot; alt=&quot;Panels of Chrome Development Tools with Open Accessibility Tree&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In FireFox, in dev tools (&lt;kbd&gt;Ctrl+ Shift + i&lt;/kbd&gt;), open the &amp;quot;Accessibility&amp;quot; tab (to display the &amp;quot;Options&amp;quot; of dev tools), inspect an element. You access the &amp;quot;Name&amp;quot;, the accessible name of the inspected item.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://a11y-guidelines.orange.com/en/articles/accessible-name/images/FF_name.png&quot; alt=&quot;Firefox Development Tool Panels with Open Accessibility Tab&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;content-of-a-tag&quot;&gt;Content of a tag &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/accessible-name/#content-of-a-tag&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;ducks.html&amp;quot;&amp;gt;plastic ducks&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Here, the name of the link is the content (text10) of it: &amp;quot;plastic ducks&amp;quot;. A screen reader user to take focus on this item will hear: &amp;quot;plastic ducks link&amp;quot;. For a voice command user, to click on this link, will say: &amp;quot;click plastic ducks link&amp;quot;.&lt;/p&gt;
&lt;p&gt;So an item of this type &lt;code&gt;&amp;lt;button type=&amp;quot;submit&amp;quot;&amp;gt;&amp;lt;/button&amp;gt;&lt;/code&gt; without a title, will not be accessible, of course!&lt;/p&gt;
&lt;p&gt;Also, we can add the elements to give a name.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;button type=&amp;quot;submit&amp;quot;&amp;gt;Buy &amp;lt;img alt=&amp;quot;the plastic duck&amp;quot; src=&amp;quot;duck.jpg&amp;quot;&amp;gt;&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This button will have an accessible name that is the content of the button: the textual title, &amp;quot;Buy&amp;quot; plus the &amp;quot;alt&amp;quot; of the image: &amp;quot;the plastic duck&amp;quot; therefore &amp;quot;Buy the plastic duck&amp;quot;.&lt;/p&gt;
&lt;h3 id=&quot;associated-element&quot;&gt;Associated element &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/accessible-name/#associated-element&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Moreover, for form elements, the accessible name is the &lt;code&gt;label&lt;/code&gt; when it is programmatically associated with the element via the &lt;code&gt;for&lt;/code&gt; attribute referencing the &lt;code&gt;id&lt;/code&gt; of the field.&lt;/p&gt;
&lt;pre&gt; &lt;code class=&quot;html&quot;&gt;
&amp;lt;label for=&quot;search&quot;&amp;lt;Search&amp;gt;/label&amp;gt;
&amp;lt;input id=&quot;search&quot; type=&quot;text&quot;&amp;gt;
&lt;/code&gt; &lt;/pre&gt;
&lt;p&gt;With this code, the screen reader will say: &amp;quot;Search edit&amp;quot;.&lt;/p&gt;
&lt;h3 id=&quot;with-aria-too&quot;&gt;With &lt;abbr&gt;ARIA&lt;/abbr&gt; too! &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/accessible-name/#with-aria-too&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;abbr&gt;ARIA&lt;/abbr&gt; will be able to help us naming a &lt;abbr&gt;HTML&lt;/abbr&gt; element, using &lt;code&gt;aria-label&lt;/code&gt; and&lt;code&gt; aria-labelledby&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt; &lt;code class=&quot;html&quot;&gt;
&amp;lt;button class=&quot;navbar-toggler&quot; type=&quot;button&quot; aria-label=&quot;Opening menu navigation&quot; ... &amp;gt;
&amp;lt;span class=&quot;navbar-toggler-icon&quot;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/button&amp;gt;
&lt;/code&gt; &lt;/pre&gt;
&lt;p&gt;This hamburger menu button has a name: &amp;quot;Opening menu navigation&amp;quot;.&lt;br /&gt;
But we could also use &lt;code&gt;aria-labelledby&lt;/code&gt; to reference another element of the page like name:&lt;/p&gt;
&lt;pre&gt; &lt;code class=&quot;html&quot;&gt;
&amp;lt;input type=&quot;search&quot; aria-labelledby=&quot;this&quot;&amp;gt;
&amp;lt;button id=&quot;this&quot;&amp;gt;Search the site&amp;lt;/button&amp;gt;
&lt;/code&gt; &lt;/pre&gt;
&lt;p&gt;When taking focus on the field, the screen reader announces &amp;quot;Search on the site edit&amp;quot;.&lt;/p&gt;
&lt;p&gt;More details on &lt;a href=&quot;https://a11y-guidelines.orange.com/en/articles/aria-attributes-that-can-save-you/&quot;&gt;&amp;quot;The attributes &lt;abbr&gt;ARIA&lt;/abbr&gt; that can save you&amp;quot;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;sources&quot;&gt;Sources &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/accessible-name/#sources&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/accname-1.1/&quot;&gt; Accessible Name and Description Computation 1.1 &lt;/a&gt; by the Accessible Rich Internet Applications Working Group&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://simplyaccessible.com/article/accessible-name/&quot;&gt; Demystifying Accessible Name &lt;/a&gt; by Joe Watkins&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.paciellogroup.com/blog/2017/04/what-is-an-accessible-name/&quot;&gt; What is an accessible name? &lt;/a&gt; by Léonie Watson&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Use ARIA for status messages</title>
    <link href="https://a11y-guidelines.orange.com/en/articles/aria-status-messages/"/>
    <updated>2019-02-20T00:00:00Z</updated>
    <id>https://a11y-guidelines.orange.com/en/articles/aria-status-messages/</id>
    <content type="html">&lt;h1&gt;Use &lt;abbr&gt;ARIA&lt;/abbr&gt; for status messages&lt;/h1&gt;
&lt;h2 id=&quot;status-message-and-accessibility&quot;&gt;Status message and accessibility &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/aria-status-messages/#status-message-and-accessibility&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The WCAG 2.1 criterion &lt;a href=&quot;https://www.w3.org/TR/WCAG21/#status-messages&quot;&gt;4.1.3 Status Messages&lt;/a&gt; requires that important informations for the user, which do not induce a change of context (no opening of a new window, no focus on the content, no modification of the content or the viewport), are seen via properties and roles (&lt;abbr&gt;ARIA&lt;/abbr&gt;) by anyone using &lt;abbr&gt;AT&lt;/abbr&gt; without taking focus on the message.&lt;/p&gt;
&lt;h2 id=&quot;some-examples-of-status-messages&quot;&gt;Some examples of status messages &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/aria-status-messages/#some-examples-of-status-messages&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When a user presses a search button, the content of the page is updated asynchronously to add the search results displayed in a region below the search button. The message &amp;quot;XX results found&amp;quot; is at the top of this new content. A screen reader will have to announce &amp;quot;XX results have been found&amp;quot;. In this case, the information provided to the user is important and must be given immediately, so we will use the role &lt;code&gt;&amp;quot;alert&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;h2 role=&amp;quot;alert&amp;quot;&amp;gt;
    5 results were found
&amp;lt;/h2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When a user has chosen an item, presses an &amp;quot;Add to cart&amp;quot; button, a textual mention &amp;quot;1 item added, 4 items in the cart&amp;quot; appears temporarily near the shopping cart icon. A screen reader will have to announce &amp;quot;an item added to the cart, the cart currently contains 4 items&amp;quot;. Here, the information to push to the user is less crucial than before so we will use the role &lt;code&gt;&amp;quot;status&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;p role=&amp;quot;status&amp;quot;&amp;gt;
    an item added to the cart, the cart currently contains 4 items
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once a user has activated a process for applying complex search filters, an icon symbolizing &amp;quot;pending&amp;quot;: an hourglass, a clock… appears on the screen. The screen reader announces &amp;quot;Application busy, load in progress&amp;quot;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div role=&amp;quot;alert&amp;quot;&amp;gt;
    Application busy, load in progress
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An application displays a progress bar to indicate the status of an update of a content item. The screen reader provides intermittent progress announcements: &amp;quot;10% updated&amp;quot; then &amp;quot;20% updated&amp;quot;…&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div role=&amp;quot;progressbar&amp;quot; aria-valuenow=&amp;quot;20&amp;quot; aria-valued=&amp;quot;0&amp;quot; aria-valuemax=&amp;quot;100&amp;quot;&amp;gt;
    20% updated
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After a user submits a form, text is added to the existing form as follows: &amp;quot;Your form has been submitted successfully.&amp;quot; The screen reader announces the same message.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div role=&amp;quot;alert&amp;quot;&amp;gt;
    Your form has been submitted successfully
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When a user fills out a form but some of the data entered is incorrect, text is added at the top of the existing form indicating &amp;quot;XX errors in the form&amp;quot;. The screen reader announces the message &amp;quot;Form not sent because XX validation errors&amp;quot; (this does not dispense with giving details of the error for each incorrectly filled field). The error information in the form is important and urgent, immediate, so we use the role &lt;code&gt;&amp;quot;alertdialog&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div role=&amp;quot;alertdialog&amp;quot; aria-labelledby=&amp;quot;errors&amp;quot;&amp;gt;
   &amp;lt;p id=&amp;quot;errors&amp;quot;&amp;gt;Form not sent because 2 validation errors&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once a user, in an online document management application, has inserted a new document in a directory, a toast notification (popup feedback message) displays the message &amp;quot;The YYY document is saved in the XXX directory&amp;quot; , which is also read by a screen reader.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;p role=&amp;quot;status&amp;quot;&amp;gt;
    The YYY document is saved in the XXX directory
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In an online mailing application, the user chosen from a recipient list to add / remove a new e-mail address, this recipient&#39;s e-mail address is displayed on the screen following the one already chosen for this message. The screen reader will have to announce the addition of this new email address. It should be understood that the text, email address, added / removed to the list may not be visible on the screen for some users of &lt;abbr&gt;AT&lt;/abbr&gt;. So, in order to give context to screen reader users, additional information is needed in the form of content not displayed but read by speech synthesis. As new information is added in a meaningful order and old information may disappear (another example could be a chat or chatbot), we use, here, the role &lt;code&gt;&amp;quot;log&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div role=&amp;quot;log&amp;quot;&amp;gt;
  &amp;lt;ol&amp;gt;
    &amp;lt;li&amp;gt;XX@YY.ZZ has been added&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;XX@YY.ZZ has been removed&amp;lt;/li&amp;gt;
  &amp;lt;/ol&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sometimes we want to provide messages only for screen readers, without having to display them visually. In this case too, you need to use these &lt;abbr&gt;ARIA&lt;/abbr&gt; roles to push the message to &lt;abbr&gt;AT&lt;/abbr&gt; and in particular to the screen readers without displaying them on the screen.&lt;/p&gt;
&lt;h2 id=&quot;status-messages-that-are-not&quot;&gt;Status messages that are not! &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/aria-status-messages/#status-messages-that-are-not&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The basic rule is that if the focus is moved or the context is returned to users of &lt;abbr&gt;AT&lt;/abbr&gt;, it is not a status message:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a modal that requires a user action, on which the focus is set&lt;/li&gt;
&lt;li&gt;during the appearance / disappearance of content following a user interaction which is also announced to &lt;abbr&gt;AT&lt;/abbr&gt; (for example, the screen reader is announced &amp;quot;open / closed&amp;quot; for a menu, an accordion)&lt;/li&gt;
&lt;li&gt;for a panel system, whose selected tab is announced at &lt;abbr&gt;AT&lt;/abbr&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Skip links best practices</title>
    <link href="https://a11y-guidelines.orange.com/en/articles/skip-links-best-practices/"/>
    <updated>2019-06-19T00:00:00Z</updated>
    <id>https://a11y-guidelines.orange.com/en/articles/skip-links-best-practices/</id>
    <content type="html">&lt;h1&gt;Skip links best practices&lt;/h1&gt;
&lt;h2 id=&quot;what-is-an-skip-link&quot;&gt;What is an skip link? &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/skip-links-best-practices/#what-is-an-skip-link&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;what-is-it&quot;&gt;What is it? &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/skip-links-best-practices/#what-is-it&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Skip links are shortcuts that allow you to directly access a content area or avoid some areas of the page, so you can navigate faster.&lt;/p&gt;
&lt;p&gt;We can distinguish 3 types of skip links:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;quick access links:&lt;/strong&gt; gathered at the top of the page to go to the main regions of the page: “Skip to menu”, “Skip to content”, “Skip to search”, for example&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;section skip links:&lt;/strong&gt; positioned before the region that they allow to jump: “Skip the section”, “Skip the chapter”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;In-page navigation links:&lt;/strong&gt; “Back to top”, for example&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These skip links allow the user to avoid parts of pages, if we navigate with the keyboard, or if it is difficult to locate content in a large page or even if scrolling thought the page is difficult.&lt;/p&gt;
&lt;h3 id=&quot;for-whom&quot;&gt;For whom? &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/skip-links-best-practices/#for-whom&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Skip links are valuable for many users:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Screen reader users or people unable to use the mouse, so they only navigate with the keyboard&lt;/li&gt;
&lt;li&gt;Users who are struggling to navigate a large page: motor impaired people (fatigability or motor limitations) or people on their smartphone (this is a way to spare the user from swiping to browse the page)&lt;/li&gt;
&lt;li&gt;the visually impaired, who use or not a screen magnifier, and have trouble having a global representation of the topology of the page&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;what-are-the-types-of-solutions&quot;&gt;What are the types of solutions? &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/skip-links-best-practices/#what-are-the-types-of-solutions&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Quick Links: The most common solution, is a series of links (usually between 1 and 6) positioned at the top of the page and embedded in the code just after the body tag. Each link points to a region, or any other important part of the page. They are, generally, defined with a font size smaller than the body text, or hidden by default and appearing only when keyboard navigation is detected or when listening to focus capture events.&lt;/li&gt;
&lt;li&gt;Skip links: These elements are positioned just before each page part or region to skip. They can be always visible or made visible, during keyboard navigation, on focus.&lt;/li&gt;
&lt;li&gt;“Back to top” internal navigation links: they are often pinned (CSS &lt;code&gt;sticky&lt;/code&gt; position) at the very bottom, right side of the viewport, always visible or appearing only when we&#39;re at the end of the vertical scrolling.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;what-are-the-best-practices&quot;&gt;What are the best practices? &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/skip-links-best-practices/#what-are-the-best-practices&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;when-should-skip-links-be-put-in-place&quot;&gt;When should skip links be put in place? &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/skip-links-best-practices/#when-should-skip-links-be-put-in-place&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first question to ask is: on my site, does the user need skip links?&lt;/p&gt;
&lt;p&gt;The main reasons for setting up skip links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the page is long&lt;/li&gt;
&lt;li&gt;navigation contains a lot of links&lt;/li&gt;
&lt;li&gt;the content has a lot of links (several navigation menus, footers acting as a site map, etc.)&lt;/li&gt;
&lt;li&gt;the page is divided into many different parts (portal, dashboard, etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;using-a-hybrid-solution&quot;&gt;Using a hybrid solution? &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/skip-links-best-practices/#using-a-hybrid-solution&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We have seen that the quick access links can be visible or hidden by default and can be displayed according to keyboard navigation. This last option often answers aesthetic problems. Nevertheless, it removes the benefit that these links could bring to other users who do not use the keyboard (users of software magnifiers for example). One solution, which would reconcile the advantages of the two techniques, would be to position a discrete but affording button at the top of the page, to trigger on demand the opening and closing of the quick access links panel. We could also think of a horizontal bar visible at the top of the page opening and disappearing when scrolling down the page.&lt;/p&gt;
&lt;p&gt;Whatever the solution, the skip links must be visible (as far as possible) and usable by everyone!&lt;/p&gt;
&lt;p&gt;For any comments, suggestions, feel free to view or create an issue on our &lt;a href=&quot;https://github.com/Orange-OpenSource/a11y-guidelines/issues&quot;&gt; github account &lt;/a&gt;) .&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The aria-live attribute and the role alert</title>
    <link href="https://a11y-guidelines.orange.com/en/articles/aria-live-alert/"/>
    <updated>2020-01-08T00:00:00Z</updated>
    <id>https://a11y-guidelines.orange.com/en/articles/aria-live-alert/</id>
    <content type="html">&lt;h1&gt;The aria-live attribute and the role alert&lt;/h1&gt;
&lt;p&gt;Users who navigate using a screen reader are not always aware of changes made on the page. When information is updated or when a message appears, it is sometimes necessary to make the screen reader speak to inform the user. To do this, the &lt;abbr&gt;ARIA&lt;/abbr&gt; language has the role &lt;code&gt;alert&lt;/code&gt; and the attribute&lt;code&gt; aria-live&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;the-role-alert&quot;&gt;The role alert &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/aria-live-alert/#the-role-alert&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Positioned on an HTML element, this allows you to tell the screen reader to vocalize the element automatically when it is created. However, be sure to use this role only in appropriate cases, as clearly stated in the [Mozilla MDN] documentation (&lt;a href=&quot;https://developer.mozilla.org/fr/docs/Accessibilit%C3%A9/ARIA/Techniques_ARIA/&quot;&gt;https://developer.mozilla.org/fr/docs/Accessibilité/ARIA/Techniques_ARIA/&lt;/a&gt; Use_the_r% C3% B4le_alert). Due to its intrusive nature, role alert should be used sparingly and only in situations where the user&#39;s attention is immediately required. Less urgent dynamic changes should use a less aggressive method, such as &lt;code&gt;aria-live=&amp;quot;polite&amp;quot;&lt;/code&gt; or other live zone roles.&lt;/p&gt;
&lt;p&gt;To trigger an alert, several methods are possible, with a support that differ depending on the browser and screen reader pair used. You can read [Steve Faulkner&#39;s article] (&lt;a href=&quot;https://developer.paciellogroup.com/blog/2017/04/aria-alert-support/&quot;&gt;https://developer.paciellogroup.com/blog/2017/04/aria-alert-support/&lt;/a&gt;) on this subject.&lt;/p&gt;
&lt;p&gt;Here are some examples of methods that are well supported.&lt;/p&gt;
&lt;h3 id=&quot;create-a-new-element-in-the-dom&quot;&gt;Create a new element in the DOM &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/aria-live-alert/#create-a-new-element-in-the-dom&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can trigger an alert by inserting a new element in the &lt;abbr&gt;DOM&lt;/abbr&gt; via Javascript.&lt;/p&gt;
&lt;pre&gt; &lt;code class=&quot;html&quot;&gt; &amp;lt;span role=&quot;alert&quot;&amp;gt; This is an alert message. &amp;lt;/span&amp;gt; &lt;/code&gt; &lt;/pre&gt;
&lt;h3 id=&quot;add-a-role-alert-on-an-existing-element&quot;&gt;Add a role alert on an existing element &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/aria-live-alert/#add-a-role-alert-on-an-existing-element&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The triggering of an alert can also be done by adding a &lt;code&gt;role=&amp;quot;alert&amp;quot;&lt;/code&gt; dynamically to an existing element via Javascript.&lt;/p&gt;
&lt;pre&gt; &lt;code class=&quot;js&quot;&gt;
document.getElementById(&#39;alert&#39;).setAttribute(&quot;role&quot;, &quot;alert&quot;);
&lt;/code&gt; &lt;/pre&gt;
&lt;h3 id=&quot;using-innerhtml&quot;&gt;Using innerHTML &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/aria-live-alert/#using-innerhtml&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Create an alert via the &lt;code&gt;innerHTML&lt;/code&gt; property.&lt;/p&gt;
&lt;pre&gt; &lt;code class=&quot;js&quot;&gt;
element.innerHTML = &#39;&amp;lt;div role =&quot;alert&quot;&amp;gt;This is an alert&amp;lt;/div&amp;gt;&#39;;
&lt;/code&gt; &lt;/pre&gt;
&lt;h2 id=&quot;the-aria-live-attribute&quot;&gt;The &lt;code&gt;aria-live&lt;/code&gt; attribute &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/aria-live-alert/#the-aria-live-attribute&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Positioned on an HTML element, the &lt;code&gt;aria-live&lt;/code&gt; attribute is used to indicate to the screen reader that any modification made to its content will result in vocalization by the screen reader.&lt;/p&gt;
&lt;p&gt;Three values ​​are possible:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Off: no vocalization&lt;/li&gt;
&lt;li&gt;Polite: the vocalization will take place when the screen reader has finished the current task&lt;/li&gt;
&lt;li&gt;Assertive: the screen reader interrupts the current task to inform the user&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is strongly recommended that the &lt;code&gt;aria-live&lt;/code&gt; attribute be set on the element as soon as the page is loaded to maximize compatibility with different browsers and screen readers.&lt;/p&gt;
&lt;pre&gt; &lt;code class=&quot;html&quot;&gt;
&amp;lt;span aria-live=&quot;polite&quot;&amp;gt;5 selected items&amp;lt;/span&amp;gt;
&lt;/code&gt; &lt;/pre&gt;
&lt;p&gt;Additional attributes allow fine modification of the default behavior of &lt;code&gt;aria-live&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;aria-atomic:&lt;/strong&gt; true or false (default), used to indicate whether the whole of the live zone must be read (true) or only the modified part (false).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;aria-relevant:&lt;/strong&gt; indicates which type of change triggers a vocalization, possible values: additions (default), removals, all.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, to be complete, know that the &lt;abbr&gt;ARIA&lt;/abbr&gt; language also provides for some specific roles, &lt;strong&gt;status&lt;/strong&gt; and &lt;strong&gt;log&lt;/strong&gt; in particular which can be useful in certain cases (status bar, logging, chat...) and which, for the moment, must be used in addition to the &lt;code&gt;aria-live&lt;/code&gt; attribute to maximize support by the different tools. You can find more info on these roles in the links below.&lt;/p&gt;
&lt;h2 id=&quot;references&quot;&gt;References &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/aria-live-alert/#references&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/fr/docs/Accessibilit%C3%A9/ARIA/Techniques_ARIA/Utiliser_le_role_alert&quot;&gt;Use of the alert role&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/fr/docs/Accessibilit%C3%A9/ARIA/Zones_live_ARIA&quot;&gt;ARIA live zones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/fr/docs/Accessibilit%C3%A9/ARIA/Techniques_ARIA/Utiliser_le_role_log&quot;&gt;Use the log role&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/fr/docs/Accessibilit%C3%A9/ARIA/Techniques_ARIA/Utiliser_le_role_status&quot;&gt;Use the status role&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Some best practices for downloading links</title>
    <link href="https://a11y-guidelines.orange.com/en/articles/download-links/"/>
    <updated>2020-09-01T00:00:00Z</updated>
    <id>https://a11y-guidelines.orange.com/en/articles/download-links/</id>
    <content type="html">&lt;h1&gt;Best practices for download links&lt;/h1&gt;
&lt;p&gt;There are different types of links: &lt;a href=&quot;https://a11y-guidelines.orange.com/en/web/develop/general-navigation&quot;&gt;classic links&lt;/a&gt; allowing to reach a new page, [skip links] (/en/articles/skip-links-best-practices) allowing to move within the page and finally those which interest us in this article, the links allowing to download a file.&lt;/p&gt;
&lt;p&gt;A link to download a file should respect the following rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;its title must be explicit, it must also specify the type and size of the file&lt;/li&gt;
&lt;li&gt;its title must specify the language of the document when it is written in a language different from that of the current page&lt;/li&gt;
&lt;li&gt;this link must be made using a &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag (and not a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; tag)&lt;/li&gt;
&lt;li&gt;this link must open in the current window (no &lt;code&gt;target&lt;/code&gt; attribute to open in a new tab)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition, to improve accessibility, providing these informations will allow the user to avoid unnecessary downloads, which is also eco-responsible (green) best practice.&lt;/p&gt;
&lt;h2 id=&quot;valid-examples&quot;&gt;Valid examples &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/download-links/#valid-examples&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here is an example of a link with the necessary information:&lt;/p&gt;
&lt;p&gt;Download the &lt;a href=&quot;https://a11y-guidelines.orange.com/en/articles/download-links/#&quot;&gt;complete review 2020 (PDF, 1.5 MB)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is important that this additional information is present in the title of the link and not just after the link (especially for people who use a screen reader). That said, for aesthetic reasons, it is possible to ensure that the additional information is not underlined, for example:&lt;/p&gt;
&lt;p&gt;Download the &lt;a href=&quot;https://a11y-guidelines.orange.com/en/articles/download-links/#&quot; style=&quot;text-decoration:none&quot;&gt;&lt;span style=&quot;text-decoration:underline&quot;&gt;complete review 2020&lt;/span&gt; (PDF, 1.5Mo)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;about-the-units&quot;&gt;About the units &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/download-links/#about-the-units&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In English, the units used to express the weight of the files are written in capital letters (KbB, MB, GB...).&lt;/p&gt;
&lt;h2 id=&quot;file-language&quot;&gt;File language &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/download-links/#file-language&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For the links allowing to download a document in a language other than that of the current page, it is important to specify it.&lt;/p&gt;
&lt;p&gt;Examples of documents in French on a English site:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://a11y-guidelines.orange.com/en/articles/download-links/#&quot;&gt;&lt;span lang=&quot;fr&quot;&gt;Bilan complet&lt;/span&gt; (French, DOC, 800 KB) &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://a11y-guidelines.orange.com/en/articles/download-links/#&quot;&gt;&lt;span&gt;Manuel utilisateur&lt;/span&gt; (French, PDF, 1.2 MB) &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;a-small-image-for-decoration-but-not-only&quot;&gt;A small image for decoration, but not only &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/download-links/#a-small-image-for-decoration-but-not-only&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If the file type is known, a small icon next to the file allows the user to identify it more quickly:&lt;br /&gt;
&lt;a style=&quot;background-image: url (/images/icons/pdf-icon.svg); background-size:contain; background-repeat:no-repeat; padding-left:2rem;&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/download-links/#&quot;&gt;complete review 2020 (PDF, 1.5 MB)&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Best practices for the accessibility of an autocompletion component</title>
    <link href="https://a11y-guidelines.orange.com/en/articles/autocomplete-component/"/>
    <updated>2020-12-23T00:00:00Z</updated>
    <id>https://a11y-guidelines.orange.com/en/articles/autocomplete-component/</id>
    <content type="html">&lt;h1&gt;Guidelines for the accessibility of an autocompletion component&lt;/h1&gt;
&lt;p&gt;Autocomplete components are increasingly common in user interfaces, yet they often remain inaccessible.&lt;/p&gt;
&lt;p&gt;We therefore decided to carry out an inventory in order to define several functional guidelines.&lt;/p&gt;
&lt;p&gt;The end goal is to offer a ready-to-use component for projects.&lt;/p&gt;
&lt;p&gt;In this article, we present our method and the guidelines adopted.&lt;/p&gt;
&lt;h2 id=&quot;our-method&quot;&gt;Our method &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/autocomplete-component/#our-method&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We want to build on existing patterns wherever possible.&lt;/p&gt;
&lt;p&gt;First, upstream audits are carried out on several components by an accessibility expert in order to ensure an initial selection.&lt;/p&gt;
&lt;p&gt;The most usable components are then subjected to user tests.&lt;/p&gt;
&lt;p&gt;At the end of the benchmark, the selected implementations are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://alphagov.github.io/accessible-autocomplete/examples/&quot; target=&quot;_blank&quot; title=&quot;GOV UK, accessible autocomplete (new window)&quot;&gt;GOV UK, accessible autocomplete&lt;span class=&quot;sr-only&quot;&gt; (new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/wai-aria-practices-1.1/#combobox&quot; target=&quot;_blank&quot; title=&quot;Pattern WAI ARIA 1.1, combobox (new window)&quot;&gt; Pattern WAI ARIA 1.1, combobox&lt;span class=&quot;sr-only&quot;&gt; (new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;user-tests&quot;&gt;User tests &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/autocomplete-component/#user-tests&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We contacted Orange employees with disabilities.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Documentalist, JAWS and IE11 user&lt;/li&gt;
&lt;li&gt;Developer, user of NVDA and Firefox ESR&lt;/li&gt;
&lt;li&gt;Phone advisor, ZoomText and IE11 user&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JAWS 19 (screen reader) and Zoomtext (screen magnifier) ​​are the technical aids provided to blind and partially sighted employees.&lt;/p&gt;
&lt;p&gt;Internet Explorer 11 and Firefox ESR are the default browsers installed on workstations.&lt;br /&gt;
Business applications and intranets are developed for these browsers.&lt;/p&gt;
&lt;p&gt;The JAWS / IE and Zoomtext / IE combinations are the pairs tested as a priority during an evaluation of internal projects, as they are the most common among our targeted users.&lt;/p&gt;
&lt;p&gt;We&#39;ve created a simple, form-based scenario, each using a different version of the component:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;abbr title=&quot;UK government website&quot;&gt; GOV UK &lt;span class=&quot;sr-only&quot;&gt;UK government website&lt;/span&gt;&lt;/abbr&gt; accessible autocomplete&lt;/li&gt;
&lt;li&gt;WAI ARIA 1.1 pattern, Combobox with Listbox, example 1&lt;/li&gt;
&lt;li&gt;WAI ARIA 1.1 pattern, Combobox with Listbox, example 2&lt;/li&gt;
&lt;li&gt;WAI ARIA 1.1 pattern, Combobox with Listbox, example 3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://a11y-guidelines.orange.com/en/articles/images/page-test.png&quot; alt=&quot;&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;summary-of-feedbacks&quot;&gt;Summary of feedbacks &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/autocomplete-component/#summary-of-feedbacks&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;with JAWS:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the ARIA versions, examples 2 and 3, the user is not informed that this is an autocompletion field.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;with NVDA:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The user prefers the GOV UK version, because, not only, does the component indicate the minimum number of characters to enter (2 or 3 letters), but also, the number of results displayed.&lt;/li&gt;
&lt;li&gt;From example 1 of the ARIA 1.1 pattern, it is by accident while pointing down that he discovers proposals.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;You can completely skip the auto-completion&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;In examples 2 and 3 of the ARIA 1.1 pattern, the user perceives the notion of autocompletion, but no information is given to him after entering 2 or 3 letters (whether it is the number of porposals, or the proposals themselves) .&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;with ZoomText:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The user does not see any significant differences between the four implementations.&lt;/p&gt;
&lt;h3 id=&quot;mobile-tests&quot;&gt;Mobile tests &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/autocomplete-component/#mobile-tests&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In addition, mobile tests are carried out by accessibility experts on the same test pages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tested versions:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IOS 13 + Safari + VoiceOver&lt;/li&gt;
&lt;li&gt;Android 6.0.1+ Chrome + Talkback&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On these two environments, the conclusion is the same:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GOV UK accessible autocomplete&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Behavior identical to the desktop (all vocalizations are started, wether it is when entering the control or when browsing the list)&lt;/li&gt;
&lt;li&gt;Navigation in the list is ok, and selection of the desired item also ok&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;WAI ARIA 1.1 Combobox pattern with Listbox&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The list of proposals is not displayed systematically&lt;/li&gt;
&lt;li&gt;When the list is displayed, no automatic vocalization is started&lt;/li&gt;
&lt;li&gt;The user does not know that are the suggested proposals&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;conclusion-of-tests&quot;&gt;Conclusion of tests &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/autocomplete-component/#conclusion-of-tests&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It appears that with the assistive technologies and browers tested, the implementation of GOV UK is more robust.&lt;/p&gt;
&lt;p&gt;The ARIA pattern relies on focus management by &lt;code&gt;aria-activedescendant&lt;/code&gt;, unlike the GOV UK component which relies on the &lt;code&gt;focus()&lt;/code&gt;method.&lt;/p&gt;
&lt;p&gt;It&#39;s possible that these different implementations that impacts the behavior on mobile.&lt;/p&gt;
&lt;p&gt;It is, in any case, a significant difference between the two components.&lt;/p&gt;
&lt;p&gt;We also took the initiative to test the WAI ARIA 1.2 version of the combobox &lt;strong&gt;still in draft&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Here again the behavior on mobile is not the one expected, the list of proposals is not perceived.&lt;/p&gt;
&lt;p&gt;However, for the rest the pattern used is similar to the GOV UK implementation (for example the &lt;code&gt;role=&amp;quot;combobox&amp;quot;&lt;/code&gt; is now positioned directly on the &lt;code&gt;input&lt;/code&gt;, unlike in the ARIA version 1.1).&lt;/p&gt;
&lt;p&gt;At this stage, taking into account user feedback and blockages on mobile, we are orienting our choice on the GOV UK component, moreover reinforced by the evolution that the ARIA 1.2 pattern seems to take.&lt;/p&gt;
&lt;h2 id=&quot;guidelines&quot;&gt;Guidelines &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/autocomplete-component/#guidelines&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You understand, we relied heavily on the GOV UK component.&lt;/p&gt;
&lt;p&gt;The differences with the initial component are commented directly in the guidelines.&lt;/p&gt;
&lt;h3 id=&quot;combobox&quot;&gt;Combobox &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/autocomplete-component/#combobox&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Input text with the following attributes:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://a11y-guidelines.orange.com/en/articles/images/autocompletion-combobox.png&quot; alt=&quot;&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;role=&amp;quot;combobox&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aria-expanded=true/false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;autocomplete=&amp;quot;off&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aria-autocomplete=&amp;quot;list&amp;quot;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;The value &lt;code&gt;list&lt;/code&gt; corresponds to the current behavior of the component that we have to produce, other values ​​are however possible (&lt;code&gt;inline&lt;/code&gt; and &lt;code&gt;both&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inline&lt;/code&gt; = automatic suggestion in the input field&lt;/li&gt;
&lt;li&gt;&lt;code&gt;both&lt;/code&gt; = automatic suggestion in the input field + list of choices&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aria-control&lt;/code&gt; (ID of the listbox)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;**Notes **&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The role is directly positioned on the input, unlike the ARIA 1.1 implementation. and in accordance with the GOV UK and ARIA 1.2 implementation (draft),&lt;/li&gt;
&lt;li&gt;On the other hand, we favor the use of &lt;code&gt;aria-control&lt;/code&gt; over&lt;code&gt; aria-owns&lt;/code&gt;, which seems more suitable with regard to the description of pattern.&lt;br /&gt;
More information in the article &lt;a href=&quot;https://www.levelaccess.com/differences-aria-1-0-1-1-changes/&quot; target=&quot;_blank&quot; title=&quot;Differences between ARIA 1.0 and 1.1: Changes (new window)&quot;&gt;Differences between ARIA 1.0 and 1.1: Changes &lt;span class=&quot;sr-only&quot;&gt;(new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;listbox&quot;&gt;Listbox &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/autocomplete-component/#listbox&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;UL element with the following attributes:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://a11y-guidelines.orange.com/en/articles/images/autocompletion-listbox.png&quot; alt=&quot;&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;role=&amp;quot;listbox&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aria-label&lt;/code&gt; (the value is identical to the label associated with the edit control)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;LI element with the following attributes:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;role=&amp;quot;option&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aria-posinset&lt;/code&gt; (item position in the list)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aria-setsize&lt;/code&gt; (total length of proposal elements list)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aria-selected=&amp;quot;true &amp;quot;&lt;/code&gt; (when an item is being selected)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tabindex=&amp;quot;-1&amp;quot;&lt;/code&gt; (the value -1 will allow management of the focus shift in a programmatic way)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;As a reminder, this solution turns out to be more robust than the management of the active element by the &lt;code&gt;aria-descendant&lt;/code&gt; attribute, more information:&lt;br /&gt;
a. &lt;a href=&quot;https://www.w3.org/TR/wai-aria-practices-1.2/#kbd_roving_tabindex&quot; target=&quot;_blank&quot; title=&quot;Focus management by tabindex (new window )&quot;&gt;Focus management by tabindex&lt;span class=&quot;sr-only&quot;&gt; (new window)&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;
b. &lt;a href=&quot;https://www.w3.org/TR/wai-aria-practices-1.2/#kbd_focus_activedescendant)&quot; target=&quot;_blank&quot; title=&quot;Focus management by aria-activedescendant (new window)&quot;&gt;Focus management by aria-activedescendant &lt;span class=&quot;sr-only&quot;&gt; (new window)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;As the list of propositions is refreshed dynamically, we preserve the &lt;code&gt;aria-posinset&lt;/code&gt; and&lt;code&gt; aria-setsize&lt;/code&gt; attributes, in order to provide an up-to-date list to the screen reader, regardless of the number of propositions.&lt;br /&gt;
This seems to be more robust in order to overcome any errors in the interpretation of screen readers.&lt;br /&gt;
Indeed, these could be misled in cases like this one, where the content of a list, and in particular the number of items, is dynamically updated.&lt;br /&gt;
For information, this implementation is not preserved in the ARIA 1.2 draft.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;feedback-messages&quot;&gt;Feedback messages &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/autocomplete-component/#feedback-messages&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A message to indicate the interactions, example from GOV UK:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;When results are available, use the up and down arrows to navigate through the proposals.&lt;br /&gt;
From a touch device, explore using a swipe&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;A message to indicate the minimum number of characters to enter&lt;/li&gt;
&lt;li&gt;A message to indicate the number of results and the item being selected:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;3 results are available. Afghanistan 1 of 3 is selected&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We preserve the feedbacks put in place by GOV UK. They have proven to be relevant in guiding users in using the component.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Integration&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;DIV&lt;/code&gt; element is present in the &lt;abbr title=&quot;Document Object Model&quot;&gt; DOM &lt;/abbr&gt; as soon as the page loads:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;role=&amp;quot;status&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aria-live=&amp;quot;polite&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aria-atomic=&amp;quot;true&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class=&amp;quot;sr-only&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DIV&lt;/code&gt; element with the &lt;code&gt;aria-live&lt;/code&gt; attribute is present in the DOM as soon as the page loads.&lt;/p&gt;
&lt;p&gt;We thus make sure that the assistive technologies correctly identify this dynamic zone during their analysis of the DOM.&lt;/p&gt;
&lt;p&gt;At initialization, the &lt;code&gt;DIV&lt;/code&gt; is empty to avoid unwanted vocalization.&lt;/p&gt;
&lt;p&gt;The messages are dynamically integrated according to the actions of the user.&lt;/p&gt;
&lt;p&gt;A message is returned as soon as it is included in the LIVE area.&lt;/p&gt;
&lt;h3 id=&quot;interactions&quot;&gt;Interactions &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/autocomplete-component/#interactions&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Enter the proposals:&lt;/strong&gt; down arrows (input to first item)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Navigation between the proposals:&lt;/strong&gt; up and down arrows (no tabulation)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exit proposals:&lt;/strong&gt; up arrows (first item to input)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Select a proposal:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Space or Entrance&lt;/li&gt;
&lt;li&gt;Automatically reposition the focus in the input after selection&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Esc key:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Close the &lt;code&gt;listbox&lt;/code&gt; and reposition focus in the&lt;code&gt; input&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;No item is selected&lt;/li&gt;
&lt;li&gt;If a selection is already made, the focus is repositioned in the control without emptying it&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Right / left arrow:&lt;/strong&gt; reposition cursor in the combobox without closing the listbox&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TAB key from the combobox:&lt;/strong&gt; continue with the focus course, so the user is positioned on the next element eligible for focus (&lt;code&gt;input&lt;/code&gt;,&lt;code&gt; button&lt;/code&gt;, &lt;code&gt;link&lt;/code&gt; etc.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TAB key from the listbox:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Continue the focus course&lt;/li&gt;
&lt;li&gt;The combobox is filled in with the value currently selected when pressing the TAB key&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SHIFT + TAB shortcut from the listbox:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Continue the focus course in the opposite direction&lt;/li&gt;
&lt;li&gt;The combobox is filled in with the value currently selected when pressing the TAB key&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When the TAB key is used from the listbox, the currently selected value is automatically added to the combobox, before exiting the component.&lt;br /&gt;
Here we are choosing to align with the native behavior of autocompletion.&lt;br /&gt;
The GOV UK component does not follow this behavior.&lt;/li&gt;
&lt;li&gt;The arrows allow you to reposition yourself in the combobox, again we choose to align ourselves with the native behavior (unlike this time the ARIA 1.2 pattern draft )&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;resources&quot;&gt;Resources &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/autocomplete-component/#resources&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://alphagov.github.io/accessible-autocomplete/examples/&quot; target=&quot;_blank&quot; title=&quot;GOV UK, accessible autocomplete (new window)&quot;&gt; GOV UK, &lt;span lang=&quot; en &quot;&gt; accessible autocomplete &lt;/span&gt; &lt;span class=&quot; sr-only &quot;&gt; (new window) &lt;/span&gt; &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://designnotes.blog.gov.uk/2017/04/20/were-building-an-autocomplete/&quot; target=&quot;_ blank&quot; title=&quot;Article We&#39;re building an autocomplete (new window ) &quot;&gt; Article &lt;span lang=&quot; en &quot;&gt; We&#39;re building an autocomplete &lt;/span&gt; &lt;span class=&quot; sr-only &quot;&gt; (new window) &lt;/span&gt; &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/wai-aria-practices-1.1/#combobox&quot; target=&quot;_blank&quot; title=&quot;WAI-ARIA Authoring Practices 1.1 Combobox (new window)&quot;&gt; WAI-ARIA Authoring Practices 1.1 Combobox  &lt;span class=&quot;sr-only&quot;&gt; (new window) &lt;/span&gt; &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pidila.gitlab.io/select-a11y/&quot; target=&quot;_blank&quot; title=&quot;Select-a11y-demo (new window)&quot;&gt; Select- a11y - demo  &lt;span class=&quot;sr-only&quot;&gt; (new window) &lt;/span&gt; &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.24a11y.com/2019/select-your-poison/&quot; target=&quot;_blank&quot; title=&quot;Select your poison (new window)&quot;&gt; Select your poison  &lt;span class=&quot;sr-only&quot;&gt; (new window) &lt;/span&gt; &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.24a11y.com/2019/select-your-poison-part-2/&quot; target=&quot;_blank&quot; title=&quot;Select your poison part 2 (new window)&quot;&gt; Select your poison part 2  &lt;span class=&quot;sr-only&quot;&gt; (new window) &lt;/span&gt; &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.levelaccess.com/differences-aria-1-0-1-1-changes/&quot; target=&quot;_ blank&quot; title=&quot;Differences between ARIA 1.0 and 1.1: Changes (new window ) &quot;&gt; &lt;span lang=&quot; en &quot;&gt; Differences between ARIA 1.0 and 1.1: Changes &lt;/span&gt; &lt;span class=&quot; sr-only &quot;&gt; (new window) &lt;/span&gt; &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Some best practices for SVG images</title>
    <link href="https://a11y-guidelines.orange.com/en/articles/accessible-svg/"/>
    <updated>2021-01-01T00:00:00Z</updated>
    <id>https://a11y-guidelines.orange.com/en/articles/accessible-svg/</id>
    <content type="html">&lt;h1&gt;SVG images are used more and more on the web but what about their accessibility?&lt;/h1&gt;
&lt;p&gt;Here are some ideas knowing that the support for browsers and assistive technologies evolves very quickly!&lt;br /&gt;
Important: So remember to test your implementations on the browsers/assistive technologies targets the most used by your users, whatever the solution for which you choose.&lt;/p&gt;
&lt;h2 id=&quot;decorative-image&quot;&gt;Decorative image &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/accessible-svg/#decorative-image&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;svg-in-an-img-tag&quot;&gt;SVG in an &lt;code&gt;img&lt;/code&gt; tag &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/accessible-svg/#svg-in-an-img-tag&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt; &lt;code class=&quot;html&quot;&gt;
&amp;lt;img src=&quot;XXX.svg&quot; alt=&quot;&quot; aria-hidden=&quot;true&quot; /&amp;gt;
&lt;/code&gt; &lt;/pre&gt;
&lt;h3 id=&quot;svg-online-inline&quot;&gt;SVG online (inline) &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/accessible-svg/#svg-online-inline&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt; &lt;code class=&quot;html&quot;&gt;
&amp;lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot;&amp;gt;
...
&amp;lt;/svg&amp;gt;
&lt;/code&gt; &lt;/pre&gt;
&lt;p&gt;We use &lt;code&gt;focusable =&amp;quot;false&amp;quot;&lt;/code&gt; to avoid any focus on SVG by &lt;abbr&gt;IE&lt;/abbr&gt; (&amp;gt; 10 and Edge)&lt;/p&gt;
&lt;p&gt;In addition, you must make sure that the &lt;code&gt;svg&lt;/code&gt; tag or one of its children (&lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt;...) does not have any attribute to provide it with an accessible name (&lt;code&gt; title&lt;/code&gt;, &lt;code&gt;desc &lt;/code&gt;,&lt;code&gt;aria- *&lt;/code&gt;…).&lt;/p&gt;
&lt;h2 id=&quot;informative-image-without-link-or-button&quot;&gt;Informative image (without link or button) &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/accessible-svg/#informative-image-without-link-or-button&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;svg-in-an-img-tag-2&quot;&gt;SVG in an &lt;code&gt;img&lt;/code&gt; tag &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/accessible-svg/#svg-in-an-img-tag-2&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt; &lt;code class=&quot;html&quot;&gt;
&amp;lt;img src =&quot;XXX.svg&quot; alt=&quot;alternative text&quot; role=&quot;img&quot; /&amp;gt;
&lt;/code&gt; &lt;/pre&gt;
&lt;p&gt;second choice:&lt;/p&gt;
&lt;pre&gt; &lt;code class=&quot;html&quot;&gt;
&amp;lt;img src=&quot;XXX.svg&quot; aria-label=&quot;replacement text&quot; role=&quot;img&quot; /&amp;gt;
&lt;/code&gt; &lt;/pre&gt;
&lt;p&gt;We add &lt;code&gt;role=&amp;quot;img&amp;quot;&lt;/code&gt; to make sure that with macOS Safari, VoiceOver (old versions) announces &amp;quot;image&amp;quot;.&lt;/p&gt;
&lt;h4 id=&quot;svg-online-inline-2&quot;&gt;SVG online (inline) &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/accessible-svg/#svg-online-inline-2&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt; &lt;code class=&quot;html&quot;&gt;
&amp;lt;svg viewBox=&quot;0 0 440 540&quot; version=&quot;1.1&quot; role=&quot;img&quot;
  lang=&quot;fr&quot; xml:lang=&quot;fr&quot;
  aria-labelledby=&quot;title description&quot;&amp;gt;

  &amp;lt;title id=&quot;title&quot;&amp;gt;Gross revenue 2019&amp;lt;/title&amp;gt;

  &amp;lt;desc id=&quot;description&quot;&amp;gt;
    This diagram shows the income for the year 2019, as a percentage of the total and in absolute value. The total income is 20.3 million Euros and is divided into 6.9 million (34%) for the first quarter, 2.1 million (10%) for the second, 10.3 million for the third (51%) and 1 million in the last quarter (5%).
  &amp;lt;/desc&amp;gt;

  ...
&amp;lt;/svg&amp;gt;
&lt;/code&gt; &lt;/pre&gt;
&lt;p&gt;The best support for SVGs is to display them inline.&lt;/p&gt;
&lt;p&gt;You must use &lt;code&gt;aria-labelledby&lt;/code&gt; as the first choice by referencing the &amp;quot;title&amp;quot; and the &amp;quot;desc&amp;quot; (avoid &lt;code&gt;aria-describedby&lt;/code&gt; for the &amp;quot;desc&amp;quot;, still bad support) to ensure maximum support.&lt;br /&gt;
SVGs serving as a link or button&lt;/p&gt;
&lt;p&gt;Several possible choices:&lt;/p&gt;
&lt;pre&gt; &lt;code class=&quot;html&quot;&gt;
&amp;lt;button&amp;gt;
  &amp;lt;svg focusable=&quot;false&quot; aria-hidden=&quot;true&quot;&amp;gt; &amp;lt;! --...-- &amp;gt; &amp;lt;/svg&amp;gt;
  Search
&amp;lt;/button&amp;gt;

&amp;lt;a href=&quot;/Search&quot;&amp;gt;
  &amp;lt;svg focusable=&quot;false&quot; aria-hidden=&quot;true&quot;&amp;gt; &amp;lt;! --...-- &amp;gt; &amp;lt;/svg&amp;gt;
  Search
&amp;lt;/a&amp;gt;
&lt;/code&gt; &lt;/pre&gt;
&lt;p&gt;We use &lt;code&gt;focusable=&amp;quot;false&amp;quot;&lt;/code&gt; to avoid any focus on the SVG in addition to the link &lt;code&gt;a&lt;/code&gt;) by IE 10.&lt;br /&gt;
This is the best solution, the most robust but is not always possible to display a text (graphic / design / marketing constraint...).&lt;br /&gt;
So, here is an alternative that allows to visually hide the text for a button or a link while leaving it readable by assistive technologies via &lt;code&gt;aria-labelledby&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt; &lt;code class=&quot;html&quot;&gt;
&amp;lt;button aria-labelledby=&quot;label&quot;&amp;gt;

  &amp;lt;span id=&quot;label&quot; hidden&amp;gt;Search&amp;lt;/span&amp;gt;

  &amp;lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot;&amp;gt; &amp;lt;!--...--&amp;gt; &amp;lt;/svg&amp;gt;

&amp;lt;/button&amp;gt;
&lt;/code&gt; &lt;/pre&gt;
&lt;p&gt;Finally, these two following solutions are equivalent and in any case to be tested in your targeted navigation environments (browser / assistive technologies pairs).&lt;/p&gt;
&lt;pre&gt; &lt;code class=&quot;html&quot;&gt;
&amp;lt;button&amp;gt;
  &amp;lt;svg focusable=&quot;false&quot; aria-hidden=&quot;true&quot;&amp;gt; &amp;lt;! --...--&amp;gt; &amp;lt;/svg&amp;gt;
  &amp;lt;span class=&quot;sr-only&quot;&amp;gt; Search &amp;lt;/ span&amp;gt;
&amp;lt;/ button&amp;gt;

&amp;lt;a href=&quot;/ Search&quot;&amp;gt;
  &amp;lt;svg focusable=&quot;false&quot; aria-hidden=&quot;true&quot;&amp;gt; &amp;lt;! --...--&amp;gt; &amp;lt;/svg&amp;gt;
  &amp;lt;span class=&quot;sr-only&quot;&amp;gt; Search &amp;lt;/span&amp;gt;
&amp;lt;/ a&amp;gt;
&lt;/code&gt; &lt;/pre&gt;
&lt;p&gt;The sr-only class is used to hide the text except to technical help users (accessible masking).&lt;/p&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt; &lt;code class=&quot;html&quot;&gt;
&amp;lt;button aria-label=&quot;Search&quot;&amp;gt;
  &amp;lt;svg focusable=&quot;false&quot; aria-hidden=&quot;true&quot;&amp;gt; &amp;lt;! --...--&amp;gt; &amp;lt;/svg&amp;gt;
&amp;lt;/ button&amp;gt;

&amp;lt;a href=&quot;/ Search&quot; aria-label=&quot;Search&quot;&amp;gt;
  &amp;lt;svg focusable=&quot;false&quot; aria-hidden=&quot;true&quot;&amp;gt; &amp;lt;! --...--&amp;gt; &amp;lt;/svg&amp;gt;
&amp;lt;/ a&amp;gt;

or, but much more risky ...

&amp;lt;button&amp;gt;
  &amp;lt;svg aria-labelledby=&quot;search-icon-title&quot; focusable=&quot;false&quot; role=”img”&amp;gt;
    &amp;lt;title id=&quot;search-icon-title&quot;&amp;gt;Search&amp;lt;/title&amp;gt;
    &amp;lt;! --...--&amp;gt;
  &amp;lt;/svg&amp;gt;
&amp;lt;/ button&amp;gt;
&lt;/code&gt; &lt;/pre&gt;
&lt;h2 id=&quot;last-words&quot;&gt;Last words ... &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/accessible-svg/#last-words&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In short, one tip for accessible SVG would be TEST and test again!&lt;/p&gt;
&lt;h2 id=&quot;ressources-articles-that-have-helped-me-a-lot&quot;&gt;Ressources (articles that have helped me a lot) &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/accessible-svg/#ressources-articles-that-have-helped-me-a-lot&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.deque.com/blog/creating-accessible-svgs/&quot;&gt;https://www.deque.com/blog/creating-accessible-svgs/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://weboverhauls.github.io/demos/svg/&quot;&gt;https://weboverhauls.github.io/demos/svg/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scottohara.me/blog/2019/0&quot;&gt;https://www.scottohara.me/blog/2019/0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>#a11y technical watch, January-February 2021</title>
    <link href="https://a11y-guidelines.orange.com/en/articles/watch-january-february-2021/"/>
    <updated>2021-02-19T00:00:00Z</updated>
    <id>https://a11y-guidelines.orange.com/en/articles/watch-january-february-2021/</id>
    <content type="html">&lt;h1&gt;Digital accessibility watch January - February  2021&lt;/h1&gt;
&lt;p&gt;Big news, “W3C First Public Working Draft 21 January 2021” released, the future of a11y web and more. An introduction: &lt;a href=&quot;https://www.w3.org/WAI/standards-guidelines/wcag/wcag3-intro/&quot;&gt;https://www.w3.org/WAI/standards-guidelines/wcag/wcag3-intro/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And some articles to get an idea:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.deque.com/blog/first-public-working-draft-wcag-3/&quot;&gt;https://www.deque.com/blog/first-public-working-draft-wcag-3/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.deque.com/blog/public-working-draft-wcag-3-history/&quot;&gt;https://www.deque.com/blog/public-working-draft-wcag-3-history/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jspellman-77432.medium.com/an-insider-look-at-wcag-3-0-276e9b964a33&quot;&gt;https://jspellman-77432.medium.com/an-insider-look-at-wcag-3-0-276e9b964a33&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sheribyrnehaber.medium.com/silver-wcag-3-0-first-public-working-draft-released-15f765b9525e&quot;&gt;https://sheribyrnehaber.medium.com/silver-wcag-3-0-first-public-working-draft-released-15f765b9525e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jdsupra.com/legalnews/new-web-content-accessibility-standard-4698390/&quot;&gt;https://www.jdsupra.com/legalnews/new-web-content-accessibility-standard-4698390/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;accessibility-in-laws-standards-and-guidelines&quot;&gt;Accessibility in laws, standards and guidelines &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/watch-january-february-2021/#accessibility-in-laws-standards-and-guidelines&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Label in name WCAG 2.5.3, explained in detail: &lt;a href=&quot;https://css-tricks.com/whats-new-in-wcag-2-1-label-in-name/&quot;&gt;https://css-tricks.com/whats-new-in-wcag-2-1-label-in-name/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Message status 4.1.3 explanations: &lt;a href=&quot;https://www.digitala11y.com/understanding-sc-4-1-3-status-messages/&quot;&gt;https://www.digitala11y.com/understanding-sc-4-1-3-status-messages/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;feedback-and-accessibility&quot;&gt;Feedback and accessibility &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/watch-january-february-2021/#feedback-and-accessibility&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A message from a screen reader user for devs: &lt;a href=&quot;https://bighack.org/message-to-web-developers-from-a-screen-reader-user/&quot;&gt;https://bighack.org/message-to-web-developers-from-a-screen-reader-user/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Semantic HTML or CSS display: &lt;a href=&quot;https://adrianroselli.com/2020/10/a11yto-conf-css-display-properties-versus-html-semantics.html&quot;&gt;https://adrianroselli.com/2020/10/a11yto-conf-css-display-properties-versus-html-semantics.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;accessibility-strategy&quot;&gt;Accessibility strategy &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/watch-january-february-2021/#accessibility-strategy&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Make maps accessible, all points of vigilance: &lt;a href=&quot;https://www.benjystanton.co.uk/blog/a-plan-for-accessible-maps/&quot;&gt;https://www.benjystanton.co.uk/blog/a-plan-for-accessible-maps/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Reduce animations via CSS, JS and React, read: &lt;a href=&quot;https://letsbuildui.dev/articles/reducing-motion-in-animations&quot;&gt;https://letsbuildui.dev/articles/reducing-motion-in-animations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;test-accessibility&quot;&gt;Test accessibility &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/watch-january-february-2021/#test-accessibility&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The browser developer tools to test accessibility: &lt;a href=&quot;https://christianheilmann.com/2021/01/11/seven-ways-to-test-for-accessibility-of-your-web-site&quot;&gt;https://christianheilmann.com/2021/01/11/seven-ways-to-test-for-accessibility-of-your-web-site&lt;/a&gt; -with-browser-developer-tools /&lt;/li&gt;
&lt;li&gt;The problem of screen reader testing for devs: &lt;a href=&quot;https://jaketracey.com/a-developers-perspective-the-problem-with-screen-reader-testing/&quot;&gt;https://jaketracey.com/a-developers-perspective-the-problem-with-screen-reader-testing/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Developer test tools, succinct but takes stock: &lt;a href=&quot;https://techosmo.com/hacker-noon/winning-at-web-accessibility-in-2021-with-these-tools-for-developers&quot;&gt;https://techosmo.com/hacker-noon/winning-at-web-accessibility-in-2021-with-these-tools-for-developers&lt;/a&gt; /&lt;/li&gt;
&lt;li&gt;Contrast ratio calculator for WCAG3: &lt;a href=&quot;https://www.myndex.com/APCA/&quot;&gt;https://www.myndex.com/APCA/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;accessibility-technical-points&quot;&gt;Accessibility technical points &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/watch-january-february-2021/#accessibility-technical-points&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;aria-description&lt;/code&gt;, neat: &lt;a href=&quot;https://html5accessibility.com/stuff/2021/02/09/aria-description-by-public-demand-and-to-thunderous-applause/&quot;&gt;https://html5accessibility.com/stuff/2021/02/09/aria-description-by-public-demand-and-to-thunderous-applause/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Be careful to the CSS &lt;code&gt;content-visibility&lt;/code&gt; property: &lt;a href=&quot;https://marcysutton.com/content-visibility-accessible-semantics&quot;&gt;https://marcysutton.com/content-visibility-accessible-semantics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Difference between &lt;code&gt;aria-label&lt;/code&gt;, &lt;code&gt;labelledby&lt;/code&gt;, &lt;code&gt;describedby&lt;/code&gt;: &lt;a href=&quot;https://benmyers.dev/blog/aria-labels-and-descriptions/&quot;&gt;https://benmyers.dev/blog/aria-labels-and-descriptions/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Labeling a control (interactive elements), prioritized the methods, to read: &lt;a href=&quot;https://adrianroselli.com/2020/01/my-priority-of-methods-for-labeling-a-control.html&quot;&gt;https://adrianroselli.com/2020/01/my-priority-of-methods-for-labeling-a-control.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aria-haspopup&lt;/code&gt;, not very robust and therefore to be avoided, how… : &lt;a href=&quot;https://html5accessibility.com/stuff/2021/02/02/haspopup-haspoop/&quot;&gt;https://html5accessibility.com/stuff/2021/02/02/haspopup-haspoop/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;An update on focus visibility, technics: &lt;a href=&quot;https://www.nicchan.me/blog/tips-for-focus-styles/&quot;&gt;https://www.nicchan.me/blog/tips-for-focus-styles/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Advice for voice control and SVG: &lt;a href=&quot;https://www.ajsaucier.com/accessibility/2020/12/14/voice-control-and-css-psuedo-elements.html&quot;&gt;https://www.ajsaucier.com/accessibility/2020/12/14/voice-control-and-css-psuedo-elements.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Change accessible names dynamically, bad thing sometimes!: &lt;a href=&quot;https://adrianroselli.com/2020/12/be-careful-with-dynamic-accessible-names.html&quot;&gt;https://adrianroselli.com/2020/12/be-careful-with-dynamic-accessible-names.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alt&lt;/code&gt; and &lt;code&gt;figcaption&lt;/code&gt;, for whom, why: &lt;a href=&quot;https://thoughtbot.com/blog/alt-vs-figcaption&quot;&gt;https://thoughtbot.com/blog/alt-vs-figcaption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Anchor and accessibility link: &lt;a href=&quot;https://amberwilson.co.uk/blog/are-your-anchor-links-accessible/&quot;&gt;https://amberwilson.co.uk/blog/are-your-anchor-links-accessible/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;mobile-app&quot;&gt;Mobile app &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/watch-january-february-2021/#mobile-app&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Mobile guidelines on the very serious &lt;a href=&quot;http://bbc.co.uk/&quot;&gt;bbc.co.uk&lt;/a&gt;: &lt;a href=&quot;https://www.bbc.co.uk/accessibility/forproducts/guides/mobile/&quot;&gt;https://www.bbc.co.uk/accessibility/forproducts/guides/mobile/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;ergonomics-ui-ux&quot;&gt;Ergonomics, UI &amp;amp; UX &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/watch-january-february-2021/#ergonomics-ui-ux&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;User experience and accessibility, basic points: &lt;a href=&quot;https://www.awwwards.com/accessibility-in-user-experience-how-to-include-people-with-disabilities.html&quot;&gt;https://www.awwwards.com/accessibility-in-user-experience-how-to-include-people-with-disabilities.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Users without mouse, the basics: &lt;a href=&quot;https://uxdesign.cc/taking-the-keyboard-navigation-red-pill-dbb76dd73b1e&quot;&gt;https://uxdesign.cc/taking-the-keyboard-navigation-red-pill-dbb76dd73b1e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cognitive load, examples: &lt;a href=&quot;https://uxdesign.cc/the-cognitive-overload-happening-on-your-screen-right-now-deee2a913393&quot;&gt;https://uxdesign.cc/the-cognitive-overload-happening-on-your-screen-right-now-deee2a913393&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;8 points on UX and a11y: &lt;a href=&quot;https://uxdesign.cc/8-faqs-about-accessible-ux-7c5a372a1ffb&quot;&gt;https://uxdesign.cc/8-faqs-about-accessible-ux-7c5a372a1ffb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/watch-january-february-2021/#resources&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Web code and design pattern libraries, full of resources: &lt;a href=&quot;http://www.webaxe.org/web-accessible-code-library-design-systems-patterns/&quot;&gt;http://www.webaxe.org/web-accessible-code-library-design-systems-patterns/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cool resources for a11y devs: &lt;a href=&quot;https://www.upyoura11y.com/&quot;&gt;https://www.upyoura11y.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Resources for accessibility and laws: &lt;a href=&quot;https://accessibility-manual.dwp.gov.uk/accessibility-law&quot;&gt;https://accessibility-manual.dwp.gov.uk/accessibility-law&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A little history of screen readers: &lt;a href=&quot;https://knowbility.org/blog/2021/a-brief-history-of-screen-readers/&quot;&gt;https://knowbility.org/blog/2021/a-brief-history-of-screen-readers/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Excellent video episodes of Heydon Pickering, here on ARIA, must see, humor in: &lt;a href=&quot;https://briefs.video/videos/what-is-aria-even-for/&quot;&gt;https://briefs.video/videos/what-is-aria-even-for/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Newsletter digital accessibility: &lt;a href=&quot;http://www.webaxe.org/digital-accessibility-newsletters/&quot;&gt;http://www.webaxe.org/digital-accessibility-newsletters/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2021 dev tools a11y: &lt;a href=&quot;https://dev.to/jaketracey/the-best-web-accessibility-tools-for-developers-in-2021-8c8&quot;&gt;https://dev.to/jaketracey/the-best-web-accessibility-tools-for-developers-in-2021-8c8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Semantic HTML: &lt;a href=&quot;https://dev.to/eevajonnapanula/ode-to-semantic-html-38c3&quot;&gt;https://dev.to/eevajonnapanula/ode-to-semantic-html-38c3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The semantic web, go further than the previous link: &lt;a href=&quot;https://24days.in/umbraco-cms/2020/semantics-in-web-development/&quot;&gt;https://24days.in/umbraco-cms/2020/semantics-in-web-development/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;List of accessible sites: &lt;a href=&quot;https://www.a11ywebsites.com/&quot;&gt;https://www.a11ywebsites.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;others&quot;&gt;Others &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/watch-january-february-2021/#others&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Progressive enhancement, where are we?: &lt;a href=&quot;https://briefs.video/videos/is-progressive-enhancement-dead-yet/&quot;&gt;https://briefs.video/videos/is-progressive-enhancement-dead-yet/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Why separate HTML, CSS and JS is good for the user: &lt;a href=&quot;https://hiddedevries.nl/en/blog/2020-11-25-why-its-good-for-users-that-html-css-and-js-are-separate-languages&quot;&gt;https://hiddedevries.nl/en/blog/2020-11-25-why-its-good-for-users-that-html-css-and-js-are-separate-languages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>#a11y technical watch, March-May 2021</title>
    <link href="https://a11y-guidelines.orange.com/en/articles/watch-march-may-2021/"/>
    <updated>2021-06-03T00:00:00Z</updated>
    <id>https://a11y-guidelines.orange.com/en/articles/watch-march-may-2021/</id>
    <content type="html">&lt;h1&gt;Digital accessibility watch March - May  2021&lt;/h1&gt;
&lt;p&gt;Over and over in this technical watch, we tell you and prouve it, that magical accessibility overlays don&#39;t work.&lt;/p&gt;
&lt;p&gt;These &amp;quot;magic solutions&amp;quot; bristle the hair of the A11y community, examples  :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.accessibyebye.org/&quot;&gt;https://www.accessibyebye.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.vice.com/en/article/m7az74/people-with-disabilities-say-this-ai-tool-is-making-the-web-worse-for-them&quot;&gt;https://www.vice.com/en/article/m7az74/people-with-disabilities-say-this-ai-tool-is-making-the-web-worse-for-them&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://uxdesign.cc/the-single-biggest-threat-to-the-future-of-digital-accessibility-d5a9e411f33f&quot;&gt;https://uxdesign.cc/the-single-biggest-threat-to-the-future-of-digital-accessibility-d5a9e411f33f&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On May 20, it was the GAAD, Global Awareness Accessibility Day, many things took place, here&#39;s a thing that seems nice, 10 short videos (&amp;lt;1 minute) on a11y : &lt;a href=&quot;https://www.youtube.com/playlist?list=PLTqm2yVMMUKWTr9XWdW5hJ9tk512Ow0SE&quot;&gt;https://www.youtube.com/playlist?list=PLTqm2yVMMUKWTr9XWdW5hJ9tk512Ow0SE&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last minute: 9th WebAim survey on screen reader users, do not hesitate to answer (even if you are only a tester or occasional user): &lt;a href=&quot;https://webaim.org/projects/screenreadersurvey9/&quot;&gt;https://webaim.org/projects/screenreadersurvey9/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;accessibility-in-laws-standards-and-guidelines&quot;&gt;Accessibility in laws, standards and guidelines &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/watch-march-may-2021/#accessibility-in-laws-standards-and-guidelines&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Explanation of future new WCAG 2.2 criteria in French: &lt;a href=&quot;https://access42.net/wcag-2-2-explication-des-nouveaux-criteres-proposes&quot;&gt;https://access42.net/wcag-2-2-explication-des-nouveaux-criteres-proposes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The impacts of WCAG 2.2: &lt;a href=&quot;https://makeitfable.com/article/wcag-2-2/&quot;&gt;https://makeitfable.com/article/wcag-2-2/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Editor draft 05/05/2021 of &amp;quot;Aria in HTML&amp;quot;: &lt;a href=&quot;https://w3c.github.io/html-aria/&quot;&gt;https://w3c.github.io/html-aria/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Real-time communication and accessibility from W3c: &lt;a href=&quot;https://www.w3.org/TR/raur/&quot;&gt;https://www.w3.org/TR/raur/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is normative or not in WCAG: &lt;a href=&quot;https://hiddedevries.nl/en/blog/2021-04-27-whats-normative-in-wcag&quot;&gt;https://hiddedevries.nl/en/blog/2021-04-27-whats-normative-in-wcag&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Section title and WCAG compliance: &lt;a href=&quot;https://www.tpgi.com/heading-off-confusion-when-do-headings-fail-wcag/&quot;&gt;https://www.tpgi.com/heading-off-confusion-when-do-headings-fail-wcag/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In-depth reflection on improving WCAG to make them more operational, to read: &lt;a href=&quot;https://level-level.com/blog/we-need-to-talk-about-wcag/&quot;&gt;https://level-level.com/blog/we-need-to-talk-about-wcag/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;feedback-and-accessibility&quot;&gt;Feedback and accessibility &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/watch-march-may-2021/#feedback-and-accessibility&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Smashing Magazine gives feedback not only with a11y in it, interesting: &lt;a href=&quot;https://www.smashingmagazine.com/2021/03/floating-labels-performance-lighthouse/&quot;&gt;https://www.smashingmagazine.com/2021/03/floating-labels-performance-lighthouse/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to make drop-down navigation menus accessible, to read: &lt;a href=&quot;https://css-tricks.com/in-praise-of-the-unambiguous-click-menu/&quot;&gt;https://css-tricks.com/in-praise-of-the-unambiguous-click-menu/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Temporary disability and vestibular disorders, nice: &lt;a href=&quot;https://alistapart.com/article/accessibility-for-vestibular/&quot;&gt;https://alistapart.com/article/accessibility-for-vestibular/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set up a button &amp;quot;show password&amp;quot; (in): &lt;a href=&quot;https://technology.blog.gov.uk/2021/04/19/simple-things-are-complicated-making-a-show-password-option/&quot;&gt;https://technology.blog.gov.uk/2021/04/19/simple-things-are-complicated-making-a-show-password-option/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;accessibility-strategy&quot;&gt;Accessibility strategy &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/watch-march-may-2021/#accessibility-strategy&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Another demo which prouves that respecting the standard without user tests, well, it&#39;s not the right thing to do, to read: &lt;a href=&quot;https://www.smashingmagazine.com/2020/11/weaving-web-accessibility-usability/&quot;&gt;https://www.smashingmagazine.com/2020/11/weaving-web-accessibility-usability/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use recent CSS to improve accessibility, read: &lt;a href=&quot;https://moderncss.dev/modern-css-upgrades-to-improve-accessibility/&quot;&gt;https://moderncss.dev/modern-css-upgrades-to-improve-accessibility/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;test-accessibility&quot;&gt;Test accessibility &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/watch-march-may-2021/#test-accessibility&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Auto accessibility testing in React, cool: &lt;a href=&quot;https://medium.com/czi-technology/automated-accessibility-testing-for-react-30c88cf892f4&quot;&gt;https://medium.com/czi-technology/automated-accessibility-testing-for-react-30c88cf892f4&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Points that an automatic audit does not perceive in pdf, to read &lt;a href=&quot;https://www.microassist.com/digital-accessibility/pdf-accessibility-errors-automated-tools-miss/&quot;&gt;https://www.microassist.com/digital-accessibility/pdf-accessibility-errors-automated-tools-miss/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A web accessibility checklist and a testing tool: &lt;a href=&quot;https://webflow.com/accessibility/checklist&quot;&gt;https://webflow.com/accessibility/checklist&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reminder auto accessibility tools are not everything, you have to know how to use: &lt;a href=&quot;https://chrisheilmann.medium.com/you-cant-automate-accessibility-testing-9f278ab6b7a&quot;&gt;https://chrisheilmann.medium.com/you-cant-automate-accessibility-testing-9f278ab6b7a&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Testing accessibility, large-scale methodology: &lt;a href=&quot;https://www.smashingmagazine.com/2021/04/bake-layers-accessibility-testing-process/&quot;&gt;https://www.smashingmagazine.com/2021/04/bake-layers-accessibility-testing-process/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update 2021 of the Million study from Webaim, the top one million websites automatically tested: &lt;a href=&quot;https://webaim.org/projects/million/lookup?homepage=orange.fr&quot;&gt;https://webaim.org/projects/million/lookup?homepage=orange.fr&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An automatic accessibility test tool that I did not know (in): &lt;a href=&quot;https://www.accessi.org/&quot;&gt;https://www.accessi.org/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Axe linter an extension for your Visual Studio Code: &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=deque-systems.vscode-axe-linter&quot;&gt;https://marketplace.visualstudio.com/items?itemName=deque-systems.vscode-axe-linter&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;technical-accessibility-points&quot;&gt;Technical accessibility points &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/watch-march-may-2021/#technical-accessibility-points&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Big work on sortable and accessible column headers: &lt;a href=&quot;https://adrianroselli.com/2021/04/sortable-table-columns.html&quot;&gt;https://adrianroselli.com/2021/04/sortable-table-columns.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Understand the accessible DOM (accessible tree) the base: &lt;a href=&quot;https://blogs.intuit.com/blog/2021/01/12/why-the-accessibility-tree-is-key-to-understanding-accessible-applications/&quot;&gt;https://blogs.intuit.com/blog/2021/01/12/why-the-accessibility-tree-is-key-to-understanding-accessible-applications/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make it accessible to screen reader and voice recognition users, a point not often covered: &lt;a href=&quot;https://www.sarasoueidan.com/blog/accessible-text-labels/&quot;&gt;https://www.sarasoueidan.com/blog/accessible-text-labels/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Full point on aria-hidden, to read: &lt;a href=&quot;https://html5accessibility.com/stuff/2021/05/31/the-hidden-world-of-aria-hidden/&quot;&gt;https://html5accessibility.com/stuff/2021/05/31/the-hidden-world-of-aria-hidden/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The inert attribute to avoid taking focus, to read: &lt;a href=&quot;https://css-tricks.com/focus-management-and-inert/&quot;&gt;https://css-tricks.com/focus-management-and-inert/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Semantics and ARIA, 2 feature articles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.filamentgroup.com/lab/practical-accessibility-1-semantics/&quot;&gt;https://www.filamentgroup.com/lab/practical-accessibility-1-semantics/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.filamentgroup.com/lab/practical-accessibility-2-names/&quot;&gt;https://www.filamentgroup.com/lab/practical-accessibility-2-names/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Accessible toggle button, to know everything: &lt;a href=&quot;https://kittygiraudel.com/2021/04/05/an-accessible-toggle/&quot;&gt;https://kittygiraudel.com/2021/04/05/an-accessible-toggle/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Page title and React, how to do it right: &lt;a href=&quot;https://dev.to/steady5063/accessible-titles-in-react-210j&quot;&gt;https://dev.to/steady5063/accessible-titles-in-react-210j&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Focus and accessibility indicator: &lt;a href=&quot;https://craftcms.com/accessibility/designing-custom-focus-indicators&quot;&gt;https://craftcms.com/accessibility/designing-custom-focus-indicators&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Anticipate changes in WCAG: &lt;a href=&quot;https://medium.com/intuit-design/designing-for-the-wcag-future-15e3435459a7&quot;&gt;https://medium.com/intuit-design/designing-for-the-wcag-future-15e3435459a7&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Difference between aria-disabled and disabled: &lt;a href=&quot;https://html5accessibility.com/stuff/2021/03/15/re-upped-short-note-on-the-disabled-aria-disabled-attributes/&quot;&gt;https://html5accessibility.com/stuff/2021/03/15/re-upped-short-note-on-the-disabled-aria-disabled-attributes/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;mobile-app&quot;&gt;Mobile app &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/watch-march-may-2021/#mobile-app&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Introduction to a11y mobile apps, to begin with: &lt;a href=&quot;https://www.shopify.com/partners/blog/mobile-accessibility&quot;&gt;https://www.shopify.com/partners/blog/mobile-accessibility&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Accessibility and React Native, to know everything: &lt;a href=&quot;https://medium.com/adapptor/accessibility-and-react-native-from-0-to-100-abde4cbaf56b&quot;&gt;https://medium.com/adapptor/accessibility-and-react-native-from-0-to-100-abde4cbaf56b&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;ergonomics-ui-ux&quot;&gt;Ergonomics, UI &amp;amp; UX &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/watch-march-may-2021/#ergonomics-ui-ux&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Complete article on design systems, good or bad: &lt;a href=&quot;https://www.usabilis.com/design-patterns-pour-la-composition-interfaces/&quot;&gt;https://www.usabilis.com/design-patterns-pour-la-composition-interfaces/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Great feature article on accessible typography: &lt;a href=&quot;https://cariefisher.com/a11y-content/&quot;&gt;https://cariefisher.com/a11y-content/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A bit of a continuation of the previous one, readability and accessibility: &lt;a href=&quot;https://medium.com/the-readability-group/typographic-accessibility-in-more-detail-4a11a0ef1cc2&quot;&gt;https://medium.com/the-readability-group/typographic-accessibility-in-more-detail-4a11a0ef1cc2&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Design for Autism Spectrum Disorders: &lt;a href=&quot;https://uxdesign.cc/inclusive-design-guide-7-principles-of-designing-for-the-autistic-community-1e6dcd4bae85&quot;&gt;https://uxdesign.cc/inclusive-design-guide-7-principles-of-designing-for-the-autistic-community-1e6dcd4bae85&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/watch-march-may-2021/#resources&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tutorial on technical accessibility, to test: &lt;a href=&quot;https://teachaccess.github.io/tutorial/&quot;&gt;https://teachaccess.github.io/tutorial/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some good a11y tips for devs: &lt;a href=&quot;https://www.hassellinclusion.com/blog/elearning-accessibility-poster/&quot;&gt;https://www.hassellinclusion.com/blog/elearning-accessibility-poster/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Accessibility of newsletters: &lt;a href=&quot;https://mn.gov/mnit/media/blog/?id=38-472949&quot;&gt;https://mn.gov/mnit/media/blog/?id=38-472949&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The wealth of documents at W3c in terms of accessibility by theme, great: &lt;a href=&quot;https://www.lireo.com/helpful-accessibility-resources-from-the-web-accessibility-initiative/&quot;&gt;https://www.lireo.com/helpful-accessibility-resources-from-the-web-accessibility-initiative/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;First step for an accessible, educational website: &lt;a href=&quot;https://convergeaccessibility.com/blog/&quot;&gt;https://convergeaccessibility.com/blog/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Interesting accessible dev expert Q&amp;amp;A: &lt;a href=&quot;https://knowbility.org/blog/2021/developer-techniques-for-screen-reader-accessibility&quot;&gt;https://knowbility.org/blog/2021/developer-techniques-for-screen-reader-accessibility&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Accessibility and e-learning poster, cool: &lt;a href=&quot;https://www.hassellinclusion.com/blog/elearning-accessibility-poster/&quot;&gt;https://www.hassellinclusion.com/blog/elearning-accessibility-poster/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;others&quot;&gt;Others &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/watch-march-may-2021/#others&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Live subtitles in chrome for audio and video: &lt;a href=&quot;https://blog.google/products/chrome/live-caption-chrome/&quot;&gt;https://blog.google/products/chrome/live-caption-chrome/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lectures on a11y, full of topics, to see: &lt;a href=&quot;https://a11ytalks.com/&quot;&gt;https://a11ytalks.com/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Accessibility myths debunked: &lt;a href=&quot;https://ux.shopify.com/accessibility-is-more-than-a-technical-problem-ca6bb9dee8ce&quot;&gt;https://ux.shopify.com/accessibility-is-more-than-a-technical-problem-ca6bb9dee8ce&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Single Page Applications (SPA)</title>
    <link href="https://a11y-guidelines.orange.com/en/articles/single-page-app/"/>
    <updated>2021-06-25T00:00:00Z</updated>
    <id>https://a11y-guidelines.orange.com/en/articles/single-page-app/</id>
    <content type="html">&lt;h1&gt;Recommendations for Single Page Applications&lt;/h1&gt;
&lt;p&gt;A &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/SPA&quot;&gt;single-page web application (SPA)&lt;/a&gt; is a web application in which page refresh never occurs. During navigation, only portions of the page are dynamically updated using JavaScript code.&lt;/p&gt;
&lt;p&gt;&lt;abbr title=&quot;single page application&quot;&gt;SPA&lt;/abbr&gt;s have met with enthusiasm since the advent of JavaScript frameworks: Angular, React or Vue to name only the most popular. In this article, the idea is not to take sides for or against PPS. It must be recognized that used correctly, this type of framework can solve problems, especially when it is used in the design of large web applications. We will focus here on the difficulties that this can bring in terms of accessibility.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; &lt;abbr title=&quot;single page applications&quot;&gt;SPAs&lt;/abbr&gt; should never become the norm. If your need can be met with the help of a standard site you don&#39;t need to succumb to the hype. A standard website natively offers accessibility support and spares you the need to get started with a complex framework, skills training, maintenance or compatibility problems with old browsers.&lt;/p&gt;
&lt;h2 id=&quot;update-page-title&quot;&gt;Update page title &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/single-page-app/#update-page-title&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Browsing through an &lt;abbr title=&quot;single-page application&quot;&gt;SPA&lt;/abbr&gt; does not cause the browser to reload the page. However, it is important that &lt;a href=&quot;https://a11y-guidelines.orange.com/en/web/develop/textual-content/#set-a-title-for-each-page&quot;&gt;each page has a unique title&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It will therefore be necessary to update the title of the page via Javascript (&lt;code&gt;document.title&lt;/code&gt;). Refer to the documentation of the framework used to know if an implementation of this mechanism is proposed or if it must be created from scratch.&lt;/p&gt;
&lt;h2 id=&quot;notify-user-of-page-changes&quot;&gt;Notify user of page changes &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/single-page-app/#notify-user-of-page-changes&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Screen readers used by visually impaired people inform the user automatically when a new page is loaded by the browser. In the context of an &lt;abbr title=&quot;single-page application&quot;&gt;SPA&lt;/abbr&gt;, page changes do not lead to reloading by the browser. The screen reader therefore has no way of warning the user.&lt;/p&gt;
&lt;p&gt;An acceptable solution is to move the focus to the first heading &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; of the current page. This will cause it to be read by the screen reader, so the user will be warned that a new page is displayed.&lt;br /&gt;
Note that by default an &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag is not focusable. To allow it to receive focus via Javascript, you must add a &lt;code&gt;tabindex=&amp;quot;-1&amp;quot;&lt;/code&gt; attribute to it.&lt;/p&gt;
&lt;h2 id=&quot;notify-the-user-of-updates-inside-the-page&quot;&gt;Notify the user of updates inside the page &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/single-page-app/#notify-the-user-of-updates-inside-the-page&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If the information is dynamically updated in the page (confirmation message, loading in progress, error display, etc.). It is important to have screen readers announce these changes. Several methods are available depending on the case:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Move the focus to an element that has just been updated.&lt;/li&gt;
&lt;li&gt;Use ARIA as indicated in the following articles: &lt;a href=&quot;https://a11y-guidelines.orange.com/en/articles/aria-status-messages/&quot;&gt;Use ARIA status, status or contextual messages&lt;/a&gt; and &lt;a href=&quot;https://a11y-guidelines.orange.com/en/articles/aria-live-alert/&quot;&gt;The aria-live attribute and the role alert&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;move-focus&quot;&gt;Move focus &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/single-page-app/#move-focus&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On a classic website, when a user clicks on a link and a new page is displayed, the focus is automatically repositioned at the top of the page (on the &lt;code&gt;body&lt;/code&gt;). So for users who navigate using the keyboard, just use the &lt;code&gt;TAB&lt;/code&gt; key to move around the page.&lt;/p&gt;
&lt;p&gt;In a &lt;abbr title=&quot;single-page application&quot;&gt;SPA&lt;/abbr&gt;, if a user clicks on a button that causes a content update, the focus is not moved (it remains on the button). More importantly, if the page change made the element that was in focus disappear, the user will no longer know where he is on the page. It can also cause vocalization issues for people who navigate using a screen reader.&lt;/p&gt;
&lt;p&gt;It is therefore important to make sure to move the focus via Javascript when necessary. Likewise if a modal dialog box is displayed on the screen, the focus must be positioned in the box when it appears and then replaced on the original element (a button for example) when it disappears.&lt;/p&gt;
&lt;h2 id=&quot;use-html-5-semantics&quot;&gt;Use HTML 5 semantics &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/single-page-app/#use-html-5-semantics&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;Abbr title=&quot;single-page application&quot;&gt;SPA are often used in web applications. The user sometimes has to deal with an interface that looks more like a native application than that of a website. It is important to ensure that the different areas are correctly identified: navigation, content, search area, etc.&lt;/Abbr&gt;&lt;/p&gt;
&lt;p&gt;If your application has specific areas, it is recommended to assign them a &lt;code&gt;label&lt;/code&gt; so that they are quickly identifiable. For example using a &lt;code&gt;&amp;lt;region&amp;gt;&lt;/code&gt; tag and an &lt;code&gt;aria-label&lt;/code&gt; or&lt;code&gt; aria-labelledby&lt;/code&gt; attribute.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;
&amp;lt;div role=&quot;region&quot; aria-label=&quot;activity monitor&quot;&amp;gt;
  &amp;lt;!-- region content --&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;
&amp;lt;div role=&quot;region&quot; aria-label=&quot;cost simulator&quot;&amp;gt;
  &amp;lt;!-- region content --&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See the article: &lt;a href=&quot;https://a11y-guidelines.orange.com/en/web/components-examples/landmarks/#main-content&quot;&gt;ARIA regions or landmarks&lt;/a&gt;, to get more information on the use of these tags.&lt;/p&gt;
&lt;h2 id=&quot;manage-browser-history&quot;&gt;Manage browser history &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/single-page-app/#manage-browser-history&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Nothing could be more annoying than exiting an application when you simply wanted to go back to the previous page using the browser&#39;s &lt;code&gt;previous&lt;/code&gt; button. However, this is what sometimes happens in &lt;abbr title=&quot;single-page application&quot;&gt;SPA&lt;/abbr&gt;.&lt;/p&gt;
&lt;p&gt;The solution is to manipulate the browser history in Javascript using the &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/API/History_API&quot;&gt;History API&lt;/a&gt;. This allows you to store the different states of the application and return to them using the &lt;code&gt;previous&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt; buttons of the browser.&lt;/p&gt;
&lt;h2&gt;Summary of good practices&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Update the page title (&lt;code&gt;document.title&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Notify the user of page changes&lt;/li&gt;
&lt;li&gt;Notify the user of updates inside the page (ARIA)&lt;/li&gt;
&lt;li&gt;Move focus&lt;/li&gt;
&lt;li&gt;Use HTML 5 semantics&lt;/li&gt;
&lt;li&gt;Manage browser history (History API)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;useful-links&quot;&gt;Useful links &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/single-page-app/#useful-links&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dev.to/s_aitchison/page-titles-and-a11y-in-single-page-applications-esp-react-vue-4ok8&quot;&gt;Page Titles and A11y in Single Page Applications (Suzanne Aitchison)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.com/blog/2019-07-11-user-testing-accessible-client-routing/&quot;&gt;What we learned from user testing of accessible client-side routing techniques with Fable Tech Labs (Marcy Sutton)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Disable HTML elements</title>
    <link href="https://a11y-guidelines.orange.com/en/articles/disable-elements/"/>
    <updated>2021-07-01T00:00:00Z</updated>
    <id>https://a11y-guidelines.orange.com/en/articles/disable-elements/</id>
    <content type="html">&lt;h2 id=&quot;disable-form-elements&quot;&gt;Disable form elements &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/disable-elements/#disable-form-elements&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;disabled&lt;/code&gt; attribute is used to disable form elements&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;button disabled&amp;gt;Delete&amp;lt;/button&amp;gt;
&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;address&amp;quot; disabled&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If a &lt;code&gt;&amp;lt;fieldset&amp;gt;&lt;/code&gt; is disabled, the descendant form controls are all disabled.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;fieldset id=&amp;quot;group&amp;quot; disabled&amp;gt; 
    &amp;lt;input name=&amp;quot;foo&amp;quot;&amp;gt; 
    &amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;bar&amp;quot;&amp;gt; 
    &amp;lt;select name=&amp;quot;values&amp;quot;&amp;gt; 
        &amp;lt;option value=&amp;quot;1&amp;quot;&amp;gt;Value 1&amp;lt;/option&amp;gt;
        &amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;Value 2&amp;lt;/option&amp;gt;
        &amp;lt;option value=&amp;quot;3&amp;quot;&amp;gt;Value 3&amp;lt;/option&amp;gt;        
    &amp;lt;/select&amp;gt;
&amp;lt;/fieldset&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Disable a link&lt;/h1&gt;
&lt;p&gt;To disable a link, unlike the previous technique, the use of the &lt;code&gt;disabled&lt;/code&gt; attribute is not allowed. It is still possible to disable a link by following 3 steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;remove the &lt;code&gt;href&lt;/code&gt; attribute so that it can no longer receive the focus&lt;/li&gt;
&lt;li&gt;add a &lt;code&gt;role=&amp;quot;link&amp;quot;&lt;/code&gt; so that it is always considered a link by screen readers&lt;/li&gt;
&lt;li&gt;add an attribute &lt;code&gt;aria-disabled=&amp;quot;true&amp;quot;&lt;/code&gt; so that it is indicated as being disabled&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;a role=&quot;link&quot; aria-disabled=&quot;true&quot;&amp;gt; Disabled link &amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check out Scott O&#39;Hara&#39;s excellent article on the subject: &lt;a href=&quot;https://www.scottohara.me/blog/2021/05/28/disabled-links.html&quot;&gt;Disabling a link&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Text size and color </title>
    <link href="https://a11y-guidelines.orange.com/en/articles/font-size-and-colors/"/>
    <updated>2021-07-05T00:00:00Z</updated>
    <id>https://a11y-guidelines.orange.com/en/articles/font-size-and-colors/</id>
    <content type="html">&lt;h1&gt;Text size and color&lt;/h1&gt;
&lt;p&gt;In this article, we will try to answer the following questions concerning the accessibility of texts in web pages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What size should I use for the texts?&lt;/li&gt;
&lt;li&gt;What is the minimum font size to respect?&lt;/li&gt;
&lt;li&gt;What color can I use for the text?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;what-do-the-guidelines-say&quot;&gt;What do the guidelines say ? &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/font-size-and-colors/#what-do-the-guidelines-say&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.w3.org/WAI/standards-guidelines/wcag/&quot;&gt;WCAG&lt;/a&gt; do not impose a minimum size or colors for texts. However two criteria must be taken into consideration:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/WCAG21/#resize-text&quot;&gt; 1.4.4 Resize text &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/WCAG21/#contrast-minimum&quot;&gt; 1.4.3 Contrast (Minimum) &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;text-size-enlargement&quot;&gt;Text size enlargement &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/font-size-and-colors/#text-size-enlargement&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If the guidelines do not impose a minimum size for characters, &lt;a href=&quot;https://www.w3.org/TR/WCAG21/#resize-text&quot;&gt;criterion 1.4.4&lt;/a&gt; indicates that the user must be able to increase text size up to 200% without loss of content or functionality. To comply with this criterion, it is essential to test. The procedure to increase text size is available on the following page: &lt;a href=&quot;https://a11y-guidelines.orange.com/en/web/toolbox/methods-and-test-tools/text-zoom/&quot;&gt;Text size enlargement&lt;/a&gt;.&lt;br /&gt;
Sometimes the sizing of certain blocks of text, in particular using sizes in pixels, can lead to loss of information (truncated texts), it is therefore advisable to use relative units (%, em, rem ...).&lt;/p&gt;
&lt;h3 id=&quot;color-contrast&quot;&gt;Color contrast &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/font-size-and-colors/#color-contrast&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The guidelines do not require the use or even prohibit the use of certain colors for texts. However, a light gray text on a white background, for example, could be difficult. It is therefore essential to check that the text color and the background color provide a sufficient level of contrast (see levels below). This can be done easily with help &lt;a href=&quot;https://a11y-guidelines.orange.com/en/web/toolbox/methods-and-test-tools/color-contrast-level/&quot;&gt;of tools&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/WCAG21/#contrast-minimum&quot;&gt;Criterion 1.4.3 of the standard&lt;/a&gt; details the required contrast levels.&lt;/p&gt;
&lt;p&gt;For standard texts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;size less than 24px: contrast of 4.5:1 minimum&lt;/li&gt;
&lt;li&gt;size greater than or equal to 24px: contrast of 3:1 minimum&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For bold texts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;size less than 18.5px: contrast of 4.5:1 minimum&lt;/li&gt;
&lt;li&gt;size greater than or equal to 18.5px: contrast of 3:1 minimum&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For non-underlined links&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;contrast of 3:1 minimum with the surrounding text and with the background color&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The criterion mentions a few exceptions subject to no constraint, in particular the texts of inactive elements (a button appearing grayed out for example), the texts forming part of a logo or a brand name.&lt;/p&gt;
&lt;h2 id=&quot;what-about-users&quot;&gt;What about users ? &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/font-size-and-colors/#what-about-users&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The guidelines do not impose a minimum size because it assumes that it is possible to enlarge the text if necessary. In fact, users do not always adjust the size of the text to their needs, due to a lack of habit or ignorance of the possibilities offered to them. This is why it is important that the default size is sufficient to ensure reading comfort.&lt;/p&gt;
&lt;p&gt;The size and the color are not the only characteristics which come into play on the readability of a text, indeed the typeface or the use of text in italics can have important consequences. You will find some additional recommendations on this subject in the &lt;a href=&quot;https://a11y-guidelines.orange.com/en/editorial-content/&quot;&gt;editorial content section &lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>#a11y technical watch, June-July 2021</title>
    <link href="https://a11y-guidelines.orange.com/en/articles/watch-june-july-2021/"/>
    <updated>2021-08-03T00:00:00Z</updated>
    <id>https://a11y-guidelines.orange.com/en/articles/watch-june-july-2021/</id>
    <content type="html">&lt;h1&gt;Digital accessibility watch June– July&lt;/h1&gt;
&lt;p&gt;The holidays are here, but still so many articles written ...&lt;br /&gt;
A holiday messy editorial (laughs) :D&lt;br /&gt;
On accessibility overlays, again and again:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://toddl.dev/posts/accessibe-is-not-your-friend/&quot;&gt;https://toddl.dev/posts/accessibe-is-not-your-friend/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ericwbailey.design/writing/accessibe-and-the-false-david-vs-goliath-narrative/&quot;&gt;https://ericwbailey.design/writing/accessibe-and-the-false-david-vs-goliath-narrative/&lt;/a&gt;&lt;br /&gt;
In France, the assignment of Koena by Facil&#39;iti, Koena must be supported in this process, in French: &lt;a href=&quot;https://koena.net/assignation-de-koena-par-faciliti/&quot;&gt;https://koena.net/assignation-de-koena-par-faciliti/&lt;/a&gt;&lt;br /&gt;
A reflection at the heart of our profession of accessibility expert, different opinions on what this profession is, fascinating in our colleague the famous Stéphane D. blog, in French: &lt;a href=&quot;https://nota-bene.org/Qu-est-ce-qu-une-experte-an-expert-accessibility&quot;&gt;https://nota-bene.org/Qu-est-ce-qu-une-experte-an-expert-accessibility&lt;/a&gt;&lt;br /&gt;
And finally, an article on what we can do on a daily basis to be more inclusive in our digital practices, in French: &lt;a href=&quot;https://www.a11yproject.com/posts/2021-06-14-everyday_accessibility/&quot;&gt;https://www.a11yproject.com/posts/2021-06-14-everyday_accessibility/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;accessibility-in-laws-standards-and-recommendations&quot;&gt;Accessibility in laws, standards and recommendations &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/watch-june-july-2021/#accessibility-in-laws-standards-and-recommendations&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A Luxembourg&#39;s RGAA like for mobile apps, sin French: &lt;a href=&quot;https://accessibilite.public.lu/fr/raam1/&quot;&gt;https://accessibilite.public.lu/fr/raam1/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wcag 2.2 explanation of the new criteria in French: &lt;a href=&quot;https://access42.net/wcag-2-2-explication-des-nouveaux-criteres-proposes&quot;&gt;https://access42.net/wcag-2-2-explication-des-nouveaux-criteres-proposes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WCAG 2.2 request for clarifications, relevant reflection: &lt;a href=&quot;https://www.tpgi.com/wcag-22-working-draft-feedback/&quot;&gt;https://www.tpgi.com/wcag-22-working-draft-feedback/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Expected feedback on the application of the Web Accessibility Directive of the European community comments open to all: &lt;a href=&quot;https://digital-strategy.ec.europa.eu/en/news/commission-seeks-feedback-improve-public-sector-website-and-mobile-apps-accessibility&quot;&gt;https://digital-strategy.ec.europa.eu/en/news/commission-seeks-feedback-improve-public-sector-website-and-mobile-apps-accessibility&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The editor&#39;s draft version of Using ARIA from w3c: &lt;a href=&quot;https://w3c.github.io/using-aria/&quot;&gt;https://w3c.github.io/using-aria/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The candidate recommendation of ARIA in HTML: &lt;a href=&quot;https://www.w3.org/TR/html-aria/&quot;&gt;https://www.w3.org/TR/html-aria/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A reflection on what needs to be improved in WCAG to make them more usable, interesting: &lt;a href=&quot;https://level-level.com/blog/we-need-to-talk-about-wcag/&quot;&gt;https://level-level.com/blog/we-need-to-talk-about-wcag/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Abuses in the application of the RGAA, in French: &lt;a href=&quot;https://certam-avh.com/fr/dossiers-thematiques/accessibilite-numerique-halte-aux-petits-et-gros-arrangements-avec-le-rgaa&quot;&gt;https://certam-avh.com/fr/dossiers-thematiques/accessibilite-numerique-halte-aux-petits-et-gros-arrangements-avec-le-rgaa&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;feedback-and-accessibility&quot;&gt;Feedback and accessibility &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/watch-june-july-2021/#feedback-and-accessibility&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On accessibility options in a site: &lt;a href=&quot;https://www.petergoes.nl/blog/should-a-website-provide-configurable-accessibility-options-to-users/&quot;&gt;https://www.petergoes.nl/blog/should-a-website-provide-configurable-accessibility-options-to-users/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some tips for devs starting a11y: &lt;a href=&quot;https://dev.to/steady5063/starting-your-accessibility-journey-a-developers-guide-37o4&quot;&gt;https://dev.to/steady5063/starting-your-accessibility-journey-a-developers-guide-37o4&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Google docs improves its accessibility: &lt;a href=&quot;https://www.techradar.com/news/google-docs-is-getting-a-major-accessibility-upgrade&quot;&gt;https://www.techradar.com/news/google-docs-is-getting-a-major-accessibility-upgrade&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;accessibility-strategy&quot;&gt;Accessibility strategy &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/watch-june-july-2021/#accessibility-strategy&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The right conditions for the implementation of an accessibility strategy: &lt;a href=&quot;https://www.smashingmagazine.com/2021/07/strong-case-for-accessibility/&quot;&gt;https://www.smashingmagazine.com/2021/07/strong-case-for-accessibility/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Produce an accessible video: &lt;a href=&quot;https://tetralogical.com/articles/an-inclusive-approach-to-video-production/&quot;&gt;https://tetralogical.com/articles/an-inclusive-approach-to-video-production/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An opensource WCAG-EM audit report tool under Eleventy, to test: &lt;a href=&quot;https://hiddedevries.nl/en/blog/2021-05-24-introducing-an-eleventy-starter-project-for&quot;&gt;https://hiddedevries.nl/en/blog/2021-05-24-introducing-an-eleventy-starter-project-for&lt;/a&gt; -wcag-reports&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Product management and basic accessibility: &lt;a href=&quot;https://www.tpgi.com/accessibility-strategy-for-product-management/&quot;&gt;https://www.tpgi.com/accessibility-strategy-for-product-management/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Empathy is not enough to implement accessibility, relevant thinking: &lt;a href=&quot;https://www.frontiersin.org/articles/10.3389/fcomp.2021.617044/full&quot;&gt;https://www.frontiersin.org/articles/10.3389/fcomp.2021.617044/full&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A video on how to integrate a11y into the life cycle of a project, see: &lt;a href=&quot;https://mle.southampton.ac.uk/bb/access/amazing/&quot;&gt;https://mle.southampton.ac.uk/bb/access/amazing/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;test-accessibility&quot;&gt;Test accessibility &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/watch-june-july-2021/#test-accessibility&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;an overview of accessibility testing tools: &lt;a href=&quot;https://www.smashingmagazine.com/2021/06/complete-guide-accessibility-tooling/&quot;&gt;https://www.smashingmagazine.com/2021/06/complete-guide-accessibility-tooling/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tips and tricks for testing with ATs: &lt;a href=&quot;https://blog.tenon.io/tips-tricks-for-testing-accessibility-with-assistive-technologies/&quot;&gt;https://blog.tenon.io/tips-tricks-for-testing-accessibility-with-assistive-technologies/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A complete overview of testing tools in a11y, a real bible (en): &lt;a href=&quot;https://www.smashingmagazine.com/2021/06/complete-guide-accessibility-tooling/&quot;&gt;https://www.smashingmagazine.com/2021/06/complete-guide-accessibility-tooling/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a11y auto tests with React, nice guide: &lt;a href=&quot;https://medium.com/czi-technology/automated-accessibility-testing-for-react-30c88cf892f4&quot;&gt;https://medium.com/czi-technology/automated-accessibility-testing-for-react-30c88cf892f4&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An a11y auto test crawl tool on MacOS and Linux (en): &lt;a href=&quot;https://github.com/GovTechSG/purple-hats&quot;&gt;https://github.com/GovTechSG/purple-hats&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A handy wcag 2.1 checklist tool but not worth the va11ydette [laughs] :D: &lt;a href=&quot;https://webflow.com/accessibility/checklist&quot;&gt;https://webflow.com/accessibility/checklist&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test the a11y in Edge Chromium devtools: &lt;a href=&quot;https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/accessibility/accessibility-testing-in-devtools&quot;&gt;https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/accessibility/accessibility-testing-in-devtools&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A bookmarklet to validate html in a11y, super practical and easy: &lt;a href=&quot;https://codepen.io/stevef/pen/VRZdGJ/&quot;&gt;https://codepen.io/stevef/pen/VRZdGJ/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;technical-accessibility-points&quot;&gt;Technical accessibility points &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/watch-june-july-2021/#technical-accessibility-points&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Accessible modals, everything is explained: &lt;a href=&quot;https://www.smashingmagazine.com/2021/07/accessible-dialog-from-scratch/&quot;&gt;https://www.smashingmagazine.com/2021/07/accessible-dialog-from-scratch/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use of the section element in html: &lt;a href=&quot;https://www.scottohara.me/blog/2021/07/16/section.html&quot;&gt;https://www.scottohara.me/blog/2021/07/16/section.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Css to implement accessibility (en): &lt;a href=&quot;https://accessibilite.public.lu/fr/raam1/index.html&quot;&gt;https://accessibilite.public.lu/fr/raam1/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keyboard navigation accessible in React: &lt;a href=&quot;https://www.freecodecamp.org/news/designing-keyboard-accessibility-for-complex-react-experiences/&quot;&gt;https://www.freecodecamp.org/news/designing-keyboard-accessibility-for-complex-react-experiences/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Decorative images and more, web technics: &lt;a href=&quot;https://www.smashingmagazine.com/2021/06/img-alt-attribute-alternate-description-decorative/&quot;&gt;https://www.smashingmagazine.com/2021/06/img-alt-attribute-alternate-description-decorative/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The ARI roles to know everything about: &lt;a href=&quot;https://www.a11yproject.com/posts/2020-08-20-an-indepth-guide-to-aria-roles/&quot;&gt;https://www.a11yproject.com/posts/2020-08-20-an-indepth-guide-to-aria-roles/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aria-hidden will no longer have any secrets: &lt;a href=&quot;https://html5accessibility.com/stuff/2021/05/31/the-hidden-world-of-aria-hidden/&quot;&gt;https://html5accessibility.com/stuff/2021/05/31/the-hidden-world-of-aria-hidden/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A complete article on the criterion 2.5.5 size of the target: &lt;a href=&quot;https://css-tricks.com/looking-at-wcag-2-5-5-for-better-target-sizes/&quot;&gt;https://css-tricks.com/looking-at-wcag-2-5-5-for-better-target-sizes/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Practical questions on alt texts to images and expert answers a11y, practical: &lt;a href=&quot;https://knowbility.org/blog/2021/best-practices-for-image-text-alternatives&quot;&gt;https://knowbility.org/blog/2021/best-practices-for-image-text-alternatives&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A multi-column data table sorting system: &lt;a href=&quot;https://adrianroselli.com/2021/06/multi-column-sortable-table-experiment.html&quot;&gt;https://adrianroselli.com/2021/06/multi-column-sortable-table-experiment.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;mobile-app&quot;&gt;Mobile app &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/watch-june-july-2021/#mobile-app&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Introduction to a11y native apps: &lt;a href=&quot;https://www.shopify.com/partners/blog/mobile-accessibility&quot;&gt;https://www.shopify.com/partners/blog/mobile-accessibility&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Accessibility recommendations for Luxembourg government mobile apps, in French: &lt;a href=&quot;https://accessibilite.public.lu/fr/raam1/index.html&quot;&gt;https://accessibilite.public.lu/fr/raam1/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;ergonomics-ui-ux&quot;&gt;Ergonomics, UI &amp;amp; UX &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/watch-june-july-2021/#ergonomics-ui-ux&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;UX and accessibility for the cognitively impaired, a lot of background work, well documented: &lt;a href=&quot;https://www.ab11y.com/articles/ux-principles-that-include-cognitive-accessibility/&quot;&gt;https://www.ab11y.com/articles/ux-principles-that-include-cognitive-accessibility/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Perfect links, bible: &lt;a href=&quot;https://www.a11y-collective.com/blog/the-perfect-link/&quot;&gt;https://www.a11y-collective.com/blog/the-perfect-link/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fitt’s law in practice, really, try it !!!!: &lt;a href=&quot;http://simonwallner.at/ext/fitts/&quot;&gt;http://simonwallner.at/ext/fitts/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;10 a11y tools for designers: &lt;a href=&quot;https://www.hongkiat.com/blog/accessibility-tools-for-designers/&quot;&gt;https://www.hongkiat.com/blog/accessibility-tools-for-designers/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A practical and well done introduction to digital accessibility for designers: &lt;a href=&quot;https://accessibility.uxdesign.cc/&quot;&gt;https://accessibility.uxdesign.cc/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make mega-menus more usable: &lt;a href=&quot;https://www.smashingmagazine.com/2021/05/frustrating-design-patterns-mega-dropdown-hover-menus/&quot;&gt;https://www.smashingmagazine.com/2021/05/frustrating-design-patterns-mega-dropdown-hover-menus/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Usable data tables: &lt;a href=&quot;https://medium.com/nextux/design-better-data-tables-4ecc99d23356&quot;&gt;https://medium.com/nextux/design-better-data-tables-4ecc99d23356&lt;/a&gt;&lt;br /&gt;
Resources&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Explain WCAG 2.1, very educational: &lt;a href=&quot;https://accessguide.io/&quot;&gt;https://accessguide.io/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Analysis of responses to the Ninth Webaim survey for users of screen readers, always rich in the evolution of practices: &lt;a href=&quot;https://webaim.org/projects/screenreadersurvey9/&quot;&gt;https://webaim.org/projects/screenreadersurvey9/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5 myths about screen readers injuring accessibility: &lt;a href=&quot;https://www.boia.org/blog/5-myths-about-screen-readers-that-can-hurt-accessibility&quot;&gt;https://www.boia.org/blog/5-myths-about-screen-readers-that-can-hurt-accessibility&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Podcast on hyperactivity, attention disorders and moving content: &lt;a href=&quot;https://a11yrules.com/podcast/julieanne-king-talks-about-moving-content-on-pages-and-adhd/&quot;&gt;https://a11yrules.com/podcast/julieanne-king-talks-about-moving-content-on-pages-and-adhd/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Everything about link and a11y, a must-read article: &lt;a href=&quot;https://www.a11y-collective.com/blog/the-perfect-link/&quot;&gt;https://www.a11y-collective.com/blog/the-perfect-link/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A taste of WCAG 2.2 to have a blink, video: &lt;a href=&quot;https://www.youtube.com/watch?v=EZlqSwgKuZE&quot;&gt;https://www.youtube.com/watch?v=EZlqSwgKuZE&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Resource to design an inclusive and accessible site, in French: &lt;a href=&quot;https://design-accessible.fr/&quot;&gt;https://design-accessible.fr/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;others&quot;&gt;Others &lt;a class=&quot;header-anchor&quot; href=&quot;https://a11y-guidelines.orange.com/en/articles/watch-june-july-2021/#others&quot; aria-labelledby=&quot;a11y_heading_anchor_label&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Auto-fill in the html fields, everything the dev can set up, to read: &lt;a href=&quot;https://cloudfour.com/thinks/autofill-what-web-devs-should-know-but-dont/&quot;&gt;https://cloudfour.com/thinks/autofill-what-web-devs-should-know-but-dont/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Program of PW2021, a must-see conference: &lt;a href=&quot;https://www.paris-web.fr/actualites/2021/06/programme-des-conferences-de-paris-web-2021-d&quot;&gt;https://www.paris-web.fr/actualites/2021/06/programme-des-conferences-de-paris-web-2021-d&lt;/a&gt; disponible.php&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One more point on the well-known a11y overlay tools, in French: &lt;a href=&quot;https://blog.empreintedigitale.fr/2021/06/01/outils-de-surcouche-daccessibilite-que-valent-ils-vraiment/&quot;&gt;https://blog.empreintedigitale.fr/2021/06/01/outils-de-surcouche-daccessibilite-que-valent-ils-vraiment/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>